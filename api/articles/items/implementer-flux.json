{"slug":"implementer-flux","filename":"2015-05-01-implementer-flux","title":"Implémenter Flux","date":"Fri, 01 May 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-05-01T00:00:00.000Z","title":"Implémenter Flux","author":"bloodyowl","oldSlug":"js/flux/implementer","slug":"implementer-flux"},"body":"<p>Si vous n'avez pas encore lu <a href=\"/fr/articles/js/flux/\">l'introduction à flux</a>,\nn'hésitez pas à jeter un œil avant de lire ce post.</p>\n<p>Une des choses importantes avec Flux, et pourtant pas évidentes après lecture\n<a href=\"https://github.com/facebook/flux/tree/master/examples/\">des exemples officiels</a>,\nc'est que les stores doivent être des instances, et non des singletons que les\ncomposants récupèrent en dépendance directe.</p>\n<p>La raison de cette nécessité, c'est la possibilité de servir une page pre-rendue\nsur le serveur. En soi, vous devez impérativement amorcer votre dispatcher et\nvos stores dans le scope de la requête, ou vos utilisateurs se retrouveront avec\ndes stores remplis de data ne leur appartenant pas.</p>\n<p>Puisque l'intérêt d'une solution comme react dans le cadre du server-side\nrendering est d'utiliser les mêmes composants que sur le client, il faut que\nnotre approche soit convenable sur nos deux environements.</p>\n<p>La question dès lors est «comment passer les stores à nos composants react\nmaintenant qu'ils ne sont plus des dépendances directes ?».</p>\n<p>On va les passer via les <code>props</code> de parent à enfant ? lolnope. La plupart de nos\ncomposants n'auront pas conscience de la présence de ces stores, et seront\nutilisés dans différents contextes. Et c'est justement l'API <code>context</code> que nous\nallons utiliser.</p>\n<p>Cette API est assez simple, en soi, le <code>context</code> d'un composant est construit au\nfur et à mesure que ses ancêtres décident d'y ajouter de la data.</p>\n<p>Exemple simple :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React, { Component, PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-comment\">// on définit les types de ce que l&#x27;on souhaite passer dans</span>\n  <span class=\"hljs-comment\">// le contexte</span>\n  <span class=\"hljs-keyword\">static</span> childContextTypes = {\n    <span class=\"hljs-attr\">foo</span>: PropTypes.string,\n  };\n\n  <span class=\"hljs-comment\">// on crée une méthode qui retourne ce contexte</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">getChildContext</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-built_in\">this</span>.props.foo,\n    };\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;putainde-App&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Container</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Container</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-comment\">// les contextes sont *merged*, ce qui nous permet de le construire</span>\n  <span class=\"hljs-comment\">// sans se soucier du niveau auquel sera notre composant.</span>\n  <span class=\"hljs-keyword\">static</span> childContextTypes = {\n    <span class=\"hljs-attr\">bar</span>: PropTypes.string,\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">getChildContext</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;oh hai&quot;</span>,\n    };\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;putainde-Container&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IntermediaryComponent</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class=\"hljs-comment\">// ce composant n&#x27;a pas besoin de savoir que ses enfants on besoin</span>\n<span class=\"hljs-comment\">// de certaines propriétés du contexte</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IntermediaryComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Content</span> /&gt;</span></span>;\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Content</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-comment\">// pour chaque composant utilisant des propriétés du contexte,</span>\n  <span class=\"hljs-comment\">// on stipule ce dont on a besoin</span>\n  <span class=\"hljs-keyword\">static</span> contextTypes = {\n    <span class=\"hljs-attr\">foo</span>: PropTypes.string,\n    <span class=\"hljs-attr\">bar</span>: PropTypes.string,\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;putainde-Content&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;putainde-Content-line&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>foo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>: {this.context.foo}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;putainde-Content-line&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>bar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>: {this.context.bar}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n\nReact.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">foo</span>=<span class=\"hljs-string\">{Date.now()}</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;App&quot;</span>));\n</code></pre>\n<p>Cela nous donne cet output :\n<a href=\"http://jsbin.com/zitohibaze/1/\">http://jsbin.com/zitohibaze/1/</a></p>\n<p>Grâce à cette API, on peut créer des composants isolés, et dont les composants\nparents n'auront pas nécessairement besoin de connaître le contexte.</p>\n<p>L'idée, pour en revenir à Flux, c'est de passer notre dispatcher dans ce\ncontexte, et de placer les stores dans le dispatcher au moment de l'amorce de\nl'app.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> dispatcher = <span class=\"hljs-keyword\">new</span> Dispatcher();\n\ndispatcher.registerStore(<span class=\"hljs-keyword\">new</span> SomeStore());\ndispatcher.registerStore(<span class=\"hljs-keyword\">new</span> SomeOtherStore());\n\nReact.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">dispatcher</span>=<span class=\"hljs-string\">{dispatcher}</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;App&quot;</span>));\n</code></pre>\n<p>Désormais, pour avoir une API décente pour récuperer les données des stores, on\na deux principales solutions:</p>\n<ul>\n<li>utiliser un mixin</li>\n<li>utiliser un higher-order component</li>\n</ul>\n<p>Puisque la direction que prend l'API de React, à terme, est de ne plus fournir\nde mixins, et de laisser au TC39 le temps de prendre la bonne décision sur la\nfaçon dont JavaScript traitera la composition ; il semble plus adéquat\nd'utiliser un higher-order component. Cela aura en plus l'avantage de rendre le\ncomposant récupérant les données <em>stateless</em>.</p>\n<p>Ce genre d'API ressemble à ça :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ComponentWithData</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-keyword\">static</span> stores = {\n    <span class=\"hljs-comment\">// nom du store: nom de la prop souhaitée</span>\n    <span class=\"hljs-attr\">MyStore</span>: <span class=\"hljs-string\">&quot;my_store&quot;</span>,\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        {/* la data est passée via les props*/}\n        {this.props.my_store.foo}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class=\"hljs-comment\">// storeReceiver wrap `ComponentWithData` dans un higher-order component</span>\n<span class=\"hljs-comment\">// et se charge de récupérer le store dans le contexte pour les passer</span>\n<span class=\"hljs-comment\">// dans les props de `ComponentWithData`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> storeReceiver(ComponentWithData);\n</code></pre>\n<p>Enfin, avec cette approche, les action creators que l'on voit dans les exemples\nde flux ne peuvent plus garder la même forme, puisqu'il ne doivent plus avoir le\ndispatcher comme dépendance directe (ce dernier étant une instance). Du coup, ce\nsont désormais des fonctions pures :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> PostActions = {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">getPost</span>(<span class=\"hljs-params\">slug</span>)</span> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">type</span>: ActionTypes.POST_GET,\n      <span class=\"hljs-attr\">slug</span>: slug,\n    };\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">receivePost</span>(<span class=\"hljs-params\">res</span>)</span> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">type</span>: ActionTypes.POST_RECEIVE,\n      res,\n    };\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">error</span>(<span class=\"hljs-params\">res</span>)</span> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">type</span>: ActionTypes.POST_ERROR,\n      res,\n    };\n  },\n};\n</code></pre>\n<p>et nos composants utilisent :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React, { Component, PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> PostActions <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;actions/PostActions&quot;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-keyword\">static</span> contextTypes = {\n    <span class=\"hljs-attr\">dispatcher</span>: PropTypes.object,\n  };\n\n  <span class=\"hljs-keyword\">static</span> propTypes = {\n    <span class=\"hljs-attr\">slug</span>: PropTypes.string,\n    <span class=\"hljs-attr\">title</span>: PropTypes.title,\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">handleClick</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.context.dispatcher.dispatch(PostActions.getPost(<span class=\"hljs-built_in\">this</span>.props.slug));\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> this.handleClick()}&gt;{this.props.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<p>Pour résumer, les avantages de cette approche sont :</p>\n<ul>\n<li>un meilleur découplage</li>\n<li>une isolation solide des composants</li>\n<li>la possibilité de pre-render sur le serveur</li>\n<li>une testabilité accrue, puisqu'il est simple d'utiliser un mock ou des\ninstances crées pour le test dans le contexte de nos composants.</li>\n</ul>\n<p>Bisous bisous.</p>\n"}