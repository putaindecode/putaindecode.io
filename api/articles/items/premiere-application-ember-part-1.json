{"slug":"premiere-application-ember-part-1","filename":"2014-10-27-premiere-application-ember-part-1","title":"Première application Ember (part 1)","date":"Mon, 27 Oct 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-10-27T00:00:00.000Z","title":"Première application Ember (part 1)","author":"bmeurant","oldSlug":"js/ember/premiere-app/1","slug":"premiere-application-ember-part-1"},"body":"<p>Après l'<a href=\"/fr/articles/js/ember/\">article précédent</a> qui a détaillé les\nprincipaux concepts d'<a href=\"http://emberjs.com\">Ember</a>, il est grand temps de se dégourdir les\ndoigts. Comme on a peur de rien, on va même construire progressivement ensemble\nune application avec <a href=\"http://emberjs.com\">Ember</a>.</p>\n<p>Bon, faut pas non plus trop vous emballer, c'est juste une application bateau de\ngestion d'une collection de BD. Ça pourrait être des clients, des légumes ou des\ntimbres mais là, c'est des BD.</p>\n<h2>Structure d'une application Ember</h2>\n<p>L'<a href=\"/fr/articles/js/ember/\">article précédent</a> a insisté sur le fait\nqu'<a href=\"http://emberjs.com\">Ember</a> était un framework avec des partis pris forts et un modèle de\ndéveloppement structurant.</p>\n<p><em>Note : sur ce sujet, vu que\n<a href=\"/fr/articles/js/ember/#comment-1644383934\">ça fait réagir</a>, je précise. Je ne\ndis pas que c'est bien ou que ce n'est pas bien. Je dis juste que c'est une\ncaractéristique importante d'<a href=\"http://emberjs.com\">Ember</a>. Autant le savoir.</em></p>\n<p>Eh bien, aussi étonnant que cela puisse paraître, <a href=\"http://emberjs.com\">Ember</a> <strong>nous laisse\nquand même nous débrouiller tout seul comme des grands pour organiser nos\napplications</strong>.</p>\n<p>Il existe donc différentes manières de structurer une application\n<a href=\"http://emberjs.com\">Ember</a>, de la plus basique à la plus complète et, sur ce point, chacun\npourra trouver ce qui conviendra le mieux à ses goûts, ses envies, ses\ncontraintes, son contexte... Que sais-je ? Ci-dessous, quelques exemples parmi\nd'autres.</p>\n<h3>À la mano</h3>\n<p>De base, avec <a href=\"http://emberjs.com\">Ember</a> on peut donc déclarer nos routes, contrôleurs,\nmodèles, etc. dans un seul fichier JavaScript ou dans une balise <code>&lt;script&gt;</code>. On\ndoit par contre impérativement respecter les\n<a href=\"http://emberjs.com/guides/concepts/naming-conventions/\">conventions de nommage</a>\net enregistrer nos objets dans une variable globale :</p>\n<pre><code class=\"hljs language-js\">App = Ember.Application.create();\n\nApp.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  ...\n});\n\nApp.BookRoute = Ember.Route.extend({\n  ...\n});\n</code></pre>\n<p>De la même manière, on peut déclarer nos gabarits\n<a href=\"http://handlebarsjs.com/\">Handlebars</a> via des balises <code>&lt;script&gt;</code> :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/x-handlebars&quot;</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">outlet</span></span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h3>Outillé</h3>\n<p>Comme on peut trouver ça un peu limité dans la vraie vie, on peut essayer\nd'organiser nous-même notre application, nos fichiers, gérer des modules, etc.\nTout ça va passer par l'utilisation d'un outil de build javascript de type\n<a href=\"http://gruntjs.com/\">Grunt</a>, <a href=\"http://gulpjs.com/\">Gulp</a>, <a href=\"https://github.com/broccolijs/broccoli\">Broccoli</a>.\nCes outils vont nous permettre de concaténer nos différents fichiers JavaScript\nen un seul, de sortir les gabarits dans des fichiers <code>.hbs</code> et de les\nprécompiler. On n'aura ensuite qu'à importer ces fichiers dans notre index.html\n:</p>\n<pre><code class=\"hljs language-html\">...\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;dist/libs/handlebars.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;dist/libs/ember.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;dist/application.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;dist/templates.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n...\n</code></pre>\n<p>Ça peut convenir parfaitement et on peut se mitonner des phases de build aux\npetits oignons pour nos besoins spécifiques. Mais on peut aussi rester un peu\nsur sa faim. Surtout si on a choisi <a href=\"http://emberjs.com\">Ember</a> pour son côté structurant.</p>\n<p>Du coup, une partie des membres de l'équipe <a href=\"http://emberjs.com\">Ember</a> a mis au point <a href=\"http://www.ember-cli.com/\">Ember\nCLI</a>.</p>\n<h3>Ember CLI</h3>\n<p><a href=\"http://www.ember-cli.com/\">Ember CLI</a> est une <strong>interface en ligne de commande</strong> pour\n<a href=\"http://emberjs.com\">Ember</a>. Elle repose sur l'outil de build <a href=\"https://github.com/broccolijs/broccoli\">Broccoli</a> et permet\n:</p>\n<ul>\n<li>d'initialiser une application Ember avec, cette fois, une <a href=\"http://www.ember-cli.com/#folder-layout\">structure de\nfichiers</a> et des\n<a href=\"http://www.ember-cli.com/#naming-conventions\">conventions de nommage</a></li>\n<li>de générer différents objets en mode scaffolding via des\n<a href=\"http://www.ember-cli.com/#using-ember-cli\">commandes</a>. Autant le dire tout de\nsuite, je ne suis pas fan du scaffolding mais on va regarder quand même pour\nne pas mourir idiots.</li>\n<li>d'utiliser des outils de build basés sur <a href=\"https://github.com/broccolijs/broccoli\">Broccoli</a> pour le\nprétraitement des pré-processeurs CSS par exemple</li>\n<li>d'utiliser les\n<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">modules ES6</a> plutôt\nqu'<a href=\"http://en.wikipedia.org/wiki/Asynchronous_module_definition\">AMD</a> ou\n<a href=\"http://en.wikipedia.org/wiki/CommonJS\">CommonJS</a> pour la modularisation.\nCette question a été largement débattue. Si ça vous intéresse, je vous laisse\ndécouvrir un\n<a href=\"http://tomdale.net/2012/01/amd-is-not-the-answer/\">article très intéressant</a>\nà ce sujet.</li>\n<li>...</li>\n</ul>\n<p>Je ne vais pas vous détailler davantage le truc, vous trouverez vous-même la\n<a href=\"http://www.ember-cli.com/\">doc officielle</a>. Et puis, on va tout de suite le mettre en pratique.</p>\n<p><em>Note : là encore, <a href=\"http://www.ember-cli.com/\">Ember CLI</a>, c'est un parti pris. Ce sera\nprobablement très bien accueilli par certains pour qui cela offre un cadre de\ntravail structuré et structurant. Mais ce sera aussi rejeté par d'autres qui le\nverront comme une grosse machine inutile. Ici encore, question de goût, question\nde contexte, question de besoins.</em></p>\n<p>Trèves de bavardages, on s'y met sérieusement :</p>\n<p>On installe <a href=\"http://nodejs.org/\">Node</a>, <a href=\"http://www.ember-cli.com/\">Ember CLI</a>, <a href=\"http://bower.io/\">Bower</a> :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install -g ember-cli</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install -g bower</span>\n</code></pre>\n<p>Ça y est, on peut maintenant demander gentiment à <a href=\"http://www.ember-cli.com/\">Ember CLI</a> de nous\ncréer notre application grâce à la commande <code>ember</code> et voir ensuite une\nmagnifique page de bienvenue sur <a href=\"http://localhost:4200/\">http://localhost:4200/</a> :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ember new ember-articles</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> ember-articles</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ember server</span>\n</code></pre>\n<p>Je ne vous fais pas l'affront de détailler ici la structure de l'application,\ntout est décrit dans la <a href=\"http://www.ember-cli.com/#folder-layout\">documentation</a>.</p>\n<h3>Styles &amp; Fonts</h3>\n<p>Pour que cela ne soit pas trop moche dans le cadre de cet exemple ou va ajouter\nun peu de CSS et des fonts mais comme c'est pas l'objet de l'article, on ne va\npas passer de temps là-dessus. Ceci dit, comme il y a quand même un peu de conf\n<a href=\"http://www.ember-cli.com/\">Ember CLI</a> qui peut vous intéresser, vous avez les styles et la conf\nsur <a href=\"https://github.com/bmeurant/ember-articles/tree/premiere-app-ember\">GitHub</a>\net l'explication dans ce\n<a href=\"https://gist.github.com/bmeurant/1bba49d8a12bf69a4cf0\">gist</a>.</p>\n<h2>Et maintenant, on code !</h2>\n<p><em>Note: le code de l'exemple est dispo sur\n<a href=\"https://github.com/bmeurant/ember-articles/tree/premiere-app-ember\">github</a>.</em></p>\n<ul>\n<li>Modification du gabarit général de l'application\n<code>/app/templates/application.hbs</code> :</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sources&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://github.com/bmeurant/ember-articles&quot;</span>\n    &gt;</span>View source on GitHub&lt;/a\n  &gt;\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Comic books library<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;main&quot;</span>&gt;</span>\n    {{outlet}}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p><em>Note : on en profite pour remarquer le rechargement à chaud via <code>ember server</code>\nlorsqu'on modifie un fichier.</em></p>\n<ul>\n<li>Création de la première route <code>/series</code> via <code>ember</code> :</li>\n</ul>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ember generate route series</span>\n</code></pre>\n<p><a href=\"http://www.ember-cli.com/\">Ember CLI</a> met à jour le routeur :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// routeur app/router.js</span>\nRouter.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.route(<span class=\"hljs-string\">&quot;series&quot;</span>);\n});\n</code></pre>\n<p>Il génère aussi pour nous une route <code>app/routes/series.js</code> et un gabarit\n<code>app/templates/series.hbs</code>, vides.</p>\n<p>Modifions tout de suite le gabarit <code>app/templates/series.hbs</code>, histoire de mieux\nvisualiser les choses :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Comics Series<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n</code></pre>\n<p>L'URL <code>/series</code> est désormais accessible sur <a href=\"http://localhost:4200/series\">http://localhost:4200/series</a> et on\npeut constater l'imbrication du gabarit <code>series.hbs</code> dans le gabarit général\n<code>application.hbs</code> grâce à son <code>{{outlet}}</code>.</p>\n<h3><code>{{outlet}}</code> et routes imbriquées</h3>\n<p>Ces notions sont au cœur d'<a href=\"http://emberjs.com\">Ember</a>. Leur fonctionnement est assez simple.\nLorsqu'une route est imbriquée dans une autre, <a href=\"http://emberjs.com\">Ember</a> va rechercher les\ngabarits de ces deux routes et remplacer la zone <code>{{outlet}}</code> de la <em>route mère</em>\navec le rendu de la <em>route fille</em>. Ainsi de suite jusqu'à résolution complète de\nla route. Lors des transitions entre routes, les zones des <code>{{outlet}}</code>\nconcernées par le changement sont mises à jour.</p>\n<p>Toutes les routes de l'application sont imbriquées dans la route\n<code>ApplicationRoute</code> générée par <a href=\"http://emberjs.com\">Ember</a> et dont le gabarit est\n<code>application.hbs</code>. C'est ce qui explique que, dans le cas présent, le gabarit\n<code>series.hbs</code> ait été <em>injecté</em> dans <code>application.hbs</code> pour construire\nl'application entière.</p>\n<h3>Routes et contrôleurs implicites</h3>\n<p>Pour rappel, <a href=\"http://emberjs.com\">Ember</a> définit et utilise différents types d'objets ayant\nchacun une responsabilité propre (voir\n<a href=\"/fr/articles/js/ember/\">article précédent</a>) et, pour ne pas nous obliger à\nfournir nous-même une implémentation par défaut de ces objets, les génère pour\nnous (voir\n<a href=\"/fr/articles/js/ember/#generation-d-objets\">article précédent - <em>Génération d'objets</em></a>).</p>\n<p>Si nous n'avons eu ici qu'à fournir le gabarit <code>application.hbs</code>, c'est\nqu'<a href=\"http://emberjs.com\">Ember</a> a généré pour nous la route implicite <code>ApplicationRoute</code>\nactivée au démarrage de l'application et le contrôleur <code>ApplicationController</code>.</p>\n<p>Mais <a href=\"http://emberjs.com\">Ember</a> a également généré pour nous la route <code>IndexRoute</code> et le\ncontrôleur <code>IndexController</code> en réponse à l'URL <code>/</code>. Pour être tout à fait\ncomplet, <a href=\"http://emberjs.com\">Ember</a> a aussi généré les éléments suivants <code>LoadingRoute</code>,\n<code>LoadingController</code>, <code>ErrorRoute</code> et <code>ErrorController</code> dont les caractéristiques\npeuvent être trouvées dans la\n<a href=\"http://emberjs.com/guides/routing/loading-and-error-substates/\">documentation</a>.</p>\n<p>Ces éléments implicites sont générés pour chaque route qui n'est pas une route\nde dernier niveau et peuvent être surchargés.</p>\n<ul>\n<li>L'URL <code>/</code> ne nous intéresse pas. Surchargeons la route <code>IndexRoute</code> pour\nrediriger vers <code>/series</code> :</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /app/routes/index.js</span>\n<span class=\"hljs-keyword\">import</span> Ember <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;ember&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Ember.Route.extend({\n  <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.transitionTo(<span class=\"hljs-string\">&quot;series&quot;</span>);\n  },\n});\n</code></pre>\n<p>-&gt; Par-là la\n<a href=\"http://emberjs.com/guides/routing/redirection/\">doc sur les redirections</a>.</p>\n<p>Maintenant, on veut afficher la liste des séries en allant sur <code>/series</code>. Encore\nfaut-il avoir des séries... Pour ça, on va utiliser la librairie <a href=\"https://github.com/emberjs/data\">Ember\nData</a> pour la gestion de nos modèles. Ce n'est pas obligatoire et\nbeaucoup font sans, mais nous on va l'utiliser quand même.</p>\n<h3>Ember Data</h3>\n<p>Cette librairie qui est développée en parallèle d'<a href=\"http://emberjs.com\">Ember</a> permet de gérer\nles modèles de données et les relations entre eux à la manière d'un\n<a href=\"http://fr.wikipedia.org/wiki/Mapping_objet-relationnel\">ORM</a> (à la\n<a href=\"http://en.wikipedia.org/wiki/Active_record_pattern\">ActiveRecord</a>). Elle permet\nnotamment de récupérer les données depuis une interface REST HTTP (et est\nparfaitement adaptée à <a href=\"http://jsonapi.org/\">JSON API</a>) mais pas que.</p>\n<p><a href=\"https://github.com/emberjs/data\">Ember Data</a> s'appuie sur un <code>store</code> (cf.\n<a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">doc</a>) manipulé par\nl'application et qui contient des méthodes telles que <code>find</code>, <code>createRecord</code>,\n<code>update</code>, etc. qui permettent d'effectuer des actions sur les différents modèles\ndu store. Au travers d'<code>Adapters</code>, le <code>store</code> transmet à la couche de\npersistence (REST ou autre).</p>\n<p>Le <code>RESTAdapter</code> (cf. <a href=\"http://emberjs.com/api/data/classes/DS.Store.html\">doc</a>)\net son jumeau maléfique le <code>RESTSerializer</code> (cf.\n<a href=\"http://emberjs.com/api/data/classes/DS.RESTSerializer.html\">doc</a>) peuvent être\nétendus facilement de manière à s'adapter à une interface REST spécifique.</p>\n<p>Pour un <a href=\"http://en.wikipedia.org/wiki/Proof_of_concept\">POC</a>, on peut utiliser\nle <code>FixtureAdapter</code> (cf.\n<a href=\"http://emberjs.com/api/data/classes/DS.FixtureAdapter.html\">doc</a>) qui permet de\ncharger simplement les objets depuis la mémoire. C'est ce que l'on utilise ici.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /app/adapters/application.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;ember-data&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> DS.FixtureAdapter.extend({});\n</code></pre>\n<ul>\n<li>On va donc créer un modèle correspondant. Seulement, voilà, comme j'ai eu la\nbonne idée de prendre un des rares mots en anglais où le pluriel et le\nsingulier sont identiques (<em>serie</em> n'existe pas), on va devoir créer un modèle\n<em>seriesItem</em> :</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /app/models/series-item.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember-data&#x27;</span>;\n\n<span class=\"hljs-keyword\">var</span> SeriesItem = DS.Model.extend({\n    <span class=\"hljs-attr\">title</span>               : DS.attr(<span class=\"hljs-string\">&#x27;string&#x27;</span>, {<span class=\"hljs-attr\">defaultValue</span>: <span class=\"hljs-string\">&#x27;New Series&#x27;</span>}),\n    <span class=\"hljs-attr\">scriptwriter</span>        : DS.attr(<span class=\"hljs-string\">&#x27;string&#x27;</span>),\n    <span class=\"hljs-attr\">illustrator</span>         : DS.attr(<span class=\"hljs-string\">&#x27;string&#x27;</span>),\n    <span class=\"hljs-attr\">publisher</span>           : DS.attr(<span class=\"hljs-string\">&#x27;string&#x27;</span>),\n    <span class=\"hljs-attr\">coverName</span>           : DS.attr(<span class=\"hljs-string\">&#x27;string&#x27;</span>, {<span class=\"hljs-attr\">defaultValue</span>: <span class=\"hljs-string\">&#x27;default.jpg&#x27;</span>}),\n    <span class=\"hljs-attr\">summary</span>             : DS.attr(<span class=\"hljs-string\">&#x27;string&#x27;</span>),\n    <span class=\"hljs-attr\">coverUrl</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;/assets/images/series/covers/&#x27;</span> + <span class=\"hljs-built_in\">this</span>.get(<span class=\"hljs-string\">&#x27;coverName&#x27;</span>);\n    }.property(<span class=\"hljs-string\">&#x27;coverName&#x27;</span>)\n});\n\nSeriesItem.reopenClass({\n    <span class=\"hljs-attr\">FIXTURES</span>: [{\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;BlackSad&#x27;</span>,\n    <span class=\"hljs-attr\">scriptwriter</span>: <span class=\"hljs-string\">&#x27;Juan Diaz Canales&#x27;</span>,\n    <span class=\"hljs-attr\">illustrator</span>: <span class=\"hljs-string\">&#x27;Juanjo Guarnido&#x27;</span>,\n    <span class=\"hljs-attr\">publisher</span>: <span class=\"hljs-string\">&#x27;Dargaud&#x27;</span>,\n    <span class=\"hljs-attr\">coverName</span>: <span class=\"hljs-string\">&#x27;blacksad.jpg&#x27;</span>,\n    <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-string\">&#x27;Private investigator John Blacksad is up to his feline ears in mystery, digging into the backstories behind murders, child abductions, and nuclear secrets. Guarnido\\&#x27;s sumptuously painted pages and rich cinematic style bring the world of 1950s America to vibrant life, with Canales weaving in fascinating tales of conspiracy, racial tension, and the &quot;red scare&quot; Communist witch hunts of the time. Guarnido reinvents anthropomorphism in these pages, and industry colleagues no less than Will Eisner, Jim Steranko, and Tim Sale are fans! Whether John Blacksad is falling for dangerous women or getting beaten to within an inch of his life, his stories are, simply put, unforgettable&#x27;</span>\n}, {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;The Killer&#x27;</span>,\n    <span class=\"hljs-attr\">scriptwriter</span>: <span class=\"hljs-string\">&#x27;Luc Jacamon&#x27;</span>,\n    <span class=\"hljs-attr\">illustrator</span>: <span class=\"hljs-string\">&#x27;Matz&#x27;</span>,\n    <span class=\"hljs-attr\">publisher</span>: <span class=\"hljs-string\">&#x27;Casterman&#x27;</span>,\n    <span class=\"hljs-attr\">coverName</span>: <span class=\"hljs-string\">&#x27;the-killer.jpg&#x27;</span>,\n    <span class=\"hljs-attr\">summary</span>: <span class=\"hljs-string\">&#x27;A man solitary and cold, methodical and unencumbered by scruples or regrets, the killer waits in the shadows, watching for his next target. And yet the longer he waits, the more he thinks he\\&#x27;s losing his mind, if not his cool. A brutal, bloody and stylish noir story of a professional assassin lost in a world without a moral compass, this is a case study of a man alone, armed to the teeth and slowly losing his mind.&#x27;</span>\n}, ...\n]});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> SeriesItem;\n</code></pre>\n<p>Au passage, on remarque les valeurs par défaut ainsi que la <a href=\"http://emberjs.com/guides/object-model/computed-properties/\">propriété\ncalculée</a> <code>coverUrl</code>. On aura l'occasion d'en reparler.</p>\n<ul>\n<li>On modifie donc notre application pour afficher, lors de l'activation de\n<code>SeriesRoute</code>, la liste des séries :</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /app/routes/series.js</span>\n<span class=\"hljs-keyword\">import</span> Ember <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;ember&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Ember.Route.extend({\n  <span class=\"hljs-attr\">model</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.store.find(<span class=\"hljs-string\">&quot;seriesItem&quot;</span>);\n  },\n});\n</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- /app/templates/series.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Comic Series<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-list&quot;</span>&gt;</span>\n    {{#each}}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-item&quot;</span>&gt;</span>\n      {{title}}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    {{/each}}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Number of series: {{length}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n{{outlet}}\n</code></pre>\n<p>On remarque le <code>{{#each}}</code> sans arguments qui par convention retrouve l'objet\n<code>model</code> du contrôleur. <code>{{#each model}}</code>, <code>{{#each controller}}</code> ou\n<code>{{#each controller.model}}</code> sont des notations équivalentes.</p>\n<ul>\n<li>Maintenant, on va essayer de dynamiser un peu tout ça en ajoutant un bouton\npour trier la liste :</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- /app/templates/series.hbs --&gt;</span>\n...\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Comic Series<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> {{<span class=\"hljs-attr\">action</span> &quot;<span class=\"hljs-attr\">sort</span>&quot;}} {{<span class=\"hljs-attr\">bind-attr</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;:sort sortAscending:asc:desc&quot;</span>}}&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-list&quot;</span>&gt;</span>\n...\n</code></pre>\n<p>Pour ça, il est nécessaire de définir notre propre <code>SeriesController</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /app/controllers/series.js</span>\n<span class=\"hljs-keyword\">import</span> Ember <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;ember&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Ember.ArrayController.extend({\n  <span class=\"hljs-attr\">sortAscending</span>: <span class=\"hljs-literal\">true</span>,\n\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-attr\">sort</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">this</span>.toggleProperty(<span class=\"hljs-string\">&quot;sortAscending&quot;</span>);\n    },\n  },\n});\n</code></pre>\n<p>Ce simple ajout demande de s'arrêter sur quelques points importants, histoire de\nbien comprendre ce qui se passe.</p>\n<h3>Types de contrôleurs</h3>\n<p>Nous avons dû remplacer le <code>SeriesController</code> implicite par notre propre\ncontrôleur, histoire de proposer cette fonction de tri. <a href=\"http://emberjs.com\">Ember</a> dispose\nde deux types de contrôleurs :\n<a href=\"http://emberjs.com/api/classes/Ember.ObjectController.html\">ObjectController</a>\net <a href=\"http://emberjs.com/api/classes/Ember.ArrayController.html\">ArrayController</a>.\nComme leur nom l'indique, ces contrôleurs permettent respectivement de gérer des\nmodèles de type objet ou de type collection.</p>\n<p>Dans notre cas, nous souhaitons manipuler la liste des séries et utilisons donc\nun <code>ArrayController</code>. Il utilise notamment le\n<a href=\"http://emberjs.com/api/classes/Ember.SortableMixin.html\">SortableMixin</a> qui\nfournit des fonctions de tri natives. Il nous suffit donc d'initialiser et de\nmettre à jour la propriété <code>sortAscending</code> apportée par ce mixin pour bénéficier\ndu tri sur notre collection de séries, sans avoir besoin d'autre chose.</p>\n<h3>Actions</h3>\n<p>La mise à jour de cette propriété est effectuée grâce à <code>{{action &quot;sort&quot;}}</code> qui\nnous permet de lier l'action sur le bouton (le clic) à une fonction <code>sort</code> du\ncontrôleur définie dans <code>actions: { ... }</code>.</p>\n<p>-&gt; Plus d'infos sur les actions\n<a href=\"http://emberjs.com/guides/templates/actions/\">ici</a>.</p>\n<h3><em>Bindings</em> de classes dynamiques</h3>\n<p>On remarque aussi la manière dont les classes de l'élément <code>button</code> sont liées\naux propriétés du contrôleur de manière à être mises à jour dynamiquement grâce\nà <code>{{bind-attr class=&quot;...&quot;}}</code>. Cette syntaxe permet de basculer la classe du\nbouton de <code>asc</code> à <code>desc</code> automatiquement lorsque la valeur de <code>sortAscending</code>\nchange. On note la notation <code>:sort</code> qui permet d'ajouter une classe de base,\nstatique.</p>\n<p>-&gt; Plus d'infos sur les classes\n<a href=\"http://emberjs.com/guides/templates/binding-element-class-names/\">ici</a>.</p>\n<ul>\n<li>Mais on ne va pas s'arrêter là. On va ajouter un petit filtre sur le titre des\nséries :</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- /app/templates/series.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Comic Series<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n\n    {{input value=filter class=&quot;filter&quot;}}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> {{<span class=\"hljs-attr\">action</span> &quot;<span class=\"hljs-attr\">sort</span>&quot;}} {{<span class=\"hljs-attr\">bind-attr</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;:sort sortAscending:asc:desc&quot;</span>}}&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-list&quot;</span>&gt;</span>\n      {{#each filteredModel}}\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-item&quot;</span>&gt;</span>\n              {{title}}\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      {{/each}}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Number of series: {{filteredModel.length}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n{{outlet}}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /app/controllers/series.js</span>\n...\n<span class=\"hljs-attr\">filter</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n<span class=\"hljs-attr\">sortAscending</span>: <span class=\"hljs-literal\">true</span>,\n\n<span class=\"hljs-attr\">filteredModel</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> filter = <span class=\"hljs-built_in\">this</span>.get(<span class=\"hljs-string\">&#x27;filter&#x27;</span>);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.get(<span class=\"hljs-string\">&#x27;content&#x27;</span>).filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>)</span>{\n    <span class=\"hljs-keyword\">if</span> (item.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>) === <span class=\"hljs-literal\">undefined</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> item.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>).toLowerCase().match(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(filter.toLowerCase()));\n  }).sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.get(<span class=\"hljs-string\">&#x27;sortAscending&#x27;</span>) ? (b.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>) &lt; a.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>)) : (b.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>) &gt; a.get(<span class=\"hljs-string\">&#x27;title&#x27;</span>));\n  }.bind(<span class=\"hljs-built_in\">this</span>));\n}.property(<span class=\"hljs-string\">&#x27;filter&#x27;</span>, <span class=\"hljs-string\">&#x27;sortAscending&#x27;</span>, <span class=\"hljs-string\">&#x27;model.@each.title&#x27;</span>),\n\n<span class=\"hljs-attr\">actions</span>: {\n...\n</code></pre>\n<h3>Propriétés calculées</h3>\n<p>Je vous passe le contenu de la fonction <code>filteredModel</code> qui n'apporte rien au\nsujet. Examinons par contre la notation\n<code>.property('filter', 'sortAscending', 'model.@each.title')</code>. Cela constitue la\ndéfinition d'une <a href=\"http://emberjs.com/guides/object-model/computed-properties/\">propriété calculée</a> : propriété accessible et\nmanipulable comme n'importe quelle propriété au sein des gabarits mais qui est\nle résultat d'une fonction dont le retour dépend de l'état d'autres propriétés.</p>\n<p>La syntaxe <code>.property('filter', 'sortAscending', 'model.@each.title')</code> définit\nles autres propriétés <em>observées</em> par cette propriété calculée et dont le\nchangement provoquera l'exécution de la fonction ainsi que le rafraîchissement\ndu gabarit. Ici, on peut constater que l'affichage est mis à jour et la liste\nfiltrée à chaque changement du champ de formulaire <code>filter</code> et donc de la\npropriété <code>filter</code> associée ou du sens du tri via la propriété <code>sortAscending</code>.</p>\n<p>La syntaxe particulière <code>model.@each.title</code> permet de mettre à jour l'affichage\nen cas de changement externe du titre de l'une (<code>@each</code>) des séries. Vous pouvez\nfacilement vous rendre compte de ça en utilisant <strong>Ember Inspector</strong>\n(<a href=\"https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en\">Chrome</a>\net <a href=\"https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/\">Firefox</a>).\nAllez dans <code>Data &gt; MODEL TYPES / series-item</code>, sélectionnez-en une et modifiez\nson titre. Vous constaterez que la liste est mise à jour automatiquement.</p>\n<p>Les <em>bindings</em> et les <a href=\"http://emberjs.com/guides/object-model/computed-properties/\">propriétés calculées</a> constituent deux\nmanières d'observer les changements et de <em>rafraîchir</em> l'application en\nconséquence. Les <a href=\"http://emberjs.com/guides/object-model/observers\">observeurs</a>\nen sont une troisième. Si vous avez un doute sur ce qu'il faut utiliser, allez\nvoir <a href=\"http://emberjs.com/guides/object-model/what-do-i-use-when\">ici</a>.</p>\n<h3><em>Bindings</em> et mise à jour des gabarits</h3>\n<p>Alors, comment ça marche ? Comment, concrètement, <a href=\"http://emberjs.com\">Ember</a> se débrouille\npour mettre à jour le gabarit lors de la mise à jour d'un modèle, d'une\npropriété ? En réalité, lorsqu'on affiche dans un gabarit une propriété\ndynamique liée à un modèle ou à une propriété, <a href=\"http://emberjs.com\">Ember</a> va l'encadrer par\ndes éléments HTML spéciaux, des marqueurs de type <code>&lt;script&gt;</code> d'id unique appelé\n<code>metamorph</code>. Attention, je préfère vous prévenir, ça va piquer !</p>\n<p>Ainsi,</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Blog de {{name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</code></pre>\n<p>va se transformer en :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>\n  Blog de\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;metamorph-0-start&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/x-placeholder&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  Baptiste Meurant\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;metamorph-0-end&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/x-placeholder&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</code></pre>\n<p>Alors oui, il faut avouer que là on est tenté de partir en courant. C'est le\npoint qui m'a vraiment gêné quand j'ai découvert <a href=\"http://emberjs.com\">Ember</a> et ça me gêne\nencore. C'était même à la limite du rédhibitoire. Ça pollue vraiment le DOM et\nintroduit même quelques effets de bord en CSS lorsqu'on utilise les\n<code>:first-child</code> ou <code>:last-child</code>. Ceci étant, c'est ce qui permet à\n<a href=\"http://emberjs.com\">Ember</a> de mettre à jour non pas un gabarit mais uniquement ces zones\ndynamiques de manière performante - j'ai fini par voir ça comme un mal\nnécessaire. Mais surtout, j'ai compris que ces <code>metamorph</code> étaient voués à\ndisparaître assez rapidement avec l'utilisation du moteur <a href=\"https://github.com/tildeio/htmlbars\">HTMLBars</a>.\nVous pouvez jeter un œil à ce sujet à la\n<a href=\"http://talks.erikbryn.com/htmlbars/\">présentation d'Eric Bryn</a> (notamment slide\n10). Ouf ! Le support d'<a href=\"https://github.com/tildeio/htmlbars\">HTMLBars</a> est prévu pour <a href=\"http://emberjs.com\">Ember</a> 1.9\nou 1.10 (la release actuelle est 1.7) ... On est impatients !</p>\n<p><em>Bonus: l'élément est un élément <code>script</code> et pas un autre car c'est à priori le\nseul élément qui peut être inséré partout sans rien casser.</em></p>\n<p><em><strong>Edit</strong>: Aujourd'hui (28/10/2014) est sortie la\n<a href=\"http://emberjs.com/blog/2014/10/26/ember-1-8-0-released.html\">version 1.8.0 d'Ember</a>.\nCette release ne contient pas encore le support complet d'<a href=\"https://github.com/tildeio/htmlbars\">HTMLBars</a>\nmais signe déjà la fin des <code>metamorph</code> au profit de l'utilisation d'élements\n<code>Text</code> vides, non intrusifs ! Ça méritait d'être signalé.</em></p>\n<h3><em>RunLoop</em></h3>\n<p>Un autre mécanisme important est impliqué tant dans le rendu des gabarits que\ndans le calcul et la synchronisation des propriétés entre elles : la <em>RunLoop</em>.\nCe mécanisme est absolument central dans le fonctionnement d'<a href=\"http://emberjs.com\">Ember</a> et\ns'appuie sur la lib <a href=\"https://github.com/ebryn/backburner.js/\">Backburner</a>. Dans\nla plupart des cas, vous n'avez pas à vous en préoccuper et vous pouvez\nparfaitement mettre en place une application <a href=\"http://emberjs.com\">Ember</a> complète sans\ninteragir directement avec la <em>RunLoop</em>, sauf lorsque vous ajoutez vos propres\n<code>helpers</code> <a href=\"http://handlebarsjs.com/\">Handlebars</a> ou vos propres composants\navancés. C'est par contre important d'en comprendre le fonctionnement.</p>\n<p>Comme son nom ne l'indique pas, la <em>RunLoop</em> n'est pas une loop mais un ensemble\nde queues permettant à <a href=\"http://emberjs.com\">Ember</a> de différer un certain nombre d'opérations\nqui seront ensuite exécutées en dépilant ces queues dans un ordre de priorité\ndonné. Les queues sont <code>sync</code>, <code>actions</code>, <code>routerTransitions</code>, <code>render</code>,\n<code>afterRender</code>, et <code>destroy</code>. Je vous laisse découvrir par vous-même dans la\n<a href=\"http://emberjs.com/guides/understanding-ember/run-loop/\">doc officielle</a> et\ndans cette\n<a href=\"http://talks.erikbryn.com/backburner.js-and-the-ember-run-loop\">présentation d'Eric Bryn</a>\nle contenu de ces queues et la manière dont est faite l'exécution.</p>\n<p>Je voudrais juste insister sur un aspect particulier : c'est ce mécanisme qui\npermet, en quelque sorte, d'empiler les calculs de propriétés calculées lorsque\nles propriétés <em>observées</em> sont modifiées et surtout c'est grâce à ce mécanisme\nque le rendu n'est effectué qu'une seule fois lors de la modification d'un\nmodèle.</p>\n<p>Pour reprendre l'exemple de la\n<a href=\"http://emberjs.com/guides/understanding-ember/run-loop/\">doc officielle</a>, si\nvous avez l'objet suivant :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">fullName</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.get(<span class=\"hljs-string\">&quot;firstName&quot;</span>) + <span class=\"hljs-string\">&quot; &quot;</span> + <span class=\"hljs-built_in\">this</span>.get(<span class=\"hljs-string\">&quot;lastName&quot;</span>);\n  }.property(<span class=\"hljs-string\">&quot;firstName&quot;</span>, <span class=\"hljs-string\">&quot;lastName&quot;</span>),\n});\n</code></pre>\n<p>Et le gabarit :</p>\n<pre><code class=\"hljs language-html\">{{firstName}} {{fullName}}\n</code></pre>\n<p>Tout ça, sans la <em>RunLoop</em>, ferait qu'on exécuterait le rendu deux fois si l'on\nmodifie successivement <code>firstname</code> puis <code>lastname</code>. La <em>RunLoop</em> met tout ça (et\nplein d'autres choses) en queue et n'effectue le rendu qu'une seule et unique\nfois, lorsque nécessaire.</p>\n<ul>\n<li>Après ça, on va finir en douceur en ajoutant simplement ou nouvelle route pour\nafficher la série qu'on a sélectionné :</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /app/router.js</span>\nRouter.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.resource(<span class=\"hljs-string\">&quot;series&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.route(<span class=\"hljs-string\">&quot;seriesItem&quot;</span>, { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/:seriesItem_id&quot;</span> });\n  });\n});\n</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- /app/templates/series.hbs --&gt;</span>\n...\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-list&quot;</span>&gt;</span>\n  {{#each filteredModel}}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-item&quot;</span>&gt;</span>\n    {{#link-to &#x27;series.seriesItem&#x27; this title=title}} {{title}} {{/link-to}}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  {{/each}}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n...\n\n<span class=\"hljs-comment\">&lt;!-- /app/templates/series/series-item.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;series-details&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{{title}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n    {{<span class=\"hljs-attr\">bind-attr</span>\n    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;coverUrl&quot;</span>\n    }}\n    <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Series&#x27;s first album cover&quot;</span>\n    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;cover&quot;</span>\n  /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dl</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;description&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>scriptwriter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>{{scriptwriter}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>illustrator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>{{illustrator}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>publisher<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>{{publisher}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dl</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;summary&quot;</span>&gt;</span>\n    {{summary}}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Et voilà ! Quelques remarques en passant :</p>\n<ul>\n<li>on peut maintenant sélectionner une série dans la liste grâce au\n<code>{{link-to}}</code>. On remarque au passage qu'<a href=\"http://emberjs.com\">Ember</a> sélectionne\nautomatiquement (ajoute une classe <code>active</code>) la série de la liste dont la\nroute est activée. On note également l'utilisation de <code>this</code> pour référencer\nl'objet courant (ici l'instance courante de <code>SeriesItem</code>). -&gt;\n<a href=\"http://emberjs.com/guides/templates/links/\">doc officielle</a>.</li>\n<li>on a transformé la route <code>series</code> en <em>Resource</em> qui permet de grouper les\nroutes sous un même espace de nommage. Notez que si la route <code>seriesItem</code>\navait été une ressource, on aurait dû fournir le template\n<code>/app/templates/series-item.hbs</code> au lieu de\n<code>/app/templates/series/series-item.hbs</code> car une ressource réinitialise\nl'espace de nommage et permet ainsi de simplifier les URL. -&gt;\n<a href=\"http://emberjs.com/guides/routing/defining-your-routes/#toc_resources\">doc officielle</a></li>\n<li>on a ajouté un <em>segment dynamique</em> <code>{path: '/:seriesItem_id'}</code> à la route\n<code>seriesItem</code> pour l'ID de la série. -&gt;\n<a href=\"http://emberjs.com/guides/routing/defining-your-routes/#toc_dynamic-segments\">doc officielle</a>.</li>\n</ul>\n<h2>Conclusions</h2>\n<p>Cet article est un peu plus long que ce que j'avais prévu et je n'ai pas abordé\ntous les sujets que je voulais traiter. Mais, plutôt que de dérouler simplement\ndu code pour montrer que ça marche, j'ai préféré m'arrêter sur les points\nimportants pour en expliquer le fonctionnement. Ça me paraissait important.\nJ'espère que ce n'était pas trop pénible à lire. Les points que je n'ai pas eu\nle temps de traiter (API REST avec un backend, tests, helpers, partials,\ncomposants, relations avec ember-data, etc.) feront peut-être l'objet d'un autre\npost mais un peu plus tard parce que je suis fatigué là et je sens que vous\naussi.</p>\n<p>Concernant <a href=\"http://emberjs.com\">Ember</a>, j'apprécie vraiment le modèle de développement, la\nstructure et j'aime vraiment développer avec cet outil. La discussion framework\n/ lib déjà évoquée fera sans doute toujours rage. En ce qui me concerne, quand\nj'ai besoin d'un framework, ma préférence va à <a href=\"http://emberjs.com\">Ember</a>.</p>\n<p>Concernant <a href=\"http://www.ember-cli.com/\">Ember CLI</a>, je suis plus partagé. J'apprécie l'aspect\nnormalisation de la structure de l'appli ainsi que l'outillage assez fourni\nqu'il embarque, le transpileur ES6. Je ne suis, par contre, pas fan du\nscaffolding en général mais, au démarrage, ça peut donner une idée de la manière\nde faire. J'espère cependant vous avoir donné suffisamment de clefs pour que\nvous vous fassiez une idée.</p>\n<p>Pour finir, je souhaite remercier l'équipe de <em>Putain de code !</em> qui ne partage\npas mes opinions sur les frameworks en général mais qui m'accueille quand même.\nCet article a vraiment dû vous piquer les yeux. Désolé :-)</p>\n<p><em>Note: les sources de l'application exemple sont\n<a href=\"https://github.com/bmeurant/ember-articles/tree/premiere-app-ember\">disponibles sur github</a>.</em></p>\n"}