{"slug":"introduction-a-styled-components","filename":"2017-02-01-introduction-a-styled-components","title":"Introduction √† styled-components","date":"Wed, 01 Feb 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-02-01T00:00:00.000Z","title":"Introduction √† styled-components","author":"revolunet","oldSlug":"js/react/styled-components","slug":"introduction-a-styled-components"},"body":"<p>Il existe de nombreuses approches et\n<a href=\"https://github.com/MicheleBertoli/css-in-js\">solutions diff√©rentes</a> pour g√©rer\nle CSS en React, je vais parler ici de\n<a href=\"https://github.com/styled-components/styled-components\">styled-components</a> qui\npermet de gagner en productivit√© et en qualit√© quand on veut cr√©er et distribuer\ndes composants UI.</p>\n<p>La force de\n<a href=\"https://github.com/styled-components/styled-components\">styled-components</a>\nc'est de faciliter la cr√©ation de composants visuels React minimalistes et\nconfigurables, en combinant du <strong>CSS standard</strong> et <strong>un zeste de JavaScript</strong>.\nCes composants deviendront litt√©ralement les pi√®ces de lego qui pourront √™tre\nutilis√©es et partag√©es entre les UIs de toutes vos applications, sites webs...</p>\n<p>Si vous voulez jouer avec, je vous conseille d'utiliser\n<a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> pour\ng√©n√©rer un projet vierge puis d'ajouter styled-components au projet :\n<code>npm i --save styled-components</code>.</p>\n<p>Avec styled, on peut abstraire le CSS et le DOM de la vue, ce qui va grandement\nsimplifier le code de la partie &quot;m√©tier&quot; de l'application, et am√©liorer la\nlisibilit√©.</p>\n<h5>Avant :</h5>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// solution en pure CSS-in-JS</span>\n\n<span class=\"hljs-keyword\">const</span> styles = {\n  <span class=\"hljs-attr\">box</span>: {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">&#x27;60%&#x27;</span>,\n    <span class=\"hljs-attr\">border</span>: <span class=\"hljs-string\">&#x27;1px solid silver&#x27;</span>\n  },\n  <span class=\"hljs-attr\">title</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&#x27;1.2em&#x27;</span>,\n    <span class=\"hljs-attr\">fontWeight</span>: <span class=\"hljs-string\">&#x27;bold&#x27;</span>\n  },\n  <span class=\"hljs-attr\">description</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&#x27;0.8em&#x27;</span>\n  },\n  <span class=\"hljs-attr\">important</span>: {\n    <span class=\"hljs-attr\">fontWeight</span>: <span class=\"hljs-string\">&#x27;bold&#x27;</span>\n  }\n}\n\n<span class=\"hljs-comment\">// nos composants int√®grent les styles dans le code</span>\n&lt;div className={ styles.box }&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">styles.title</span> }&gt;</span>{ title }<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">classnames</span>(<span class=\"hljs-attr\">styles.description</span>, <span class=\"hljs-attr\">styles.important</span>) }&gt;</span>{ description }<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<h5>Apr√®s :</h5>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// avec styled-components</span>\n\n<span class=\"hljs-keyword\">const</span> Box = styled.div<span class=\"hljs-string\">`\n  width: 60%;\n  border: 1px solid silver;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 1.2em;\n  font-weight: bold;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Description = styled.div<span class=\"hljs-string\">`\n  font-size: 0.8em;\n  font-weight: <span class=\"hljs-subst\">${ props =&gt; props.important ? <span class=\"hljs-string\">&#x27;bold&#x27;</span> : <span class=\"hljs-string\">&#x27;normal &#x27;</span>}</span>\n`</span>\n\n<span class=\"hljs-comment\">// les composants sont pr√©-styl√©s, pas de bruit g√©n√©r√© par le styling</span>\n&lt;Box&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Title</span>&gt;</span>{ title }<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Title</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Description</span> <span class=\"hljs-attr\">important</span>&gt;</span>{ description }<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Description</span>&gt;</span></span>\n&lt;/Box&gt;\n</code></pre>\n<h3>Avantages :</h3>\n<ul>\n<li><a href=\"https://github.com/styled-components/styled-components/graphs/contributors\">community powered</a>\n<ul>\n<li>moving fast,\n<a href=\"https://github.com/styled-components/styled-components/tree/v2\">v2 en cours</a></li>\n</ul></li>\n<li>support des\n<a href=\"https://github.com/styled-components/styled-components/blob/master/docs/theming.md\">th√®mes</a></li>\n<li><a href=\"https://github.com/styled-components/styled-components/blob/master/docs/css-we-support.md\">syntaxe CSS &quot;classique&quot;</a>\nmais scop√© automatiquement</li>\n<li>Gestion des media queries, pseudo-selectors, nesting</li>\n<li>Un\n<a href=\"https://github.com/rofrischmann/inline-style-prefixer/\">autoprefixer-like int√©gr√©</a></li>\n<li>Code &quot;m√©tier&quot; plus lisible</li>\n<li>Compatible react-native</li>\n<li>Compatible avec les <a href=\"https://facebook.github.io/jest/\">snapshots Jest</a> out of\nthe box</li>\n<li>Ne n√©cessite pas de loader Webpack sp√©cifique ‚ù§Ô∏è</li>\n</ul>\n<h3>Inconv√©nients :</h3>\n<ul>\n<li>pas encore id√©al pour\n<a href=\"https://github.com/styled-components/styled-components/issues/134\">des styles tr√®s dynamiques</a></li>\n<li>pas encore id√©al pour\n<a href=\"https://github.com/styled-components/styled-components/issues/124\">le server-side</a></li>\n<li>syntaxe pas forcement bien\n<a href=\"https://github.com/styled-components/styled-components#linting\">surlign√©e ou lint√©e</a>\nmais\n<a href=\"https://github.com/styled-components/styled-components#syntax-highlighting\">des plugins existent</a>.</li>\n</ul>\n<h3>Fonctionnement</h3>\n<p>Techniquement,\n<a href=\"https://github.com/styled-components/styled-components\">styled-components</a> va\npour chaque composant &quot;styled&quot; pr√©sent dans le DOM :</p>\n<ul>\n<li>injecter les classes CSS n√©cessaires pour ce composant dans le <code>&lt;head&gt;</code> de la\npage, au runtime.</li>\n<li>fournir au composant une props <code>className</code> unique (ainsi que ses <code>ownProps</code>)</li>\n</ul>\n<p>La syntaxe est certes exotique, le CSS √©tant d√©fini dans un template-string\nES2015, mais ceci rend le code tr√®s concis.</p>\n<p>Pour en savoir plus sur les &quot;Template Strings&quot;, ou &quot;Litt√©raux de gabarits&quot; en\nFran√ßais üá´üá∑ vous pouvez lire\n<a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits\">l'excellente doc chez MDN</a>.</p>\n<h3>Usage :</h3>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> styled <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;styled-components&#x27;</span>\n\n<span class=\"hljs-comment\">// exemple ici avec une div</span>\n<span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: #ff3333;\n`</span>\n\n<span class=\"hljs-comment\">// utilisable comme ceci :</span>\n&lt;Title&gt;Hello, World&lt;/Title&gt;\n</code></pre>\n<p>ceci qui g√©n√®rera automatiquement dans le DOM:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;dxhUOh&quot;</span>&gt;</span>Hello, World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>et injectera dans le CSS de la page le style associ√© :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.dxhUOh</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">3rem</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff3333</span>;\n}\n</code></pre>\n<p><img src=\"/public/images/articles/2017-02-01-introduction-a-styled-components/styled-1.png\" width=\"200\"/></p>\n<h2>Exemples</h2>\n<h3>Composition</h3>\n<p>Les composants styled sont des composants React standards qui peuvent recevoir\ndes <code>children</code> et se composer les uns avec les autres.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Box = styled.div<span class=\"hljs-string\">`\n  border: 1px solid silver;\n  width: 80%;\n  padding: 1em;\n  text-align: center;\n  background: #e7f3ff;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 1.5em;\n  color: #0080ff;\n`</span>\n\n&lt;Box&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Title</span>&gt;</span>Hello, World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Title</span>&gt;</span></span>\n&lt;/Box&gt;\n</code></pre>\n<p><img src=\"/public/images/articles/2017-02-01-introduction-a-styled-components/styled-2.png\" width=\"300\"/></p>\n<h3>Etendre des composants en CSS</h3>\n<p>Surcharger un composant avec du CSS :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: #ff3333;\n`</span>\n<span class=\"hljs-keyword\">const</span> BlueTitle = styled(Title)<span class=\"hljs-string\">`\n  color: #0080ff;\n`</span>\n&lt;Title&gt;titre en rouge&lt;/Title&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BlueTitle</span>&gt;</span>titre en bleu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BlueTitle</span>&gt;</span></span>\n</code></pre>\n<p><img src=\"/public/images/articles/2017-02-01-introduction-a-styled-components/styled-3.png\" width=\"200\"/></p>\n<h3>Pseudo classes</h3>\n<p>Les pseudo-classes, le nesting sont accept√©es</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Button = styled.button<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: #ff3333;\n  &amp;:hover {\n    color: #0080ff;\n  }\n`</span>;\n</code></pre>\n<p><img src=\"/public/images/articles/2017-02-01-introduction-a-styled-components/styled-hover.gif\" width=\"100\"/></p>\n<h3>Media queries</h3>\n<p>Les medias queries sont possibles facilement :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Cover = styled.div<span class=\"hljs-string\">`\n  background-image: url(http://putaindecode.io/assets/npm.png);\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: center center;\n  width: 800px;\n  height: 300px;\n\n  @media (max-width: 800px) {\n    width: 400px;\n  }\n`</span>;\n</code></pre>\n<p>Usage avanc√© des media queries :\n<a href=\"https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates\">https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates</a></p>\n<h3>Composants configurables</h3>\n<p>Mieux : comme le composant √† directement acc√®s aux <code>props</code> (attributs du\ncomposant), on peut le configurer depuis le JavaScript :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: <span class=\"hljs-subst\">${props =&gt; props.blue ? <span class=\"hljs-string\">&#x27;#0080ff&#x27;</span> : <span class=\"hljs-string\">&#x27;#ff3333&#x27;</span>}</span>;\n`</span>\n&lt;Title&gt;titre en rouge&lt;/Title&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Title</span> <span class=\"hljs-attr\">blue</span>&gt;</span>titre en bleu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Title</span>&gt;</span></span>\n</code></pre>\n<p><img src=\"/public/images/articles/2017-02-01-introduction-a-styled-components/styled-3.png\" width=\"200\"/></p>\n<h3>Dans un composant React &quot;classique&quot;</h3>\n<p>Avec la methode <code>styled.css</code>, une <code>className</code> unique est g√©n√©r√©e et peut √™tre\nutilis√©e pour vos composants :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> Notification <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Notification&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> warning = styled.css<span class=\"hljs-string\">`\n  color: #ff3333;\n`</span>;\n\n<span class=\"hljs-keyword\">const</span> WarningNotification = <span class=\"hljs-function\">() =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Notification</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{warning}</span> /&gt;</span></span>;\n</code></pre>\n<h3>R√©utiliser des styles</h3>\n<p>Comme styled utilise des\n<a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits\">templates literals</a>\nvous pouvez utiliser n'importe quelle variable dans votre CSS :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> textStyle = <span class=\"hljs-string\">`\n  font-size: 2em;\n  letter-spacing: 5px;\n`</span>\n<span class=\"hljs-keyword\">const</span> TextRed = styled.div<span class=\"hljs-string\">`\n  <span class=\"hljs-subst\">${textStyle}</span>\n  color: #ff3333;\n`</span>\n<span class=\"hljs-keyword\">const</span> TextBlue = styled.div<span class=\"hljs-string\">`\n  <span class=\"hljs-subst\">${textStyle}</span>\n  color: #0080ff;\n`</span>\n&lt;TextRed&gt;texte en rouge&lt;/TextRed&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlue</span>&gt;</span>texte en bleu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlue</span>&gt;</span></span>\n</code></pre>\n<p><img src=\"/public/images/articles/2017-02-01-introduction-a-styled-components/styled-4.png\" width=\"200\"/></p>\n<h3>Attributs HTML</h3>\n<p>Par d√©faut les composants styled passent toutes leur <code>props</code> au DOM, par exemple\nici, <code>placeholder</code>.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> SuperInput = styled.input<span class=\"hljs-string\">`\n  border: 2px solid silver;\n  border-radius: 2px;\n  text-align: center;\n  font-size: 1.5em;\n`</span>\n\n&lt;SuperInput placeholder=<span class=\"hljs-string\">&quot;Your name&quot;</span>/&gt;\n</code></pre>\n<p><img src=\"/public/images/articles/2017-02-01-introduction-a-styled-components/styled-5.png\" width=\"200\"/></p>\n<h3>Utiliser le theming</h3>\n<p>Pour rendre son UI themable, il suffit d'encapsuler son App dans un composant\n<code>ThemeProvider</code>; Chaque composant styled se verra alors fournir une props\n<code>theme</code> avec toutes les variables du th√®me :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Button = styled.button<span class=\"hljs-string\">`\n  background: <span class=\"hljs-subst\">${props =&gt; props.theme.main || <span class=\"hljs-string\">&#x27;silver&#x27;</span>}</span>;\n`</span>\n\n<span class=\"hljs-comment\">// Create a green theme</span>\n<span class=\"hljs-keyword\">const</span> greenTheme = {\n  <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">&#x27;mediumseagreen&#x27;</span>,\n}\n\n<span class=\"hljs-comment\">// Create a blue theme</span>\n<span class=\"hljs-keyword\">const</span> blueTheme = {\n  <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">&#x27;#0080ff&#x27;</span>,\n}\n\n&lt;ThemeProvider theme={greenTheme}&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>I&#x27;m green!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/ThemeProvider&gt;\n</code></pre>\n<p>Et pour aller loin, consultez la\n<a href=\"https://github.com/styled-components/styled-components/blob/master/docs/theming.md#using-theming\">documentation officielle</a></p>\n<h3>Injecter des CSS globaux</h3>\n<p>Parfois on a besoin d'int√©grer aussi du CSS &quot;global&quot;. Par exemple pour les\nfontes, ou lorsque l'on migre une grosse application.</p>\n<p>Voici une fa√ßon de le faire avec styled :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { injectGlobal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;styled-components&quot;</span>;\n\ninjectGlobal<span class=\"hljs-string\">`\n  @import url(&#x27;https://fonts.googleapis.com/css?family=Roboto&#x27;);\n  * {\n    font-family: &#x27;Roboto&#x27;, sans-serif;\n  }\n`</span>;\n</code></pre>\n<p>Plus d'infos sur\n<a href=\"https://github.com/styled-components/styled-components/blob/master/docs/api.md#injectglobal\">la doc d'injectGlobal</a></p>\n<h3>React Storybook</h3>\n<p>En ajoutant <a href=\"https://github.com/storybooks/react-storybook\">react-storybook</a>\ndans votre projet, vous pourrez facilement vous constituter une biblioth√®que\nvisuelle avec vos propres composants, hors-contexte, dans tous leurs √©tats\npossibles, et avec du Hot-Reload ce qui est <strong>tr√®s tr√®s pratique dans la phase\nde conception</strong>.</p>\n<h3>Autres liens :</h3>\n<ul>\n<li><a href=\"https://github.com/styled-components/styled-components/blob/master/docs\">Documentation officielle</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/\">Enforcing Best Practices In Component-Based Systems</a></li>\n<li><a href=\"http://mxstbr.blog/2016/11/styled-components-magic-explained/\">The magic behind üíÖ styled-components</a></li>\n<li><a href=\"https://github.com/MicheleBertoli/css-in-js\">React CSS-in-JS techniques comparison</a></li>\n</ul>\n"}