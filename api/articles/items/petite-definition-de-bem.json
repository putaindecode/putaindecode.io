{"slug":"petite-definition-de-bem","filename":"2014-05-05-petite-definition-de-bem","title":"Petite définition de BEM","date":"Mon, 05 May 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-05-05T00:00:00.000Z","title":"Petite définition de BEM","author":"kud","oldSlug":"css/bem","slug":"petite-definition-de-bem"},"body":"<p><strong><a href=\"http://bem.info\">BEM</a></strong> n'est ni une marque de voiture ni un groupe de\nmusique, et encore moins une onomatopée (quoique). C'est plutôt une façon de\nnommer les classes en CSS, une convention en d'autres termes voire une\nméthodologie.</p>\n<p>Dans cet article, je ne vous expliquerai pas pourquoi il faut préférer BEM à une\nautre convention, je vous explique surtout comment l'utiliser.</p>\n<p><strong>BEM</strong> apporte une solution à un problème majeur en informatique : le nommage.</p>\n<p>Il n'y a rien de plus compliqué en informatique que de nommer un objet : besoin\nd'être explicite, ne doit pas être trop générique, ni trop compliqué, ni trop\nverbeux (ça, ça reste à voir avec BEM...).</p>\n<p>Lorsque l'on nomme un objet, une méthode, une fonction, une classe, on se doit\nd'être avant tout compréhensible. Une personne devant lire votre code doit\ndirectement comprendre de quoi vous parlez. Cette personne peut très bien être\nvous 6 mois, 1 an après. Je pense sincèrement qu'un code clair vaut toute la\ndocumentation du monde. Je ne dis pas qu'il ne faut pas documenter mais un code\ndoit être facilement compréhensible, la documentation doit juste apporter un\ncontexte, une situation particulière.</p>\n<p>Bref, <strong>BEM</strong> est le sigle pour <em>Block</em>, <em>Element</em>, <em>Modifier</em>. Qu'est-ce que\ncela veut dire.</p>\n<p>Prenons par exemple un site web. Nous avons un ensemble avec dedans deux onglets\net en dessous le contenu de chaque onglet.</p>\n<p>Nous allons définir ce que sont le <em>block</em>, le ou les <em>elements</em> et les\n<em>modifiers</em>.</p>\n<p>Dans ce cas précis, le <em>block</em> est le conteneur, l'ensemble, ce qui entoure le\ntout. Appelons-le &quot;Window&quot;.</p>\n<p>Nous avons alors aussi les <em>elements</em> suivants : les onglets, que nous allons\nnommer &quot;Tab&quot;, et le contenu, là où il y a le texte de chaque onglet &quot;Content&quot;.</p>\n<p>Comment cela se traduit en <strong>BEM</strong> :</p>\n<ul>\n<li>Notre <em>block</em> s'appelant &quot;Window&quot; sera alors <code>.Window</code></li>\n<li>Nos <em>elements</em> &quot;Tab&quot; seront <code>.Window-tab</code></li>\n<li>Notre <em>element</em> &quot;Content&quot; sera <code>.Window-content</code></li>\n</ul>\n<p>Jusque là, cela devrait aller :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Window</span> {\n}\n\n<span class=\"hljs-selector-class\">.Window-tab</span> {\n}\n\n<span class=\"hljs-selector-class\">.Window-content</span> {\n}\n</code></pre>\n<p>Ce qui revient de manère générique à :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Block</span> {\n}\n\n<span class=\"hljs-selector-class\">.Block-element</span> {\n}\n</code></pre>\n<p>Oui, je vous conseille d'indenter votre code afin de grouper vos classes.</p>\n<p>Maintenant, nous allons définir ce qu'est un <em>modifier</em>. Un <em>modifier</em> change\nl'état de l'élément, il peut s'appliquer aussi bien sur un <em>block</em>, qu'un\n<em>element</em>.</p>\n<p>Si par exemple je souhaite mettre en actif un onglet (le mettre en avant car\nséléctionné), je ferai alors <code>.Window-tab--active</code>, soit :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Window</span> {\n}\n\n<span class=\"hljs-selector-class\">.Window-tab</span> {\n  <span class=\"hljs-attribute\">color</span>: gray;\n}\n\n<span class=\"hljs-selector-class\">.Window-tab--active</span> {\n  <span class=\"hljs-attribute\">color</span>: black;\n}\n\n<span class=\"hljs-selector-class\">.Window-content</span> {\n}\n</code></pre>\n<p>J'aimerais aussi afficher ou non le contenu. Pour cela, je vais lui rajouter un\n<em>modifier</em></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Window</span> {\n}\n\n<span class=\"hljs-selector-class\">.Window-tab</span> {\n  <span class=\"hljs-attribute\">color</span>: gray;\n}\n\n<span class=\"hljs-selector-class\">.Window-tab--active</span> {\n  <span class=\"hljs-attribute\">color</span>: black;\n}\n\n<span class=\"hljs-selector-class\">.Window-content</span> {\n}\n\n<span class=\"hljs-selector-class\">.Window-content--hidden</span> {\n  <span class=\"hljs-attribute\">display</span>: none;\n}\n</code></pre>\n<p>J'aurais très bien pu inverser et dire que par défaut le contenu est caché et je\nlui rajoute la classe <code>.Window-tab--active</code> pour l'afficher (<code>display: block</code>)\nmais lorsqu'il s'agit de cacher ou de faire appaître des éléments, je vous\nconseille vivement de plutôt ajouter un <em>modifier</em> qui cache les éléments, car\ncela évite de se prendre la tête sur quel <code>display</code> mettre par défaut. Là, vous\nmettez un <code>display: none</code> et voilà, qu'importe si celui de base est un <code>inline</code>,\n<code>inline-block</code>, <code>table-cell</code> ou autre.</p>\n<p>Du coup, nous avons maintenant nos différents types de classes. Cela se résume\nde manière générique à :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Block</span> {\n}\n\n<span class=\"hljs-selector-class\">.Block--modifier</span> {\n}\n\n<span class=\"hljs-selector-class\">.Block-element</span> {\n}\n\n<span class=\"hljs-selector-class\">.Block-element--modifier</span> {\n}\n</code></pre>\n<p>Ce qui donne <code>.Block-element--modifier</code> (notre <strong>BEM</strong>).</p>\n<p>Parlons maintenant du cas des termes multiples dans chaque partie. Voici comment\ncela se traduit.</p>\n<p><code>.MyBlock-myElement--myModifier</code></p>\n<p>Les <em>blocks</em> sont en &quot;PascalCase&quot; (ou UpperCamelCase), les <em>elements</em> et\n<em>modifiers</em> sont en &quot;camelCase&quot; (ou lowerCamelCase). Nous séparons le <em>block</em> de\nl'élément par &quot;-&quot; et le <em>block</em> ou l' <em>element</em> d'un <em>modifier</em> par &quot;--&quot;.</p>\n<p>Maintenant, vous savez tout sur <strong>BEM</strong>. Sachez qu'il existe tout de même\nplusieurs conventions de <strong>BEM</strong>. Celle que je vous ai apprise là est la norme\nde <strong>montage.js</strong> mais il y en a d'autres par exemple qui n'utilisent pas les\nmajuscules et font ce genre de choses : <code>.my-block__my-element--my-modifier</code>. Il\ns'avère que c'est la\n<a href=\"http://bem.info/method/definitions/#naming-for-independent-css-classes\">convention pseudo-officielle</a>.</p>\n<p>L'inconvénient de ceci est que c'est moins lisible au premier abord qui est\nquoi, et de plus, les <code>_</code> ne permettent pas de sélectionner facilement un terme\nen <em>double-cliquant</em> dessus.</p>\n<p>Deux petites choses avant de partir.</p>\n<p>Dans le but d'éviter de vous faire écraser vos propriétés par quelqu'un d'autre\n(une bibliothèque, un <em>SDK</em>), je vous conseille de rajouter votre organisation.</p>\n<p>Typiquement, ça donne <code>.org-Block-element--modifier</code>. Tout en minuscule et si\npossible ne pas dépasser les 3 lettres car vous allez devoir le répéter à chaque\nfois et ça peut être lourd.</p>\n<p>La deuxième chose est la classe qui sert de sélecteur en JavaScript. Plutôt que\n<em>binder</em> un élément via sa classe &quot;CSS&quot; (à chaque classe sa responsabilité), il\nest nettement préférable de créer une classe spécifique au JavaScript. Cela\ndonne : <code>.org-js-Block-element--modifier</code>. Il suffit simplement de rajouter\n<code>-js</code> entre l'organisation et le <em>block</em>.</p>\n<p>Nous arrivons à la convention suivante : <code>.org[-js]-Block[-element][--modifier]</code></p>\n<p>Certains vous diront qu'ils mettent <code>.js-org-</code> mais étant donné que je considère\ncela comme un <em>namespace</em> global (autant css que js), je préfère mettre l' <code>org</code>\nau début.</p>\n<p>Voilà, voilà, c'est certes un peu déroutant au début, et ca parait très verbeux\nmais cela vous permettra d'éviter de nooooooombreux soucis de nommage de classes\noù vous vous emmèlerez les pinceaux à coup de :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.footer</span> {\n  <span class=\"hljs-attribute\">text-decoration</span>: underline;\n}\n\n<span class=\"hljs-selector-class\">.content</span> <span class=\"hljs-selector-class\">.footer</span> {\n  <span class=\"hljs-attribute\">color</span>: black;\n  <span class=\"hljs-attribute\">text-decoration</span>: none; <span class=\"hljs-comment\">/* annule la propriété du précédent sélecteur */</span>\n}\n</code></pre>\n<p>Ciao les kids.</p>\n<p>Quelques ressources pour la route :</p>\n<ul>\n<li><a href=\"http://blog.kaelig.fr/post/48196348743/fifty-shades-of-bem\">50 nuances de BEM</a></li>\n<li><a href=\"https://github.com/sturobson/BEM-resources\">BEM Resources</a></li>\n</ul>\n"}