{"slug":"semver-c-est-quoi","filename":"2015-06-16-semver-c-est-quoi","title":"SemVer, c'est quoi ?","date":"Tue, 16 Jun 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-06-16T00:00:00.000Z","title":"SemVer, c'est quoi ?","author":"kud","oldSlug":"semver","slug":"semver-c-est-quoi"},"body":"<p><em>Ce post a été largement inspiré de la mauvaise expérience que j'ai pu avoir\navec l'évolution de <a href=\"http://backbonejs.org/\">Backbone.js</a> qui, ne respectant pas\nSemVer, m'a posé des problèmes lors de mise à jour de versions. Les node_modules\n(dépendances de dépendances) sont aussi en question.</em></p>\n<p>Depuis quelques temps, vous devez entendre le terme <strong>SemVer</strong> par-ci par-là\nmais peut-être que vous ne savez pas ce que c'est ou que vous ne savez pas\ncomment l'appliquer. Et je vous comprends, j'ai mis un peu de temps à maitriser\nle sujet.</p>\n<p>Pour faire simple, <strong>SemVer</strong> (voulant dire <em>Semantic Versioning</em>) est une\ngestion sémantique des versions. En d'autres termes, une façon de numéroter les\nversions de manière logique, cohérente, parlante, ayant du sens. Ce n'est\ncependant pas forcément une norme, vous n'êtes pas obligé(e) de la respecter\nmais ce serait vraiment, vraiment dommage car il tend justement à l'être.</p>\n<p>Mais tout d'abord, posons les bases, qu'est-ce qu'une version ?</p>\n<p>Une version s'applique à un produit, une application, une bibliothèque, un OS,\ntout ce qui a une progression en informatique. Cela permet de définir\nl'avancement du produit. La majorité du temps (sauf pour quelques hérétiques),\ncela s'écrit de cette façon : <code>X.Y.Z</code> où <code>X</code>, <code>Y</code> et <code>Z</code> sont des entiers (pas\nforcément des chiffres d'ailleurs, cela peut être supérieur à 9) soit <code>1.0.10</code>\npar exemple. Il est possible que vous voyiez cette forme <code>vX.Y.Z</code> comme\n<code>v1.0.10</code> mais en toute franchise, je ne l'apprécie pas. J'aime que mon tag\néquivaille à ma version en elle-même. Purement personnel.</p>\n<p>Maintenant que nous savons ce qu'est une version, voyons voir ce qu'est\nréellement <strong>SemVer</strong>.</p>\n<p><strong>SemVer</strong> est un moyen cohérent, pertinent de nommer ses versions afin de\nsavoir rapidement quelles modifications ont été apportées à votre projet.</p>\n<p>Voyons voir ce que dit la documentation officielle de\n<a href=\"http://semver.org/lang/fr/\">SemVer</a></p>\n<blockquote>\n<p>Étant donné un numéro de version MAJEUR.MINEUR.CORRECTIF, il faut incrémenter\n:</p>\n</blockquote>\n<blockquote>\n<p>le numéro de version MAJEUR quand il y a des changements\nrétro-incompatibles,<br> le numéro de version MINEUR quand il y a des\nchangements rétro-compatibles,<br> le numéro de version de CORRECTIF quand il\ny a des corrections d’anomalies rétro-compatibles</p>\n</blockquote>\n<blockquote>\n<p>Des libellés supplémentaires peuvent être ajoutés pour les versions de\npré-livraison et pour des méta-données de construction sous forme d'extension\ndu format MAJEURE.MINEURE.CORRECTIF.</p>\n</blockquote>\n<p>On comprend effectivement l'idée de <strong>SemVer</strong> (et la suite du site explique\ncomment l'appliquer) mais je trouve que l'on peut mieux expliquer.</p>\n<p>Pour comprendre <strong>SemVer</strong>, il faut se mettre dans la peau de l'utilisateur qui\nva se servir de votre production.</p>\n<p>En effet, <strong>SemVer</strong> est un contrat que vous signez avec vos utilisateurs, une\nforme de respect qui leur permet d'adapter leur code ou non en fonction des\nversions que vous proposez.</p>\n<p>Si je devais définir à quelqu'un ce qu'est <strong>SemVer</strong>, je lui dirais ceci :</p>\n<blockquote>\n<p>SemVer s'écrit de cette façon : <code>X.Y.Z</code> où <code>X</code> est &quot;majeur&quot;, <code>Y</code> est &quot;mineur&quot;,\n<code>Z</code> est &quot;patch&quot;.</p>\n</blockquote>\n<blockquote>\n<p>Qu'est-ce que cela veut dire. Cela veut dire que si vous avez corrigé un bug\ndans votre lib et que cela n'affecte en rien le code écrit par votre\nutilisateur, alors incrémentez <code>Z</code> (+0.0.1).</p>\n</blockquote>\n<blockquote>\n<p>Si vous avez fait des ajouts dans votre app qui peuvent être intéressants pour\nl'utilisateur et mérite une certaine attention afin d'améliorer le code qui\nutilise votre lib, alors incrémentez <code>Y</code> (+0.1.0).</p>\n</blockquote>\n<blockquote>\n<p>Si en revanche, vous avez cassé ne serait-ce qu'une partie de l'API (&quot;breaking\nchanges&quot;), que vous avez <em>juste</em> changé des noms de méthodes / fonctions déjà\nexistantes (et donc sûrement utilisées par quelqu'un d'autre), que finalement\ncela nécessite <strong>forcément</strong> une modification de la part de l'utilisateur sous\npeine que sa propre app ne fonctionne plus, alors incrémentez <code>X</code> (+1.0.0).</p>\n</blockquote>\n<p>C'est vraiment une question de respect envers qui vous proposez votre lib. Par\n<strong>SemVer</strong>, je vous informe des potentielles modifications ou lectures de\ndocumentation que vous devez faire. Il ne faut vraiment pas voir ça comme une\névolution de votre propre code.</p>\n<p>Par exemple, vous avez refactorisé tout votre code mais l'API n'a pas changé.\nAlors <code>Z</code> suffit. Et si vous avez ajoutez des méthodes, c'est plutôt <code>Y</code>.\nPourtant il y a eu une quantité phénoménale de code modifié. Des lignes et des\nlignes. Est-ce pour autant que vous devez incrémentez <code>X</code> ? Non. Surtout lorsque\nles tests automatisés n'ont pas été modifiés et passent toujours.</p>\n<p>En revanche, vous ne faites qu'une petite modification de nom de méthode qui ne\nvous semble pas appropriée, ça ne vous prend qu'une ligne de modification, vous\npourriez croire que c'est uniquement <code>Z</code> à changer ? Non plus. Là, vous modifiez\nle contrat que l'utilisateur a acquiescé en utilisant votre lib ; vous avez\nalors la responsabilité de lui indiquer que son code doit absolument changer\nsinon celui-ci ne marchera plus correctement.</p>\n<p>En bref, ne voyez pas l'évolution de votre projet avec <strong>SemVer</strong> mais le\ncontrat que vous signez implicitement avec vos utilisateurs.</p>\n<p>Oh et oui, surtout, surtout, ce n'est pas parce que vous êtes arrivé(e) à <code>9</code>\ndans <code>Y</code> ou <code>Z</code> que le nombre le précédant doit augmenter. Par exemple <em>mineur</em>\nsur <code>1.9.0</code> ? Alors <code>1.10.0</code> et non <code>2.0.0</code>.</p>\n<p>J'espère qu'avec ceci, vous vous sentirez plus à l'aise.</p>\n<h2>Tips npm</h2>\n<p>Avec npm, il est possible de mettre à jour rapidement son <code>package.json</code> et tag\ngit en utilisant la commande <code>$ npm version</code>. Comme ceci :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm version (major|minor|patch)</span>\n</code></pre>\n<p>Cela vous incrémentera le <code>package.json</code> et vous fera un beau commit + tag dans\ngit tel que :</p>\n<pre><code class=\"hljs language-console\">* b474d9c (HEAD -&gt; master, tag: 1.5.3, origin/master) 1.5.3`.\n</code></pre>\n<p>Et pour éviter d'avoir le &quot;v&quot; dans les tags git qui est par défaut dans npm,\nfaites :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm config <span class=\"hljs-built_in\">set</span> tag-version-prefix <span class=\"hljs-string\">&quot;&quot;</span></span>\n</code></pre>\n<h2>Changelog</h2>\n<p><strong>SemVer</strong> va de pair avec les <a href=\"http://keepachangelog.com/\">changelog</a>. Mettre à\njour le changelog vous permet d'indiquer très rapidement ce qui a été modifié\nsans que l'utilisateur ait forcément à regarder votre code. Il est surtout très\nimportant lors d'ajouts de fonctionnalités ou de modifications (majeures et\nmineures) afin de voir directement les méthodes / fonctions affectées mais aussi\ndans le cas d'un patch de voir le gain obtenu de cette nouvelle mise à jour. À\najouter directement dans le <code>README.md</code> à la fin ou carrément dans un fichier ou\ndes fichiers dédiés à ça. Voici un\n<a href=\"https://github.com/cssnext/cssnext/blob/master/CHANGELOG.md\">exemple</a>.</p>\n<hr />\n<p>Stay safe, use <strong>SemVer</strong>.</p>\n<p>Ressources :</p>\n<ul>\n<li><a href=\"http://semver.org/\">site officiel</a></li>\n<li><a href=\"http://semver-ftw.org/\">semver-ftw</a></li>\n</ul>\n"}