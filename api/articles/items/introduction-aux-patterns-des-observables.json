{"slug":"introduction-aux-patterns-des-observables","filename":"2017-10-23-introduction-aux-patterns-des-observables","title":"Introduction aux patterns des observables","date":"Mon, 23 Oct 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-10-23T00:00:00.000Z","title":"Introduction aux patterns des observables","author":"wyeo","oldSlug":"js/observable","slug":"introduction-aux-patterns-des-observables"},"body":"<p>En JavaScript, nous pouvons exécuter du code de manière synchrone (bloquant) ou\nasynchrone (non bloquant).</p>\n<p>Prenons une fonction <code>logValue</code>, qui prend une valeur et l'affiche dans la\nconsole :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logValue</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value);\n}\n</code></pre>\n<p>Nous allons passer <code>logValue</code> comme callback à la méthode\n<code>Array.prototype.forEach</code>, qui va l'exécuter de manière <strong>synchrone</strong> :</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">const</span> arrayOfValues = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\narrayOfValues.forEach(logValue)\n<span class=\"hljs-comment\">// Log 1, 2, 3, 4 puis 5</span>\n</code></pre>\n<p>On peut également passer <code>logValue</code> comme callback de <code>setTimeout</code>, qui va\nl'exécuter de manière <strong>asynchrone</strong> :</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-built_in\">setTimeout</span>(logValue, <span class=\"hljs-number\">3000</span>, <span class=\"hljs-string\">&quot;Hello world!&quot;</span>)\nlogValue(<span class=\"hljs-string\">&quot;How are you?&quot;</span>)\n<span class=\"hljs-comment\">// Log &quot;How are you?&quot;</span>\n<span class=\"hljs-comment\">// Log &quot;Hello world!&quot; 3 secondes plus tard</span>\n</code></pre>\n<p>Une fonction est agnostique: elle peut être appelée de manière synchrone ou\nasynchrone, c'est la façon dont elle est exécutée qui définira le &quot;mode&quot;.</p>\n<p>Un cas où il est utile d'utiliser des APIs asynchrones avec Node.js: les accès\nau <em>file-system</em>. Si vous lisez un gros fichier en mode synchrone, il va bloquer\nl'exécution de votre programme tant qu'il n'a pas fini, mieux vaut attendre\nqu'il vous l'envoie quand il est prêt.</p>\n<p>Node.js propose l'API suivante: <code>fs.readFile(fileToRead, options, callback)</code></p>\n<pre><code class=\"hljs language-JavaScript\">fs.readFile(<span class=\"hljs-string\">&quot;./alphabet.txt&quot;</span>, {<span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">&quot;utf-8&quot;</span>}, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (err) {\n    onError(err)\n  } <span class=\"hljs-keyword\">else</span> {\n    onData(data)\n  }\n})\n</code></pre>\n<p>Cet exemple montre une API utilisant un simple callback qui est exécuté lorsque\n<code>readFile</code> a lu le fichier ou échoué à le faire.</p>\n<p>Un autre cas où utiliser des APIs asynchrones est particulièrement important :\nles appels réseaux. On ne peut pas se permettre de <em>freeze</em> toute notre\ninterface pendant que la requête réseau tourne.</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logValue</span>(<span class=\"hljs-params\">value</span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(value) }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logError</span>(<span class=\"hljs-params\">err</span>) </span>{ <span class=\"hljs-built_in\">console</span>.error(err) }\n\nfetch(<span class=\"hljs-string\">&quot;https://api.github.com/users/wyeo&quot;</span>)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n  .then(logValue) <span class=\"hljs-comment\">// Log le payload JSON lorsque la requête est terminée</span>\n  .catch(logError) <span class=\"hljs-comment\">// Lance une erreur dans la console si quelque chose s&#x27;est mal passé</span>\n</code></pre>\n<p>Dans cet exemple, l'API renvoie une <code>Promise</code>:\n<a href=\"/fr/articles/js/es2015/promises/\">une structure représentant une valeur potentielle</a>.\nLorsque sa valeur est disponible, la promesse est <em>remplie</em>, et exécutera les\ncallbacks qu'on lui a passé dans <code>.then</code>, si elle constate une erreur, elle\nexécutera les callbacks qu'on lui a passé dans <code>.catch</code>.</p>\n<p>Les <code>Promise</code> ne permettent cependant pas de traiter de la donnée au fur et à\nmesure de son arrivée: elle est remplie une seule fois.</p>\n<p>C'est là que les <code>Observable</code> arrivent à la rescousse.</p>\n<p>Un <code>Observable</code> est un objet implémentant une méthode <code>.subscribe</code> qui prend\ncomme paramètre un <code>Observer</code>. Ce dernier a cette forme :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> observer = {\n  <span class=\"hljs-attr\">next</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(val), <span class=\"hljs-comment\">// une fonction à exécuter à chaque nouvel évenement</span>\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(err), <span class=\"hljs-comment\">// une fonction à exécuter en cas d&#x27;erreur</span>\n  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">&quot;Complete!&quot;</span>) <span class=\"hljs-comment\">// une fonction à exécuter lorsque l&#x27;observable a fini</span>\n};\n</code></pre>\n<p>Implémentons naïvement un <code>Observable</code> qui va réagir lorsqu'un user va taper sur\nson clavier et se considérer terminé une fois <code>Enter</code> pressé:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> KeyboardObservable = {\n  <span class=\"hljs-attr\">subscribe</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">observer</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> handleKeyUp = <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> event.keyCode === <span class=\"hljs-string\">&quot;number&quot;</span>) {\n        <span class=\"hljs-keyword\">if</span> (event.keyCode === <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* Enter */</span>) {\n          <span class=\"hljs-built_in\">document</span>.removeEventListener(<span class=\"hljs-string\">&quot;keyup&quot;</span>, handleKeyUp);\n          observer.complete();\n        } <span class=\"hljs-keyword\">else</span> {\n          observer.next(event.keyCode);\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        observer.error(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;No keyCode found&quot;</span>));\n      }\n    };\n    <span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&quot;keyup&quot;</span>, handleKeyUp);\n    <span class=\"hljs-comment\">// subscribe retourne la &quot;soucription&quot;, contenant une fonction pour la stopper</span>\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">unsubscribe</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">document</span>.removeEventListener(<span class=\"hljs-string\">&quot;keyup&quot;</span>, handleKeyUp)\n    };\n  }\n};\n\n<span class=\"hljs-keyword\">let</span> keys = [];\nKeyboardObservable.subscribe({\n  <span class=\"hljs-attr\">next</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">keyCode</span> =&gt;</span> keys.push(<span class=\"hljs-built_in\">String</span>.fromCharCode(keyCode)),\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(error),\n  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-function\">() =&gt;</span> alert(keys.join(<span class=\"hljs-string\">&quot;&quot;</span>))\n});\n</code></pre>\n<p>Un <code>Observable</code> fonctionne à la fois pour du code synchrone et asynchrone, et il\ns'agit d'un pattern qui peut s'appliquer à des cas où <code>Promise</code> manque de\ngranularité, puisqu'il permet de traiter la donnée au fur et à mesure de son\narrivée. <em>In fine</em>, un observable est un <em>event emitter</em> avec un concept de\ncompletion.</p>\n<p>Il existe d'ailleurs un\n<a href=\"https://tc39.github.io/proposal-observable/\"><em>proposal</em> en stage 1</a> pour en\nfaire une API de la specification de JavaScript. On peut très bien imaginer que\nles observables deviennent une interface très répandue dans un futur proche.</p>\n<p>Dans les prochains articles, nous verrons pourquoi et comment combiner des\nobservables ainsi que les cas d'usage au sein d'une application React.</p>\n"}