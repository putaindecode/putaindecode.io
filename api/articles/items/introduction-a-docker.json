{"slug":"introduction-a-docker","filename":"2015-06-11-introduction-a-docker","title":"Introduction à Docker","date":"Thu, 11 Jun 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-06-11T00:00:00.000Z","title":"Introduction à Docker","author":"Uhsac","oldSlug":"docker","slug":"introduction-a-docker"},"body":"<p>Avant de vous parler de Docker je vais vous raconter une histoire que tout\ndéveloppeur a vécu au moins une fois.</p>\n<p>Il était une fois un jeune développeur qui codait tranquillement sur son\nordinateur. Il était pressé car comme tout étudiant qui se respecte il devait\nprésenter son travail le lendemain matin. Après des heures de travail,\nl'application était là, et elle fonctionnait à merveille ! Le lendemain, notre\ncodeur arriva tout fier pour sa présentation, avec son projet sur une clé usb.\nIl le transfère sur l'ordinateur de son pote et là, ça ne fonctionne pas !</p>\n<h2>Quel est le problème ?</h2>\n<p>L'application de notre jeune développeur ne fonctionne pas sur l'ordinateur de\nson ami à cause d'un problème d'environnement. Entre deux systèmes, il peut y\navoir des différences de version sur les dépendances ou encore des bibliothèques\nmanquantes.</p>\n<p>Ici, notre problème se limite à 2 systèmes, mais imaginez une équipe de 10\npersonnes avec des ordinateurs sous OS X, Linux ou même Windows, un serveur de\ntest sous Ubuntu 12.04, et un serveur de production sous CentOS 7. S'assurer que\nleur application fonctionne bien sur tous ces environnements peut s'avérer être\nun vrai cauchemar !</p>\n<p>Mais il existe des solutions et parmi l'une d'entre elles nous avons...</p>\n<h2>Docker</h2>\n<h3>C'est quoi Docker ?</h3>\n<p>Docker est une plateforme qui va vous permettre d'exécuter votre code à\nl'intérieur d'un conteneur indépendamment de la machine sur laquelle vous êtes !\nUn conteneur ressemble à une machine virtuelle sauf qu'il n'embarque pas tout un\nsystème d'exploitation avec lui ce qui lui permet de s'exécuter en quelque\nsecondes et d'être beaucoup plus léger.</p>\n<p>Docker peut donc résoudre notre problème d'environnement, car quelle que soit la\nmachine que nous utiliserons, le code s'exécutera de la même manière.</p>\n<p>La plateforme Docker est composée de deux éléments :</p>\n<ul>\n<li>Le démon Docker qui s'exécute en arrière-plan et qui s'occupe de gérer vos\nconteneurs</li>\n<li>Le client Docker qui vous permet d'interagir avec le démon par l'intermédiaire\nd'un outil en ligne de commande</li>\n</ul>\n<p>Si vous voulez plus d'informations sur le fonctionnement interne de Docker je\nvous redirige vers l'article du site officiel :\n<a href=\"https://docs.docker.com/engine/understanding-docker/\">Understanding Docker</a></p>\n<h3>Comment l'installer ?</h3>\n<p>Le client Docker fonctionne sur tous les systèmes d'exploitation. En revanche,\nle démon Docker utilise des fonctionnalités du noyau Linux afin de gérer les\nconteneurs. Il ne fonctionne donc que sur Linux. Heureusement la majorité des\nserveurs utilise Linux, et pour vos ordinateurs sous OS X, ou même Windows, il\nexiste une solution.</p>\n<p>Si vous utilisez une machine avec une distribution Linux vous pourrez lancer le\ndémon Docker directement sur cette dernière, par contre avec Windows ou OS X\nvous devrez lancer le démon dans une machine virtuelle, mais rassurez-vous,\nc'est très simple !</p>\n<p>Pour le guide d'installation de Docker en fonction de votre système je vous\nredirige de nouveau vers le site officiel :\n<a href=\"https://docs.docker.com/installation/#installation\">Guide d'installation</a></p>\n<h3>Un premier exemple</h3>\n<p>Avant de commencer, vous allez devoir télécharger une image Docker qui servira\nde base à vos prochains conteneurs.</p>\n<p>Pour cet exemple, on va partir d'une image Ubuntu :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker pull ubuntu:trusty</span>\ntrusty: Pulling from ubuntu\ne9e06b06e14c: Pull complete\na82efea989f9: Pull complete\n37bea4ee0c81: Pull complete\n07f8e8c5e660: Already exists\nubuntu:trusty: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.\nDigest: sha256:014fa1d5b72b4fe0ec2b4642610fbbfdd52f502da8e14e80de07bd1dd774e4ef\nStatus: Downloaded newer image for ubuntu:trusty\n</code></pre>\n<p>Cette commande va télécharger depuis le Docker Hub l'image de la version 14.04\n(trusty) d'Ubuntu. Il existe bien d'autres images que vous pourrez trouver\n<a href=\"https://registry.hub.docker.com\">sur le registry Docker</a>.</p>\n<p>Pour voir les images que vous avez téléchargées, utilisez cette commande :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker images</span>\nREPOSITORY    TAG       IMAGE ID        CREATED       VIRTUAL SIZE\nubuntu        trusty    07f8e8c5e660    4 weeks ago   188.3 MB\n</code></pre>\n<p>Sur ma machine, l'image d'Ubuntu fais 188.3 MB, je vous avais dit que c'était\nléger en comparaison à une machine virtuelle !</p>\n<p>Maintenant, nous allons lancer un conteneur et rentrer à l'intérieur :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker run -it ubuntu:trusty bash</span>\nroot@2cdceb5ff771:/#\n</code></pre>\n<p>Cette commande crée un conteneur à partir de l'image <code>ubuntu:trusty</code>, y lance le\nprogramme <code>bash</code> et y attache votre shell grâce aux options <code>-it</code></p>\n<p>Vous pouvez maintenant exécuter les commandes que vous voulez, elle\ns'exécuteront à l'intérieur du conteneur, par exemple :</p>\n<pre><code class=\"hljs language-console\">root@2cdceb5ff771:/#\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> apt-get moo</span>\n                 (__)\n                 (oo)\n           /------\\/\n          / |    ||\n         *  /\\---/\\\n            ~~   ~~\n...&quot;Have you mooed today?&quot;...\n</code></pre>\n<p>Vous pouvez quitter le conteneur en faisant un <code>Ctrl-d</code></p>\n<p>Maintenant que vous êtes retourné sur votre machine, vous pouvez afficher la\nliste des conteneurs lancés avec cette commande :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker ps</span>\nCONTAINER ID    IMAGE   COMMAND   CREATED   STATUS    PORTS   NAMES\n</code></pre>\n<p>Il n'y a rien ? C'est normal ! En quittant le conteneur ce dernier s'est arrêté\naussi. Pour l'afficher quand même, il suffit d'entrer cette commande :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker ps -a</span>\nCONTAINER ID    IMAGE           COMMAND   CREATED         STATUS                    PORTS   NAMES\n2cdceb5ff771    ubuntu:trusty   &quot;bash&quot;    12 minutes ago  Exited (0) 2 minutes ago          loving_newton\n</code></pre>\n<p>Et pour supprimer ce conteneur ?</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker rm 2cdc</span>\n2cdc\n</code></pre>\n<p>Évidemment, remplacez '2cdc' par le <code>CONTAINER ID</code> approprié.</p>\n<p>Passons maintenant à un deuxième exemple plus concret avec une application web.</p>\n<h2>Un deuxième exemple avec Node.js</h2>\n<p>Pour commencer, vous allez récupérer l'image docker officiel de Node.js en\nfaisant :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker pull node:0.12.4</span>\n0.12.4: Pulling from node\n7711db4bb553: Pull complete\nd1744e6e9471: Pull complete\n9332645b03a3: Pull complete\na52a290821b3: Pull complete\n3575f1347ce7: Already exists\n39bb80489af7: Already exists\ndf2a0347c9d0: Already exists\n7a3871ba15f8: Already exists\na2703ed272d7: Already exists\nc9e3effdd23a: Already exists\nnode:0.12.4: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.\nDigest: sha256:81fb0812dd5e81f768773a121c8a6daced36893210c5ed50b504c4abcb04e10c\nStatus: Downloaded newer image for node:0.12.4\n</code></pre>\n<p>Puis créez un fichier <code>server.js</code> avec le contenu suivant :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;http&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> server = http.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{\n  res.end(<span class=\"hljs-string\">&quot;Coucou depuis Docker&quot;</span>);\n});\n\nserver.listen(<span class=\"hljs-number\">3000</span>);\n</code></pre>\n<p>Et maintenant, pour lancer notre application à l'intérieur d'un conteneur, vous\ndevez faire :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> docker run -d --name node-app -p 3000:3000 -v $(<span class=\"hljs-built_in\">pwd</span>):/app node:0.12.4 node /app/server.js</span>\ne9ca3cd8f90b8554ca99ec8ba15a039f827005bd8fecbf80d72ce7267006a6df\n</code></pre>\n<p>Si vous vous rendez sur <code>localhost:3000</code> (ou l'IP de la VM si êtes sur Windows\nou Mac), vous verrez : 'Coucou depuis Docker'</p>\n<p>C'est beau, mais comment ça marche ? Examinons les options une par une :</p>\n<ul>\n<li><code>-d</code> : cette option permet de lancer le conteneur en mode démon et donc de\ntourner en tâche de fond à la différence de <code>-it</code> qui lançait le conteneur au\npremier plan et nous donnait un accès direct au conteneur.</li>\n<li><code>--name node-app</code> : cette option permet simplement de nommer notre conteneur,\nce qui peut servir pour l'arrêter et le relancer plus simplement (et à\nd'autres choses plus complexes dont je parlerai dans un prochain article).</li>\n<li><code>-p 3000:3000</code> : cette option permet de partager le port de votre machine avec\nle port du conteneur. Le premier nombre est le port de votre machine et le\ndeuxième le port dans le conteneur.</li>\n<li><code>-v $(pwd):/app</code> : cette option permet de partager un dossier avec votre\nconteneur, ici, nous partageons le dossier courant (où se trouve notre fichier\n<code>server.js</code>) avec le dossier <code>/app</code> dans le conteneur (attention si vous êtes\nsur Mac ou Windows uniquement votre 'home' est partagé).</li>\n<li><code>node:0.12.4</code> : l'image Docker que vous voulez utiliser.</li>\n<li><code>node /app/server.js</code> : la commande à exécuter dans le conteneur.</li>\n</ul>\n<p>Et maintenant ? Vous pouvez afficher le conteneur en faisant : <code>docker ps</code>,\nl'arrêter avec : <code>docker stop node-app</code> et le supprimer avec\n<code>docker rm node-app</code>.</p>\n<hr />\n<p>Dans cet article, nous avons vu comment récupérer des images Docker depuis le\nDocker Hub et comment les instancier afin de créer des conteneurs. Mais pour\naller plus loin, ce serait bien si nous pouvions créer nos propres images, c'est\nce que nous apprendrons à faire à l'aide des Dockerfile dans le prochain\narticle.</p>\n"}