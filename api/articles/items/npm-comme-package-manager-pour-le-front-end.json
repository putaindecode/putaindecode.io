{"slug":"npm-comme-package-manager-pour-le-front-end","filename":"2014-05-06-npm-comme-package-manager-pour-le-front-end","title":"NPM comme package manager pour le front-end","date":"Tue, 06 May 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-05-06T00:00:00.000Z","title":"NPM comme package manager pour le front-end","author":"kewah","oldSlug":"npm/frontend","slug":"npm-comme-package-manager-pour-le-front-end"},"body":"<p>NPM, le package manager de Node.js, a grandement participé au succès de ce\ndernier. Il facilite la création, le partage et l'installation de modules. Il\npermet aux développeurs de suivre la\n<a href=\"http://www.faqs.org/docs/artu/ch01s06.html\">philosophie Unix</a> où chaque module\nfait une seule tâche (évite la complexité, facilite la réutilisation et les\ntests).</p>\n<p>Cependant NPM ne se limite pas aux modules JavaScript. Il est en effet possible\nde publier tout type de fichier et c'est là que ça devient intéressant pour nos\nmodules front-end, qui peuvent aussi être CSS, HTML, fonts, etc.</p>\n<h2>Module JavaScript</h2>\n<p>Si vous n'êtes pas familier(e) avec la création d'un module JavaScript, je vous\nconseille d'exécuter la commande <code>npm init</code> qui va vous aider à générer votre\n<code>package.json</code> (fichier de configuration utilisé par NPM). Le champ\n&quot;<a href=\"https://www.npmjs.org/doc/json.html#main\">main</a>&quot; définit le point d'entrée de\nvotre module.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;putaindemodule&quot;</span>,\n  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.0.1&quot;</span>,\n  <span class=\"hljs-attr\">&quot;main&quot;</span>: <span class=\"hljs-string\">&quot;index.js&quot;</span>\n}\n</code></pre>\n<p>Dans un article précédent, il vous a été présenté le développement d'une\napplication autour de\n<a href=\"/fr/articles/js/browserify/\">modules JavaScript avec Browserify</a>.</p>\n<h2>Module pour tout type de fichier</h2>\n<p>C'est grâce au champ &quot;<a href=\"https://www.npmjs.org/doc/json.html#files\">files</a>&quot; que\nl'on peut définir la liste des fichiers que l'on va publier (autre que les\nfichiers JavaScript). Voici un exemple de <code>package.json</code> d'un module pour un\nsystème de grille CSS.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;putaindegrid&quot;</span>,\n  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.0.1&quot;</span>,\n  <span class=\"hljs-attr\">&quot;files&quot;</span>: [<span class=\"hljs-string\">&quot;grid.css&quot;</span>]\n}\n</code></pre>\n<p>Il ne reste de plus qu'à le <a href=\"https://gist.github.com/coolaj86/1318304\">publier</a>\net à l'installer (<code>npm install putaindegrid --save</code>) dans vos différents projets\noù vous en aurez besoin. Votre fichier <code>grid.css</code> est accessible dans le dossier\n<code>node_modules/putaindegrid/grid.css</code>, vous pouvez donc l'inclure dans votre page\nHTML. (Ou l'<code>@import</code>er dans votre fichier Sass/Less principal.)</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>\n  <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;node_modules/putaindegrid/grid.css&quot;</span>\n  <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span>\n  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>\n/&gt;</span>\n</code></pre>\n<h2>Pourquoi NPM plutôt qu'un autre package manager ?</h2>\n<ul>\n<li>Il a déjà fait ses preuves comme package manager pour Node.js.</li>\n<li>Pas besoin d'installer un nouvel outil, NPM étant installé avec Node.js, ce\nqui évite un lot de bugs et de fichiers de configuration supplémentaires (un\nsimple <code>package.json</code> suffit).</li>\n<li>Et surtout, toutes les dépendances de votre projet peuvent être gérées via\nNPM: votre tasks runner et ses plugins (<a href=\"/fr/articles/js/gulp/\">Gulp</a>,\n<a href=\"/fr/articles/js/grunt/\">Grunt</a> &amp; co), vos\n<a href=\"/fr/articles/js/browserify/\">modules JavaScript</a>, vos\n<a href=\"/fr/articles/js/tests/frontend/\">tests</a> et comme on vient de le voir, vos\nfichiers de style.</li>\n</ul>\n<p>Dans le cas où vous n'auriez pas envie de passer par l'étape de publication\n(<code>npm publish</code>) pour diverses raisons, sachez qu'il est possible\nd'<a href=\"https://www.npmjs.org/doc/cli/npm-install.html\">installer</a> des packages qui\nne sont pas publiés. Mon alternative favorite étant l'utilisation du namespace\nGithub <code>npm install user/repo --save</code>. Cependant, même si vous ne publiez pas\nvotre module, lorsque vous en modifiez le code n'oubliez jamais de mettre à jour\nsa version suivant la convention <a href=\"http://semver.org/\">semver</a>. Sinon vous serez\nsusceptible d'inclure des bugs dans les projets qui l'utilisent. Ce qui implique\n:</p>\n<ul>\n<li>Mettre à jour le champ &quot;version&quot; de votre <code>package.json</code> (vous pouvez vous\naider des commandes <code>npm version patch</code>, <code>npm version minor</code> et\n<code>npm version major</code>).</li>\n<li>Ajouter un tag git (<code>git tag -a 0.1.0 -m &quot;Initial release&quot;</code>).</li>\n</ul>\n<p>NPM est une excellente solution pour gérer les dépendences de votre projet,\naussi bien pour vos outils de build, que pour vos assets front-end. Je pense\nqu'il est important de garder les choses simples, en commençant par utiliser un\nseul gestionnaire de dépendances, dans le cas où celui-ci n'intègre pas d'autres\nfonctionnalités que le téléchargement de modules.</p>\n<p>Bye bye Bower!</p>\n<p>PS: vous avez besoin d'un module qui n'a pas de package.json ? Pas de problème,\n<a href=\"/fr/articles/npm/napa/\">napa est là pour ça</a></p>\n"}