{"slug":"injection-de-dependances-en-php","filename":"2014-11-05-injection-de-dependances-en-php","title":"L'injection de dépendances en PHP","date":"Wed, 05 Nov 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-11-05T00:00:00.000Z","title":"L'injection de dépendances en PHP","author":"neemzy","oldSlug":"php/injection-dependances","slug":"injection-de-dependances-en-php"},"body":"<p>Salutations ! Aujourd'hui, je suis venu te parler de PHP (sisi), et notamment du\nmécanisme d'injection de dépendances avec lequel tu n'es peut-être pas familier.\nAu menu, des objets, des usines et des conteneurs, alors enfile ton bonnet et\ntes gants, on va bouger du bordel !</p>\n<h2>L'injection de dépendances ? C'est quoi ce truc ?</h2>\n<p>Si tu fais de la programmation orientée objet, il est fort probable que ce terme\nne te soit pas totalement inconnu. En PHP, on a principalement commencé à nous\nen rebattre les oreilles avec l'avènement de Symfony, qui est aujourd'hui le\nframework web majeur pour ce langage. Fabien Potencier, créateur et <em>lead\ndeveloper</em> de Symfony, cite en exemple sur\n<a href=\"http://fabien.potencier.org/article/11/what-is-dependency-injection\">son blog</a>\ncette définition :</p>\n<blockquote>\n<p><em>Dependency Injection is where components are given their dependencies through\ntheir constructors, methods, or directly into fields.</em></p>\n<p>Quelqu'un</p>\n</blockquote>\n<p>C'est clair, non ? Non ? Bon. Imaginons un bout d'appli PHP, où l'on désire\ngérer des personnes qui ont chacune une adresse postale. Si tu n'as pas trop\ndormi à la fac le vendredi matin après ta cuite du jeudi soir, tu devrais\npouvoir déterminer tout seul qu'on va avoir besoin d'une classe <code>Person</code> et\nd'une classe <code>Address</code> :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Address</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$number</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$street</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$zipcode</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$city</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-variable\">$zipcode</span>, <span class=\"hljs-variable\">$city</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;number = <span class=\"hljs-variable\">$number</span>;\n        <span class=\"hljs-keyword\">$this</span>-&gt;street = <span class=\"hljs-variable\">$street</span>;\n        <span class=\"hljs-keyword\">$this</span>-&gt;zipcode = <span class=\"hljs-variable\">$zipcode</span>;\n        <span class=\"hljs-keyword\">$this</span>-&gt;city = <span class=\"hljs-variable\">$city</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$address</span>;\n}\n</code></pre>\n<p>Tu noteras que je n'ai pas encore écrit le constructeur de la classe <code>Person</code>.\nJustement. Le développeur naïf procédera de la façon suivante :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$address</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-variable\">$zipcode</span>, <span class=\"hljs-variable\">$city</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;address = <span class=\"hljs-keyword\">new</span> Address(<span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-variable\">$zipcode</span>, <span class=\"hljs-variable\">$city</span>);\n    }\n}\n\n<span class=\"hljs-variable\">$person</span> = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&#x27;Allée des Rosiers&#x27;</span>, <span class=\"hljs-number\">78670</span>, <span class=\"hljs-string\">&#x27;Villennes-sur-Seine&#x27;</span>);\n</code></pre>\n<p>Alors oui, hein, ça marche, et on peut instancier une personne et son adresse en\nune ligne de code. Le problème est qu'en procédant ainsi, les classes <code>Person</code>\net <code>Address</code> deviennent <strong>étroitement couplées</strong> : la classe <code>Person</code> est\ninutilisable sans la classe <code>Address</code>, et pire, le code interne de la première\nserait impacté par un changement sur la seconde.</p>\n<p>Pas convaincu ? Qu'est-ce qui se passera le jour où on lèvera 10 millions de\ndollars pour internationaliser l'appli ?</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Address</span>\n</span>{\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$country</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-variable\">$zipcode</span>, <span class=\"hljs-variable\">$city</span>, <span class=\"hljs-variable\">$country</span></span>)\n    </span>{\n        <span class=\"hljs-comment\">// ...</span>\n        <span class=\"hljs-keyword\">$this</span>-&gt;country = <span class=\"hljs-variable\">$country</span>;\n    }\n}\n</code></pre>\n<p>Ah bah mince, il faut aussi modifier le constructeur de la classe <code>Person</code> pour\ny ajouter le nouveau paramètre <code>$country</code> de manière symétrique. C'est ballot.</p>\n<p>Dans l'idéal, la classe <code>Person</code> devrait se foutre royalement de la façon dont\nla classe <code>Address</code> fonctionne. Une personne a toujours besoin d'une adresse,\nmais ça n'implique certainement pas que ce soit le rôle de cette classe de la\nforger. Alors, on fait comment ? C'est très simple :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$address</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\">Address <span class=\"hljs-variable\">$address</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;address = <span class=\"hljs-variable\">$address</span>;\n    }\n}\n</code></pre>\n<p>L'injection de dépendances, c'est précisément ça. Si une classe a besoin d'une\ninstance d'une autre classe, que ce soit dans son constructeur ou dans une autre\nméthode (un <em>setter</em> par exemple), alors elle prend cette instance directement\nen paramètre et ne s'occupe certainement pas de l'instancier elle-même. Procéder\nainsi permet d'écrire du code <strong>découplé</strong>, évitant toute interdépendance entre\nses différents composants, ce qui les rend <strong>réutilisables</strong> sans devoir\nembarquer toute la smala au passage, mais également beaucoup plus\n<strong>maintenables</strong> puisque chaque classe s'occupe de ses fesses et pas de celles\ndes autres. En PHP, on tire également parti du <em>type hinting</em> d'objets, qui\npermet de s'assurer d'emblée que notre paramètre est une instance de la classe\nvoulue et non pas n'importe quoi.</p>\n<p>Alors oui, je t'entends déjà grommeler :</p>\n<blockquote>\n<p>Ouais mais du coup je dois instancier une adresse moi-même à chaque fois que\nje crée une personne, c'est relou ton truc</p>\n</blockquote>\n<p>Si telle est ton opinion, <del>tu ne mérites pas de vivre</del> je t'invite à\npoursuivre la lecture de cet article avec l'entrain qui te caractérise.</p>\n<h2>L'usine à la rescousse</h2>\n<p>Je ne sais pas si tu sais, mais il existe un <em>design pattern</em> assez répandu en\nprogrammation orientée objet que l'on nomme <strong>factory</strong> (usine en français, d'où\nle titre pourrave de cette partie).</p>\n<p>En gros, le principe est de créer une classe dont le rôle est d'instancier\nd'autres classes, précisément dans le cas où une telle tâche demande plusieurs\nlignes de code, afin justement d'éviter de répéter celles-ci. Pour reprendre\nnotre exemple :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonFactory</span>\n</span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createPerson</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-variable\">$zipcode</span>, <span class=\"hljs-variable\">$city</span>, <span class=\"hljs-variable\">$country</span></span>)\n    </span>{\n        <span class=\"hljs-variable\">$address</span> = <span class=\"hljs-keyword\">new</span> Address(<span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-variable\">$zipcode</span>, <span class=\"hljs-variable\">$city</span>, <span class=\"hljs-variable\">$country</span>);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-variable\">$address</span>);\n    }\n}\n</code></pre>\n<p>Pour le coup, tu te dis peut-être que je te prends allègrement pour un idiot :\npourquoi se prendre le chou à créer une classe qui fait exactement ce qu'on\nfaisait directement dans <code>Person</code> au départ ? Parce que tu n'as pas bien écouté,\n<del>petit c</del> jeune padawan. L'objectif en utilisant l'injection de dépendances,\nc'est que nos classes ne soient pas dépendantes (justement) les unes des autres\nsi ce n'est pas justifié. Une personne a beau avoir besoin d'une adresse, on\npourrait fort bien imaginer les utiliser l'une sans l'autre (tu comprendras à la\npartie suivante). Dans le cas de <code>PersonFactory</code>, notre objectif est justement\nde créer une personne à partir des différents composants d'une adresse en une\nligne de code, pour conserver la simplicité du code métier qui te tient tant à\ncoeur (et tu as bien raison, au fond). Seulement, <code>Person</code> et <code>Address</code> restent\nutilisables avec ou sans <code>PersonFactory</code> : l'objectif est atteint, petit navire.</p>\n<p>Tant qu'on en est à se simplifier la vie :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonFactory</span>\n</span>{\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getZipcodeFromDistrict</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$district</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">75000</span> + <span class=\"hljs-variable\">$district</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createParigot</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-variable\">$district</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;createPerson(<span class=\"hljs-variable\">$number</span>, <span class=\"hljs-variable\">$street</span>, <span class=\"hljs-keyword\">$this</span>-&gt;getZipcodeFromDistrict(<span class=\"hljs-variable\">$district</span>), <span class=\"hljs-string\">&#x27;Paris&#x27;</span>, <span class=\"hljs-string\">&#x27;France&#x27;</span>);\n    }\n}\n</code></pre>\n<p>Tu t'imagines faire ce genre de chose dans la classe <code>Person</code> ou la classe\n<code>Address</code> ? J'espère bien que non.</p>\n<h2>Oui, ça sert à quelque chose une interface</h2>\n<p>Dans tes souvenirs brumeux de vendredis matins étudiants (<em>cf. supra</em>), tu\nretrouveras peut-être des bribes de cours portant sur les <strong>interfaces</strong>. Si\ntout ce que tu as retenu, c'est qu'&quot;une classe toute vide ça sert à rien&quot;, lis\ndonc ce qui va suivre.</p>\n<p>Une interface, c'est avant tout un contrat. Une classe qui <strong>implémente</strong> une\ninterface s'engage à implémenter toutes les méthodes que celle-ci déclare. Sans\nmême lire le code de ladite classe, on sait donc d'emblée comment on peut jouer\navec et comment elle est censée fonctionner.</p>\n<p>Poursuivons encore sur notre exemple et imaginons qu'on doive gérer des adresses\nne respectant pas le format utilisé jusqu'ici, par exemple une adresse plus\nbasique constituée d'une unique chaîne de caractères :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BasicAddress</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$address</span>;\n}\n</code></pre>\n<p>Dans l'état actuel des choses, on ne peut pas utiliser une instance de cette\nclasse avec <code>Person</code>, puisque le constructeur de cette dernière attend une\ninstance d'<code>Address</code>. Qu'à cela ne tienne !</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AddressInterface</span>\n</span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullAddress</span>(<span class=\"hljs-params\"></span>)</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BasicAddress</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AddressInterface</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$address</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullAddress</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;address;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Address</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AddressInterface</span>\n</span>{\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullAddress</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;number.<span class=\"hljs-string\">&#x27;, &#x27;</span>.<span class=\"hljs-keyword\">$this</span>-&gt;street.<span class=\"hljs-string\">&#x27;, &#x27;</span>.<span class=\"hljs-keyword\">$this</span>-&gt;zipcode.<span class=\"hljs-string\">&#x27; &#x27;</span>.<span class=\"hljs-keyword\">$this</span>-&gt;city.<span class=\"hljs-string\">&#x27;, &#x27;</span>.<span class=\"hljs-keyword\">$this</span>-&gt;country;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n</span>{\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\">AddressInterface <span class=\"hljs-variable\">$address</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;address = <span class=\"hljs-variable\">$address</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAddress</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;address;\n    }\n}\n\n<span class=\"hljs-variable\">$address</span> = <span class=\"hljs-keyword\">new</span> BasicAddress(<span class=\"hljs-string\">&#x27;test test un deux un deux&#x27;</span>);\n<span class=\"hljs-variable\">$person</span> = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-variable\">$address</span>);\n\n<span class=\"hljs-variable\">$factory</span> = <span class=\"hljs-keyword\">new</span> PersonFactory();\n<span class=\"hljs-variable\">$robert</span> = <span class=\"hljs-variable\">$factory</span>-&gt;createParigot(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Rue de la Paix&#x27;</span>, <span class=\"hljs-number\">2</span>);\n\n<span class=\"hljs-keyword\">echo</span>(<span class=\"hljs-variable\">$person</span>-&gt;getAddress()-&gt;getFullAddress()); <span class=\"hljs-comment\">// &#x27;test test un deux un deux&#x27;</span>\n<span class=\"hljs-keyword\">echo</span>(<span class=\"hljs-variable\">$robert</span>-&gt;getAddress()-&gt;getFullAddress()); <span class=\"hljs-comment\">// &#x27;1, rue de la Paix, 75002 Paris, France&#x27;</span>\n</code></pre>\n<p>Tu vois l'idée ? En demandant une instance de n'importe quelle classe\nimplémentant <code>AddressInterface</code> au lieu d'une instance d'<code>Address</code>\nspécifiquement, on se donne plus de mou et on réduit encore davantage le\ncouplage entre nos classes. Qu'on crée une personne avec une instance\nd'<code>Address</code> ou de <code>BasicAddress</code>, on pourra dans tous les cas obtenir l'adresse\npostale de ladite personne de la même façon.</p>\n<h2>Elle contient ta fiancée, hein Mitch ?</h2>\n<p>Tu auras peut-être tiqué sur un détail du dernier exemple : le fait de ne pas\nfaire de <code>PersonFactory</code> une classe statique (beurk) nous oblige à l'instancier\npour pouvoir l'utiliser ; ce qui, à n'en pas douter, t'aura mené à te dire &quot;arf,\nça va m'en faire des <code>new MachinFactory()</code> pour instancier mes objets&quot;. Là\nencore, l'injection de dépendances peut nous aider, quoique de manière indirecte\n: en utilisant un conteneur d'injection de dépendances.</p>\n<p>Un conteneur (ça sera plus court) peut <em>grosso modo</em> être comparé à une grosse\n<em>factory</em> capable d'instancier plusieurs classes. En pratique, afin d'éviter\nd'écrire et de devoir maintenir une classe monolithique, on en fera plutôt\nquelque chose qui fait appel aux différentes <em>factories</em>. Poursuivons sur notre\nexemple :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DependencyInjectionContainer</span>\n</span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPersonFactory</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> PersonFactory();\n    }\n}\n</code></pre>\n<p>Mais ça ne s'arrête évidemment pas là. De par le fait d'utiliser l'injection de\ndépendances à grande échelle, on a souvent besoin d'instancier nous-même les\nobjets dont on a besoin. Dans certains cas, ce seront toujours les mêmes, ce qui\nvaut pour les <em>factories</em> mais pas que : pense aux différentes librairies qui\ncomposent un projet web, par exemple. Ce ne serait pas génial que les\ndifférentes instances de ces classes soient accessibles via le conteneur pour\npouvoir y accéder à l'envi ?</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-variable\">$container</span> = <span class=\"hljs-keyword\">new</span> DependencyInjectionContainer();\n\n<span class=\"hljs-variable\">$container</span>-&gt;getOrm()-&gt;performSomeNaughtyQuery();\n<span class=\"hljs-variable\">$container</span>-&gt;getTwig()-&gt;renderUglyTemplate();\n<span class=\"hljs-variable\">$container</span>-&gt;getTranslator()-&gt;translate(<span class=\"hljs-string\">&#x27;Putain de code !&#x27;</span>);\n</code></pre>\n<p>Les objets ainsi gérés par un tel conteneur deviennent dès lors des <strong>services</strong>\ndans ton application.</p>\n<blockquote>\n<p>Mais ça signifie instancier un service à chaque appel ?</p>\n</blockquote>\n<p>Pas nécessairement ! Il existe des mécanismes permettant de conserver une même\ninstance pour la servir lors des appels suivants. Cela sort un peu du cadre de\ncet article, mais je t'invite vivement à jeter un oeil à\n<a href=\"http://php-di.org/\">PHP-DI</a>, qui est un conteneur d'injection de dépendances\ntrès bien fichu que tu peux utiliser dans ton projet si tu le souhaites.</p>\n<h2>Épilogue</h2>\n<p>Si tu développes en PHP, j'espère t'avoir montré qu'il est possible d'écrire du\ncode plus maintenable et plus élégant en utilisant l'injection de dépendances.\nDans le cas contraire, sache que ce concept est très répandu dans les langages\norientés objet d'une manière générale - après tout,\n<a href=\"https://docs.angularjs.org/guide/di\">on en retrouve même dans Angular</a>.</p>\n<p>Bon code, et n'oublie pas, on ne met pas en prod le vendredi, c'est mal. Allez,\nfile !</p>\n"}