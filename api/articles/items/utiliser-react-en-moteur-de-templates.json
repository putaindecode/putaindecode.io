{"slug":"utiliser-react-en-moteur-de-templates","filename":"2015-05-07-utiliser-react-en-moteur-de-templates","title":"Utiliser React en moteur de templates","date":"Thu, 07 May 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-05-07T00:00:00.000Z","title":"Utiliser React en moteur de templates","author":"MoOx","oldSlug":"js/react/utiliser-en-moteur-de-templates","slug":"utiliser-react-en-moteur-de-templates"},"body":"<p>Vous connaissez probablement tous des moteurs de templates. En JavaScript nous\navons Handlebars, Jade, EJS, Slim... Tous ces projets partent de bonnes\nintentions mais √† l'utilisation, on peut sentir des limitations et donc de\nl'insatisfaction.</p>\n<p>Utiliser Handlebars par exemple, c'est un peu devoir coder tout un tas de\nhelpers pour g√©rer une partie de votre affichage, √ßa peut vite devenir lourd.\n√ätre restreint √† une syntaxe limit√©e par choix est un peu frustrant. Quand c'est\npas √ßa, c'est la syntaxe du moteur qui va √™tre lourde.</p>\n<p>On peut en venir √† regretter PHP. Faut avouer que ce langage √©tait plut√¥t simple\n√† utiliser en tant que moteur de template. Efficace et pas de restrictions. On\ntrouve m√™me parfois des <code>mysql_query()</code> dans des templates‚Ä¶</p>\n<p>Blague √† part, nous cherchions des langages pour refaire une partie de notre\nsite puisque nous n'√©tions pas vraiment satisfaits du processus actuel\n(anciennement Handlebars, puis Jade).</p>\n<p>Mais finalement, pourquoi ne pas rester avec du JavaScript, purement et\nsimplement ?</p>\n<p>C'est ce que nous avons fait avec React et JSX qui sont de plus en plus\nutilis√©s. La syntaxe est plut√¥t lib√©ratrice.</p>\n<p>Pour ceux qui ne connaissent pas JSX, il s'agit d'un superset de JavaScript qui\nsupporte une syntaxe XML transform√© en appel de fonctions JavaScript. Il faut\ndire que le XML a beau √™tre verbeux, pour d√©finir des √©l√©ments ayant des\npropri√©t√©s et des enfants, on a pas vraiment fait plus lisible et clair sur ce\npoint. Le HTML est plut√¥t simple √† prendre en main c'est certain. Les m√©thodes\nde rendu de React (ce qui va nous int√©resser) sont tr√®s proches de l'HTML.</p>\n<p>Ceux qui ont utilis√© JSX (bien qu'ayant pu avoir des naus√©es au premier contact)\navouent souvent qu'ils ont fini par aimer cette petite syntaxe cr√©√©e par\nFacebook qui fonctionne tr√®s bien avec React.</p>\n<p>Du coup, si on utilisait √ßa pour faire de simple templates et non pas des\ncomposants d'interface utilisateur dynamiques ? Qui peut le plus peut le moins\n(quoi qu'en fait, des templates, c'est un peu des composants d'interface).</p>\n<h2>Exemple de template React/JSX</h2>\n<p>Si vous ne savez pas trop ce qu'est React, nous vous recommandons de lire notre\n<a href=\"/fr/articles/js/react/\">introduction √† React</a>.</p>\n<p>Dans notre cas, on ne va pas sp√©cialement b√©n√©ficier de certaines de ses forces,\nmais √ßa fera tr√®s bien le job pour notre besoin.</p>\n<p>Nous n'aborderons pas dans le d√©tail la syntaxe React/JSX, ni ES6, pour rester\nfocalis√©s sur la finalit√© (on a pr√©vu des articles √† ce propos, en attendant\n<a href=\"http://babeljs.io/docs/learn-es6/\">voici de quoi vous occuper avec ES6</a>).</p>\n<p><em>Attention, pour ceux qui sont encore sur des plugins jQuery, √ßa risque de vous\npiquer les yeux</em> üò≠.</p>\n<p><a name=\"es6-class\"></a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PostTemplate</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{this.props.pageTitle}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;org-Post&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;org-Post-header&quot;</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{this.props.pageTitle}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n              <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;org-Post-content&quot;</span>\n              <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">__html:</span> <span class=\"hljs-attr\">this.props.pageContent</span> }}\n            /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<p>Ce que vous voyez c'est bien du JavaScript. Un peu am√©lior√© via JSX, on ne va\npas le nier (dans notre cas, on g√®re tout √ßa de mani√®re transparente avec\n<a href=\"http://babeljs.io/\">babel(-node)</a>).</p>\n<p>√áa ressemble dr√¥lement √† de l'HTML et c'est √ßa qui est appr√©ciable pour nous.\nVous noterez que l'attribut pour d√©finir une classe HTML est <code>className</code> puisque\nReact est en JavaScript et que le mot <code>class</code> est r√©serv√© (cf.\n<a href=\"#es6-class\">la d√©finition en ES6 de la classe</a>).</p>\n<p>En m√™me temps ce qui est cool, c'est qu'on reste dans du JavaScript.</p>\n<p>On peut donc utiliser toutes nos biblioth√®ques pr√©f√©r√©es via <em>npm</em> pour\nl'affichage (exemple : <code>momentjs</code>), ou simplement des boucles via les m√©thodes\nde parcours de tableau tel que <code>forEach()</code> ou <code>map()</code> en appelant d'autres\ncomposants.</p>\n<p>Ci-dessous vous trouverez un exemple plus complexe avec une page pour la liste\ndes posts et quelques composants. Les balises qui ressemblent √† du HTML et qui\ncommencent par une majuscule sont li√©es √† des composants qui doivent √™tre\nd√©finis (dans notre cas import√©s). C'est une particularit√© de React.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> Html <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Html&quot;</span>\n<span class=\"hljs-keyword\">import</span> Head <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Head&quot;</span>\n<span class=\"hljs-keyword\">import</span> Body <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Body&quot;</span>\n<span class=\"hljs-keyword\">import</span> PostsList <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../PostsList&quot;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Posts</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Html</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Head</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{head.title}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Body</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{head.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PostsList</span>\n            <span class=\"hljs-attr\">posts</span>=<span class=\"hljs-string\">{</span>\n              <span class=\"hljs-attr\">this.props.collection</span>\n                <span class=\"hljs-attr\">.filter</span>((<span class=\"hljs-attr\">item</span>) =&gt;</span> {\n                  /*\n                    ce que vous voulez pour filtrer votre collection\n                    eg:\n                    return !item.draft\n                  */\n                }\n              }\n          /&gt;\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Body</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Html</span>&gt;</span></span>\n    )\n  }\n}\n</code></pre>\n<p>Voici deux exemples de composants utilis√©s ci-dessus :</p>\n<h3>Head</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Head</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charSet</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">httpEquiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=Edge&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{this.props.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/index.css&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>\n          <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;alternate&quot;</span>\n          <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/feed.xml&quot;</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{this.props.title}</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/atom+xml&quot;</span>\n        /&gt;</span>\n        {this.props.children}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<h3>Body</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, { Component, PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Header <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Header&quot;</span>;\n<span class=\"hljs-keyword\">import</span> Footer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Footer&quot;</span>;\n<span class=\"hljs-keyword\">import</span> GoogleAnalytics <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Analytics&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Body</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> /&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Main&quot;</span>&gt;</span>{this.props.children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Footer</span> /&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{</span>&quot;/<span class=\"hljs-attr\">index.js</span>&quot;} /&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">GoogleAnalytics</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span></span></span>\n    );\n  }\n}\n</code></pre>\n<p>Bon c'est bien beau mais comment je g√®re l'affichage du composant initial\nfinalement (le parent) ?</p>\n<h2>Comment utiliser un template React/JSX ?</h2>\n<p>C'est bien simple. Dans notre cas, pas besoin de React c√¥t√© client. On doit\ng√©rer √ßa c√¥t√© ¬´ serveur ¬ª (je mets √ßa entre guillemets puisque dans notre cas\npr√©cis, c'est pour g√©n√©rer un site statique, et c'est donc sur une machine\nquelconque que la g√©n√©ration se fait).</p>\n<p>Voil√† de quoi effectuer le rendu de nos composants vers du bon vieux HTML (car\nc'est la finalit√© d'un <em>moteur de template</em>).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> react <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> markdownify <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./markdown-parser&quot;</span>;\n<span class=\"hljs-comment\">// je vous conseille marked pour rendre du markdown</span>\n<span class=\"hljs-comment\">// c&#x27;est ce que nous utilisons pour rendre nos pages √† l&#x27;heure o√π j&#x27;√©cris ce post</span>\n\n<span class=\"hljs-keyword\">const</span> reactClass = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./template/PostTemplate&quot;</span>);\n<span class=\"hljs-keyword\">const</span> component = <span class=\"hljs-keyword\">new</span> (react.createFactory(reactClass))({\n  <span class=\"hljs-comment\">// ici on passe nos &quot;props&quot; react</span>\n  <span class=\"hljs-attr\">pageTitle</span>: <span class=\"hljs-string\">&quot;Test&quot;</span>,\n  <span class=\"hljs-attr\">pageContent</span>: markdownify(<span class=\"hljs-string\">&quot;Imaginons du **markdown** pars√©&quot;</span>),\n  <span class=\"hljs-comment\">// vous pouvez bien entendu rajouter d&#x27;autres choses</span>\n  <span class=\"hljs-attr\">collections</span>: {\n    <span class=\"hljs-attr\">posts</span>: [\n      <span class=\"hljs-comment\">//...</span>\n    ],\n  },\n});\n\n<span class=\"hljs-keyword\">let</span> html;\n<span class=\"hljs-keyword\">try</span> {\n  html = react.renderToStaticMarkup(component);\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-comment\">// Vous devrez g√©rer votre exception selon votre environnement</span>\n  <span class=\"hljs-comment\">// si c&#x27;est pour un test on peut simplement ne pas utiliser</span>\n  <span class=\"hljs-comment\">// try/catch, √ßa nous p√®tera √† la gueule et c&#x27;est tant mieux</span>\n  <span class=\"hljs-keyword\">throw</span> err;\n}\n\n<span class=\"hljs-comment\">// maintenant vous faites ce que vous voulez de votre string html !</span>\n<span class=\"hljs-comment\">// ex: require(&quot;fs&quot;).writeFile(...)</span>\n</code></pre>\n<p>La m√©thode int√©ressante de React est dans notre cas <code>renderToStaticMarkup()</code> qui\nva nous g√©n√©rer un HTML qui va bien.</p>\n<p>Pour aller plus loin on pourrait d√©cider d'utiliser <code>renderToString()</code> plut√¥t\nque <code>renderToStaticMarkup()</code> afin de pouvoir faire prendre le relais √† React\nc√¥t√© client mais l√†\n<a href=\"/fr/articles/js/react/cote-serveur/\">le niveau de complexit√© est diff√©rent</a>.</p>\n<p>Pour la petite anecdote, notre site utilise actuellement\n<a href=\"http://www.metalsmith.io/\">metalsmith</a>, une petite biblioth√®que simple mais qui\npermet par son API de faire des choses sympas.</p>\n<p>J'ai donc cod√©\n<a href=\"https://github.com/search?q=user%3AMoOx+metalsmith\">quelques plugins metalsmith</a>\ndont un <a href=\"https://github.com/MoOx/metalsmith-react\">metalsmith-react</a> √†\nl'occasion.</p>\n<p>N'h√©sitez pas √† consulter\n<a href=\"https://github.com/putaindecode/putaindecode.io\">le code source de notre site</a>\npour faire des d√©couvertes sympas.</p>\n"}