{"slug":"es6-es2015-les-template-strings","filename":"2015-12-07-es6-es2015-les-template-strings","title":"ES6, ES2015 : les template strings","date":"Mon, 07 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-07T00:00:00.000Z","title":"ES6, ES2015 : les template strings","author":"jbleuzen","oldSlug":"js/es2015/template-strings","slug":"es6-es2015-les-template-strings"},"body":"<p>ES2015 ajoute le support des <em>template strings</em> qui va permettre enfin de se\nsimplifier la vie lorsqu'on doit manipuler des chaînes de caractères.</p>\n<h2>Le principe</h2>\n<p>Pour définir une chaîne en JavaScript, il faut utiliser soit des single quotes,\nsoit des double quotes. Malheureusement ces délimiteurs posent quelques\nproblèmes lorsque justement la chaîne contient un single quote ou une double\nquote.</p>\n<p>Ainsi, les <em>template strings</em> utilisent le caractère <em>back-tick</em> (accent grave\nsimple) pour délimiter les chaînes de caractères.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">var</span> myString = <span class=\"hljs-string\">&#x27;Je suis une &quot;chaîne de caractères&quot;&#x27;</span>;\n\n<span class=\"hljs-comment\">// ES6</span>\n<span class=\"hljs-keyword\">const</span> myNewString = <span class=\"hljs-string\">`Je suis une &quot;template string&quot;`</span>;\n</code></pre>\n<p>Jusque là, rien de bien novateur mais voyons un exemple que l'on rencontre tout\nle temps : l'interpolation d'expression dans les chaînes de texte.</p>\n<h2>Interpolation d'expression</h2>\n<p>On peut maintenant directement utiliser les variables dans une <em>template string</em>\nsi on les insère dans un placeholder qui s'écrit <code>${variable}</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;world&quot;</span>;\n<span class=\"hljs-keyword\">var</span> myStrin = <span class=\"hljs-string\">&quot;Hello &quot;</span> + name; <span class=\"hljs-comment\">// =&gt; Hello world</span>\n\n<span class=\"hljs-comment\">// ES6</span>\n<span class=\"hljs-keyword\">const</span> newName = <span class=\"hljs-string\">`developer`</span>;\n<span class=\"hljs-keyword\">const</span> myStrin = <span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${newName}</span>`</span>; <span class=\"hljs-comment\">// =&gt; Hello developer</span>\n</code></pre>\n<p>Il est également possible de faire des traitements dans un placeholder et\nd'appeler des fonctions.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${x}</span> + <span class=\"hljs-subst\">${y}</span> = <span class=\"hljs-subst\">${x + y}</span>`</span>; <span class=\"hljs-comment\">// =&gt; 1 + 2 = 3</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">square</span>(<span class=\"hljs-params\">num</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> num * num;\n}\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${square(<span class=\"hljs-number\">5</span>)}</span>`</span>; <span class=\"hljs-comment\">// =&gt; 25</span>\n</code></pre>\n<p>Ce qui rend l'utilisation des <em>template strings</em> extrêmement intéressante.</p>\n<h2>Les <em>template strings</em> multi-lignes</h2>\n<p>Une autre avancée des <em>template strings</em> est le support multi-ligne, en effet en\nES5 il n'existe aucune solution esthétique (et pratique) pour générer des\nchaînes multi-lignes. Ce problème disparait avec les <em>template strings</em>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">var</span> multiline =\n  <span class=\"hljs-string\">&quot;foo \\\n                 bar \\\n                 baz&quot;</span>;\n\n<span class=\"hljs-keyword\">var</span> multiline2 = <span class=\"hljs-string\">&quot;foo&quot;</span>;\nmultiline2 += <span class=\"hljs-string\">&quot;bar&quot;</span>;\nmultiline2 += <span class=\"hljs-string\">&quot;baz&quot;</span>;\n\n<span class=\"hljs-comment\">// ES6</span>\n<span class=\"hljs-keyword\">const</span> multiline = <span class=\"hljs-string\">`foo\n                   bar\n                   baz`</span>;\n</code></pre>\n<p><em>Attention</em> cependant, les espaces sont conservés avec les <em>template strings</em>,\nce qui peut surprendre si vous devez tester des strings multi-lignes.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> str1 = <span class=\"hljs-string\">`foo\nbar`</span>;\n\n<span class=\"hljs-keyword\">const</span> str2 = <span class=\"hljs-string\">`foo\n             bar`</span>;\n\nstr1 === str2; <span class=\"hljs-comment\">// =&gt; false</span>\n</code></pre>\n<h2>Les <em>template strings</em> taggués</h2>\n<p>On entre dans les fonctions moins connues et peu utilisées des <em>template\nstrings</em>. Les tags sont des fonctions que l'on place juste avant une <em>template\nstring</em> et qui permettent de modifier le contenu de la dite chaîne de\ncaractères.</p>\n<p>Ce tag aura pour paramètres un tableau de &quot;literals&quot; (les chaînes de\ncaractères), et ensuite tous les paramètres correspondant aux valeurs\ninterpolées qui auront déjà été évaluées, mais que l'on pourra quand même\nmodifier.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">capitalizeVowels</span>(<span class=\"hljs-params\">strings, ...values</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">replaceVowels</span>(<span class=\"hljs-params\">string</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> string.replace(<span class=\"hljs-regexp\">/[aeiou]/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> c.toUpperCase();\n    });\n  }\n\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">&quot;&quot;</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; strings.length; ++i) {\n    <span class=\"hljs-keyword\">const</span> nextValue = values[i] || <span class=\"hljs-string\">&quot;&quot;</span>;\n    result += replaceVowels(strings[i]);\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">parseInt</span>(nextValue)) {\n      result += replaceVowels(nextValue);\n    } <span class=\"hljs-keyword\">else</span> {\n      result += nextValue;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result;\n}\n\ncapitalizeVowels<span class=\"hljs-string\">`foo bar ?`</span>; <span class=\"hljs-comment\">// =&gt; fOO bAr ?</span>\n<span class=\"hljs-keyword\">const</span> n = <span class=\"hljs-number\">42</span>;\n<span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-string\">&quot;f&quot;</span>;\n<span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-string\">&quot;o&quot;</span>;\ncapitalizeVowels<span class=\"hljs-string\">`foo <span class=\"hljs-subst\">${n}</span> bar <span class=\"hljs-subst\">${c}</span><span class=\"hljs-subst\">${v}</span><span class=\"hljs-subst\">${v}</span> ?`</span>; <span class=\"hljs-comment\">// =&gt; fOO 42 bAr fOO ?</span>\n</code></pre>\n<p>Voici un exemple intéressant d'utilisation des <em>template strings</em> taggués qui\nprésente un système\n<a href=\"http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/\">de localisation de chaînes de caractères</a>.</p>\n<h2>String.raw</h2>\n<p>Et pour finir, une nouvelle fonction a été ajoutée au prototype de <code>String</code> qui\npermet d'afficher le contenu d'un <em>template string</em> brut. C'est à dire que la\nfonction permettra de voir les caractères d'échappement qui sont automatiquement\ngérés avec une <em>template string</em>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">String</span>.raw<span class=\"hljs-string\">`FOO\\nbar`</span>; <span class=\"hljs-comment\">// =&gt; FOO\\\\nbar</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p>Les <em>template strings</em> sont bien utiles au quotidien, l'ajout de l'interpolation\nsimplifie grandement la vie et permet d'oublier les erreurs d'échappement.</p>\n<p>Aujourd'hui,\n<a href=\"https://kangax.github.io/compat-table/es6/#test-template_strings\">la grande majorité des navigateurs les supportent</a>\nainsi que babel et traceur, donc usez et abusez des <em>template strings</em>…</p>\n"}