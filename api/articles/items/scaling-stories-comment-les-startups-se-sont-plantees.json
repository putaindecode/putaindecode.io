{"slug":"scaling-stories-comment-les-startups-se-sont-plantees","filename":"2020-04-02-scaling-stories-comment-les-startups-se-sont-plantees","title":"Scaling stories - comment les startups se sont plant√©es","date":"Tue, 02 Jun 2020 00:00:00 GMT","draft":false,"meta":{"date":"2020-06-02T00:00:00.000Z","title":"Scaling stories - comment les startups se sont plant√©es","author":"cyppan","slug":"scaling-stories-comment-les-startups-se-sont-plantees"},"body":"<blockquote>\n<ul>\n<li>&quot;Ca ne fonctionne pas, mes enfants n'arrivent pas √† se connecter √† votre service !&quot;</li>\n<li>&quot;Nous sommes d√©sol√© notre √©quipe technique est mobilis√©e √† 100% sur ce probl√®me c'est une situation exceptionnelle‚Ä¶ Nous vous tenons au courant.&quot;</li>\n</ul>\n</blockquote>\n<p>C'est le genre de tweet ou de message LinkedIn qu'on a pu voir se multiplier avec le confinement r√©cent d√ª au Covid-19. En effet les services web, et en particulier les outils de communication ou les programmes du secteur de l'EdTech (education technology), ont d√ª faire face √† un usage particuli√®rement intense et soutenu ces derniers temps. Il n'y en a que peu √† ma connaissance qui ont √©t√© capables de maintenir une qualit√© de service acceptable (Slack et Zoom ont particuli√®rement brill√© sur ce sujet). Si la plupart ont mis en place des solutions minutes comme des queues de connexion,\nd'autres encore ont √©t√© forc√©s de d√©sactiver leur service pour une &quot;maintenance&quot; √† dur√©e ind√©termin√©e‚Ä¶</p>\n<p>M√™me en √©tant compr√©hensifs, face √† un service plant√©, on a vite fait de changer. Apr√®s tout, avec le choix plus que fourni de services dont on dispose, pourquoi se priver ? Le probl√®me c'est qu'apr√®s la crise, il est fort probable que nous ne reviendrons pas au service qu'on avait pourtant trouv√© si cool au premier abord‚Ä¶ A√Øe, pour une startup c'est beaucoup de clients perdus, peut-√™tre assez pour ne jamais retrouver de la traction. Une mort p√©nible donc pour un business, victime lui aussi du virus.</p>\n<p>Mais üßê</p>\n<ul>\n<li><em>Ces entreprises n'auraient-elles pas pu mieux anticiper ?</em></li>\n<li><em>N'auraient-elles pas pu avoir une meilleure tech √† la base, crise ou pas crise ?</em></li>\n<li><em>Et une fois devant le probl√®me, n'auraient-elles pas pu mieux s'adapter et plus rapidement ?</em></li>\n</ul>\n<h2>le mod√®le de &quot;scaling maturity&quot;</h2>\n<p><img src=\"/public/images/articles/2020-04-02-scaling-stories-comment-les-startups-se-sont-plantees/scaling-maturity-fr.png\" alt=\"mod√®le de scaling maturity\" /></p>\n<p>En premier lieu j'aimerais introduire le concept de <em>scaling maturity</em>. &quot;To scale&quot; c'est l'art d'adapter (automatiquement ou non) sa stack technique afin de r√©pondre √† la demande en entr√©e. Et reconnaissons d√©j√† que Zoom et Slack sont beaucoup plus matures que (par exemple) de jeunes startups de l'EdTech.<br />\nAnalysons les √† l'aide du mod√®le de <em>scaling maturity</em>.</p>\n<ol>\n<li><strong>Volume d'usage nominal</strong> : Slack ou Zoom avaient d√©j√† un trafic (tr√®s) important, le pic d'activit√© repr√©sente un pourcentage plus petit que pour une startup pour qui c'est peut-√™tre un boost de 100 ou 1000 fois l'activit√© habituelle.</li>\n<li><strong>Maturit√© du produit</strong> : Ils ont eu le temps de conna√Ætre les sp√©cificit√©s de leur usage, les caract√©ristiques d'acc√®s aux donn√©es, les points de fragilit√© de leur syst√®me, ‚Ä¶</li>\n<li><strong>Comp√©tences techniques</strong> : Ils ont probablement une √©quipe tech plus grande et plus exp√©riment√©e.</li>\n</ol>\n<p>Pour synth√©tiser, ils en savent beaucoup sur la fa√ßon dont leur produit est utilis√© et quelle est leur roadmap, et donc savent bien quel type d'effort concentrer pour s'adapter √† la demande suppl√©mentaire. En plus, leur infrastructure actuelle peut d√©j√† encaisser un volume cons√©quent.</p>\n<p>De l'autre c√¥t√©, les jeunes services web se sont retrouv√©s submerg√©s, cherchant de l'aide d√©sesp√©rement et des solutions pour <a href=\"https://en.wikipedia.org/wiki/Shard_%28database_architecture%29\">sharder</a> et r√©pliquer leur base de donn√©e relationnelle existante (plus √† ce sujet un peu plus loin).<br />\nJe prends √† pr√©sent l'exemple hypoth√©tique d'une startup EdTech offrant un service de classe en ligne innovant.</p>\n<ol>\n<li><strong>Volume d'usage nominal</strong> : Quelques clients aiment leur produit, &quot;c'est le futur&quot;, ils croient au potentiel de croissance et l'ajout de fonctionnalit√©s avec le temps. Il y a donc un faible volume d'utilisation pour le moment et une croissance mesur√©e attendue, ils ont opt√© pour quelques serveurs OVH √©conomiquement int√©ressants.</li>\n<li><strong>Maturit√© du produit</strong> : Leur produit est tr√®s jeune, ils misent sur l'innovation et des boucles de feedback rapides pour l'√©toffer.</li>\n<li><strong>Comp√©tences techniques</strong> : Des stagiaires, peut-√™tre de jeunes employ√©s, parfois des fondateurs qui font eux-m√™mes les premiers prototypes. A ce niveau les salaires p√®sent beaucoup dans la balance.</li>\n</ol>\n<p>Je m'autorise ici une conclusion pr√©liminaire √† la premi√®re question : les entreprises n'auraient pas pu anticiper, et m√™me j'irai plus loin pour les plus petites d'entre elles, elles ne devaient pas le faire‚Ä¶ En effet, si on souhaite cr√©er un produit avec du scaling &quot;infini&quot; d√®s le d√©but, √ßa implique d'investir beaucoup <strong>en temps et en argent</strong>. Deux ressources pr√©cieuses que l'on pr√©f√®re rationnellement investir sur d'autres sujets quand on est un business en phase de d√©marrage (comme trouver sa place sur le march√©, ajouter des fonctionnalit√©s, cro√Ætre, ‚Ä¶).</p>\n<blockquote>\n<p><img src=\"/public/images/articles/2020-04-02-scaling-stories-comment-les-startups-se-sont-plantees/black-swan.jpg\" alt=\"cygne noir\" />\nCovid-19 est un tr√®s bon exemple de ce qu'on appelle un √©v√®nement <a href=\"https://fr.wikipedia.org/wiki/Th%C3%A9orie_du_cygne_noir\">&quot;cygne noir&quot;</a>\nUn √©v√®nement qui est tr√®s rare, a des r√©percussions massives, que les entreprises n'avaient donc pas pr√©vu.<br />\nEn effet ce point est assez √©vident, n√©anmoins je trouve cet &quot;interlude du cygne&quot; bienvenu üòâ</p>\n</blockquote>\n<p>J'ai pu parler r√©cemment avec quelques startups EdTech qui recherchaient des solutions urgemment‚Ä¶ Elles en √©taient au m√™me point : elles ne pouvaient plus doper les ressources de leur base de donn√©e relationnelle (<strong>scale up</strong>). Apr√®s avoir essay√© d'ajouter du cache, d√©ployer de nouveau n≈ìuds, de refactorer leurs applications, le point limitant final restait la base de donn√©e‚Ä¶ La seule solution √©tait donc de sharder (<strong>scale out</strong>) afin de r√©partir les √©critures sur plusieurs instances en parall√®le. Ils cherchaient donc des solutions intelligentes (dans le sens autonomes) √† ajouter en amont de leur base de donn√©e afin de pouvoir continuer le scale. Pas si √©vident, et plut√¥t cher‚Ä¶\nEt je ne parlerai m√™me pas de la gestion de la <strong>migration</strong> dans ce contexte !</p>\n<p>Pour avoir une id√©e de la difficult√© de sharder une base de donn√©e existante, je dirais que plus le requ√™tage des donn√©es est global et complexe (par exemple de l'agr√©gation cross-compte), le plus intelligent et cher devra √™tre le proxy en amont. Ca peut aller d'une simple hash-distribution √† un &quot;query planner&quot; distribu√© complexe, et difficile √† scale lui aussi par ailleurs.</p>\n<p>A la lumi√®re du mod√®le de <em>scaling maturity</em>, il est assez clair qu'on ne peut les bl√¢mer de ne pas avoir eu ces m√©canismes de scale d√©j√† en place auparavant, mais elles auraient pu au moins avoir mieux planifi√© leur <strong>prochaine √©tape de scale</strong>.</p>\n<h2>Comment on scale efficacement quand on est une startup?</h2>\n<p>D√©construisons d√©j√† ce qui doit √™tre &quot;scaled&quot; :</p>\n<ul>\n<li><strong>la capacit√© serveur</strong> : La ma√Ætrise des co√ªts implique un dimensionnement adapt√© en terme de taille CPU/RAM/storage. Par serveur, j'entends noeuds physiques, virtuels ou containers.</li>\n<li><strong>les patterns d'acc√®s aux donn√©es</strong> : C'est √† dire conna√Ætre son usage, √©viter de g√©rer des √©tats partag√©s, des requ√™tes globales, pr√©f√©rer l'immutabilit√©, ‚Ä¶</li>\n<li><strong>l'intervention humaine et la maintenance</strong> : Plus on automatise, plus vite on peut it√©rer, des outils comme Github, CircleCI ou terraform sont pr√©cieux.</li>\n<li><strong>le refactoring de code</strong> : &quot;scale&quot; veut souvent dire pr√©-calculer des √©tats, utiliser du cache, plus de synchronisation, tout √ßa doit √™tre cod√© et maintenu √©galement‚Ä¶</li>\n</ul>\n<p>Note : si votre produit n'a pas encore de traction r√©elle, se pr√©occuper de ce sujet est probablement pr√©matur√© et inutile, un rapide prototype MVC avec la techno que vous connaissez d√©j√† fera tout √† fait l'affaire.</p>\n<p>Mais si vous avez de l'usage et une premi√®re id√©e de la direction du produit, alors il y a plusieurs possibilit√©s. Si vous avez avec vous un fondateur au profil technique il sait certainement quoi faire. Sinon, et en particulier si vous avez lev√© des fonds, c'est une bonne id√©e de se faire accompagner sur le design de l'infrastructure d√®s √† pr√©sent.</p>\n<p>Explorons diff√©rentes strat√©gies.</p>\n<h3>La strat√©gie de scaling infini</h3>\n<p>Dissipons imm√©diatement les nuages de fum√©e, il est th√©oriquement possible d'<strong>approcher</strong> une telle architecture mais ce sera tr√®s co√ªteux (en temps et en argent ‚Äì encore une fois deux choses pr√©cieuses pour une startup), et potentiellement assez rigide.<br />\nLa cl√© ici serait d'utiliser au maximum des services g√©r√©s de haut niveau qui tournent sur de grosses infrastructures clouds. Les services choisis devraient √™tre 100% dynamiques, c'est √† dire scale de mani√®re autog√©r√©e : on ne devrait pas avoir √† g√©rer de ressources physiques ou m√™me virtuelles. Id√©alement ces services int√®greraient de base de la r√©plication (pour scale en lecture) et du sharding (pour scale en √©criture) et pourraient √™tre r√©partis dans diff√©rentes r√©gions sur la plan√®te.</p>\n<p>Voici quelques exemples de services g√©r√©s de cet ordre :</p>\n<ul>\n<li>Base de donn√©e relationnelle : Google Cloud Spanner</li>\n<li>NoSQL synchronisation temps r√©el : Google Firestore</li>\n<li>Cluster de cache cross-region : AWS Elasticache</li>\n<li>Stockage de fichier distribut√© : AWS S3</li>\n<li>Data streaming : Google Pub/Sub</li>\n<li>Data warehouse : Google BigQuery</li>\n</ul>\n<p>H√© oui, √ßa fait beaucoup de services Google, tout simplement parce qu'ils ont un train d'avance !</p>\n<p><img src=\"/public/images/articles/2020-04-02-scaling-stories-comment-les-startups-se-sont-plantees/dynamic-scaling-curve-fr.png\" alt=\"courbe de scaling dynamique\" /></p>\n<p><em>Ici je me dois de nuancer cette courbe</em></p>\n<ul>\n<li>Le prix est en fait tr√®s bas au d√©marrage : ces services offrent des niveaux d'utilisation gratuit pour un volume limit√© et/ou pendant une p√©riode limit√©e.</li>\n<li>Une fois un usage cons√©quent atteint, un tarif d√©gressif ou des techniques d'optimisation des co√ªts li√©es au provider viendront r√©duire la facture.</li>\n</ul>\n<h3>La strat√©gie de scaling step-by-step</h3>\n<p><img src=\"/public/images/articles/2020-04-02-scaling-stories-comment-les-startups-se-sont-plantees/static-scaling-curve-fr.png\" alt=\"courbe de scaling step by step\" /></p>\n<p>C'est la strat√©gie classique et probablement la plus efficace, on fait avec ce qu'on a √† disposition au d√©but (comp√©tences, personnes) mais on essaie d'avoir toujours un coup d'avance. On reste conscient des points de fragilit√© du syst√®me, et on sait comment y rem√©dier. On s'attache √† planifier les prochaines migrations.<br />\nCa n√©cessite en particulier :</p>\n<ul>\n<li>De d√©velopper une pipeline solide de monitoring et d'alerting. Il y a beaucoup d'outils pour faire √ßa aujourd'hui.</li>\n<li>De tester chaque migration. Car plus le syst√®me est distribu√©, le moins pr√©visibles seront les probl√®mes. Il est plus simple de tester avant de migrer.</li>\n</ul>\n<p>Par exemple, les prochaines √©tapes de scale planifi√©es pourraient √™tre :</p>\n<ul>\n<li>Sharder la base de donn√©e ou le stream de donn√©es.</li>\n<li>Conserver les donn√©es en silos isol√©s logiquement, afin de pouvoir scaler plus simplement le reste.</li>\n<li>Introduire un scaling automatique des services HTTP bas√© sur le trafic.</li>\n</ul>\n<p>Le principal est de rester √©conomique et intelligent : pour scale efficacement il faut scale dans les bonnes proportions et au bon moment. Trop t√¥t et √ßa co√ªtera trop cher, trop tard et la qualit√© de service tombera‚Ä¶ C'est pourquoi avoir un feedback pertinent (automatis√©) sur l'architecture est un r√©el plus.</p>\n<p>Les clouds proposent souvent des metrics de monitoring int√©gr√©es, par exemple si on utilise les environnements AWS Beanstalk pour des services web il est fourni automatiquement les m√©triques suivantes :</p>\n<ul>\n<li>le nombre de requ√™tes</li>\n<li>la latence moyenne</li>\n<li>l'indice de charge du serveur (load)</li>\n<li>le CPU</li>\n<li>le r√©seau entrant/sortant</li>\n<li>‚Ä¶</li>\n</ul>\n<p>Il est tr√®s facile alors de les visualiser en dashboards, de configurer de l'alerting, ou m√™me d'activer de l'auto-scaling bas√© sur le pourcentage de CPU utilis√©‚Ä¶ Autant d'outils que l'on peut utiliser directement pour scaler ses web services correctement. Apr√®s tout, le plus d'informations (m√©triques) on a √† la base, le mieux on peut prendre les bonnes d√©cisions au final.</p>\n<p>Bien entendu, scaler efficacement c'est scaler de mani√®re appropri√©e, √† chaque situation sa r√©ponse adapt√©e !</p>\n<p>Pour conclure, la bonne solution se situe probablement entre les deux strat√©gies. Ca d√©pendra du budget, de la complexit√© technique du produit, et des comp√©tences √† disposition, ‚Ä¶\nAu moins j'esp√®re que vous avez une meilleure id√©e de comment anticiper le scale !</p>\n<p>Scale safe üëã</p>\n"}