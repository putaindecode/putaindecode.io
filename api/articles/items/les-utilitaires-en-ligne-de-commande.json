{"slug":"les-utilitaires-en-ligne-de-commande","filename":"2015-05-12-les-utilitaires-en-ligne-de-commande","title":"Les utilitaires en ligne de commande","date":"Tue, 12 May 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-05-12T00:00:00.000Z","title":"Les utilitaires en ligne de commande","author":"magsout","oldSlug":"npm/utilitaire-cli","slug":"les-utilitaires-en-ligne-de-commande"},"body":"<p>Avoir accès à ses utilitaires en ligne de commande\n(<a href=\"https://en.wikipedia.org/wiki/Command-line_interface\">CLI</a>) est un quotidien\ndans nos métiers et un avantage indéniable. Ce n'est pas nouveau et cela existe\ndepuis la nuit des temps. Tout utilisateur d'Unix voue un culte particulier à\nson terminal.</p>\n<p>J'ai récemment eu à développer un utilitaire en Node.js/iojs, j'ai donc voulu\navec cet article déblayer un peu le terrain et présenter quelques utilitaires\ntrès pratiques.</p>\n<p>Deux postulats avant de commencer :</p>\n<ul>\n<li>Pourquoi JavaScript ? En cohérence avec le workflow que j'utilise.</li>\n<li>Cet article n'a pas pour but d'apprendre à écrire du JavaScript avec\nNode.js/iojs.</li>\n</ul>\n<h2>Hello world</h2>\n<p>Avant de commencer à coder, il va tout d'abord falloir créer deux fichiers qui\nseront nécessaires et obligatoires :</p>\n<pre><code class=\"hljs language-console\">// création du dossier\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir putaindecode-cli &amp;&amp; <span class=\"hljs-built_in\">cd</span> putaindecode-cli</span>\n\n// création de index.js\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> touch index.js</span>\n\n// création de package.json\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> touch package.json</span>\n</code></pre>\n<p>Le fichier <code>index.js</code> va se présenter comme ceci :</p>\n<pre><code>#!/usr/bin/env node\n// Cette ligne ou shebang permet de définir l'interpréteur de notre script, à savoir `node`\n\n// notre fameux hello world\nconsole.log(\"Hello world\")\n</code></pre>\n<p>Pour notre fichier <code>package.json</code>, deux méthodes possibles pour l'écrire, soit\nen faisant <code>npm init</code> puis suivre les instructions, soit adapter ce JSON :</p>\n<pre><code class=\"hljs language-console\">{\n  &quot;name&quot;: &quot;putaindecode-cli&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;description&quot;: &quot;Putaindecode cli&quot;,\n  &quot;keywords&quot;: [\n    &quot;cli&quot;,\n    &quot;npm&quot;\n  ],\n  &quot;author&quot;: &quot;magsout&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;repository&quot;: {\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;https://github.com/putaindecode/putaindecode-cli.git&quot;\n  },\n  &quot;engines&quot;: {\n    &quot;node&quot;: &quot;&gt;=0.10&quot;\n  },\n  &quot;homepage&quot;:&quot;https://github.com/putaindecode-cs/putaindecode-cli&quot;\n  &quot;bugs&quot;: {\n    &quot;url&quot;: &quot;https://github.com/putaindecode-cs/putaindecode-cli/issues&quot;\n  },\n  &quot;files&quot;: [\n    &quot;index.js&quot;\n  ],\n  &quot;dependencies&quot;: {},\n  &quot;devDependencies&quot;: {},\n  &quot;bin&quot;: {\n    &quot;putaindecode&quot;: &quot;index.js&quot;\n  }\n}\n</code></pre>\n<p>La ligne importante à ne surtout pas oublier :</p>\n<pre><code class=\"hljs language-console\">&quot;bin&quot;: {\n  &quot;putaindecode-cli&quot;: &quot;index.js&quot;\n}\n</code></pre>\n<p>Elle permettra de déterminer le script à exécuter lorsque la commande\n<code>putaindecode-cli</code> sera lancée.</p>\n<p>Si on vulgarise un peu le principe, en installant le script, le fichier\n<code>index.js</code> sera renommé en <code>putaindecode-cli.js</code> et sera copié dans le\nrépertoire adéquat (cela dépend de l'OS).</p>\n<p>Lorsque la commande <code>putaindecode-cli</code> sera exécutée, le shell va chercher le\nfichier exécutable en utilisant les répertoires listés dans la variable PATH.</p>\n<p>Si on suit ce raisonnement, l'installation d'un script écrasera automatiquement\nl'ancienne version ou tout script de même nom.</p>\n<p>Pour s'assurer qu'il n'existe pas d'autres commandes portant le même nom, il est\nconseillé d'utiliser la commande : <code>which putaindecode-cli</code> qui ne retournera\nrien s'il n'y a aucun résultat :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">#</span><span class=\"bash\">putaindecode-cli ne retourne aucun résultat</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">which</span> putaindecode-cli</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">node est installé et accessible au path suivant</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">which</span> node</span>\n  /usr/local/bin/node\n</code></pre>\n<h2>Installation du script</h2>\n<p>Afin de vérifier que le script fonctionne correctement, il suffit tout\nsimplement d'exécuter dans le répertoire la commande : <code>./index.js</code>.</p>\n<p>Une erreur de droit ? Un petit chmod pour arranger ça : <code>chmod +x index.js</code>.</p>\n<p>À ce stade, si tout fonctionne bien, <code>Hello World</code> va s'afficher.</p>\n<p>Par contre, exécuter notre script de la sorte n'est pas très pratique, d'autant\nplus qu'il sera nécessaire de connaître à chaque fois le chemin vers le fichier.</p>\n<p>Il serait beaucoup plus simple de pouvoir exécuter le script comme une commande.\nComme pour tout package npm, cela se fait avec <code>npm install</code>.</p>\n<pre><code class=\"hljs language-console\">// installation en global du script\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install -g</span>\n\n// exécution de la commande\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> putaindecode-cli</span>\n\n// résultat de la commande\nHello world\n</code></pre>\n<p>Le script est maintenant accessible partout sur l'OS grâce à la commande\n<code>putaindecode-cli</code>. L'installation en global n'est pas absolument pas\nnécessaire, tout dépend de l'intérêt de votre script. Il est d'ailleurs souvent\npréférable de l'installer en local dans un projet avec <code>--save</code> ou <code>--save-dev</code>.</p>\n<h2>Installation des scripts de base</h2>\n<p>La puissance de <code>NPM</code> provient de son nombre impressionnant de packages mis à\ndisposition.</p>\n<p>Pour gagner du temps et éviter d'avoir à recoder la roue. Le script\n<code>putaindecode-cli</code> va avoir besoin de trois choses :</p>\n<ul>\n<li>une gestion des commandes (commande, argument, aide)</li>\n<li>une gestion des couleurs (notice, error, warning)</li>\n<li>une capacité à stopper proprement notre code.</li>\n</ul>\n<h3><code>commander</code></h3>\n<p>Pour les commandes avec en prime la gestion des arguments et de l'aide,\n<a href=\"https://github.com/tj/commander\">commander</a> est tout a fait adapté et répondra\npratiquement à tous nos besoins.</p>\n<p>Il est simple d'utilisation et très bien maintenu.</p>\n<p>Voici un exemple de ce qu'on peut faire :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* Default */</span>\nprogram.version(pkg.version);\n\n<span class=\"hljs-comment\">/* command */</span>\nprogram\n  .command(<span class=\"hljs-string\">&quot;command&quot;</span>)\n  .alias(<span class=\"hljs-string\">&quot;c&quot;</span>)\n  .description(<span class=\"hljs-string\">&quot;   command does something&quot;</span>)\n  .option(<span class=\"hljs-string\">&quot;-v, --verbose&quot;</span>, <span class=\"hljs-string\">&quot;Verbose&quot;</span>)\n  .option(<span class=\"hljs-string\">&quot;-f, --force&quot;</span>, <span class=\"hljs-string\">&quot;Force installation&quot;</span>)\n  .action(commandAction)\n  .on(<span class=\"hljs-string\">&quot;--help&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;  Example:&quot;</span>);\n    <span class=\"hljs-built_in\">console</span>.log();\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;     command does something&quot;</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;     $ putaindecode-cli command&quot;</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;&quot;</span>);\n  });\n\n<span class=\"hljs-comment\">/* help */</span>\nprogram.on(<span class=\"hljs-string\">&quot;--help&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;  Examples:&quot;</span>);\n  <span class=\"hljs-built_in\">console</span>.log();\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;     command do something&quot;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;     $ putaindecode-cli command&quot;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;&quot;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;     Force command does something&quot;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;     $ putaindecode-cli command -f&quot;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;&quot;</span>);\n});\n\nprogram.parse(process.argv);\n\n<span class=\"hljs-comment\">/* help by default */</span>\n<span class=\"hljs-keyword\">if</span> (!program.args.length) program.help();\n</code></pre>\n<h3><code>chalk</code></h3>\n<p><em>Null</em> besoin de faire un cours sur les couleurs, mais l'affichage d'une notice\nest bien plus pertinent avec sa couleur associée. C'est à ce moment qu'entre en\njeu <a href=\"https://github.com/sindresorhus/chalk\">chalk</a>. Relativement simple à mettre\nen place et à utiliser :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;chalk&quot;</span>);\n\n<span class=\"hljs-comment\">/* var */</span>\n<span class=\"hljs-keyword\">var</span> error = chalk.bold.red;\n<span class=\"hljs-keyword\">var</span> warn = chalk.yellow;\n<span class=\"hljs-keyword\">var</span> success = chalk.green;\n<span class=\"hljs-keyword\">var</span> notice = chalk.blue;\n\n<span class=\"hljs-comment\">/* code */</span>\n<span class=\"hljs-built_in\">console</span>.log(warn(<span class=\"hljs-string\">&quot;No command&quot;</span>));\n<span class=\"hljs-built_in\">console</span>.log(notice(<span class=\"hljs-string\">&quot;file modified !&quot;</span>));\n</code></pre>\n<h3><code>exit</code></h3>\n<p>Peu importe comment s'exécute son code, il est important de bien savoir\nmaitriser l'arrêt de son script. Pour ça, <code>process.exit()</code> nous sera bien utile.</p>\n<p>Dans le cas d'une erreur, la valeur de <code>exit</code> doit systématiquement être\nsupérieure à 0, et donc bien naturellement en cas de succès, elle doit être\négale à 0.</p>\n<p>Voici une\n<a href=\"http://www.virtsync.com/c-error-codes-include-errno\">liste des valeurs</a> de\n<code>exit</code> et de leurs correspondances.</p>\n<h2>Thanks god for our terminal</h2>\n<p>Si vous souhaitez voir quelques exemples de projets avec des commandes et des\nmises en situations intéressantes, allez faire un tour sur ces projets :</p>\n<ul>\n<li><a href=\"https://github.com/cssnext/cssnext/blob/9aad8a94eaef5c73f3e925cc63ede6945403a520/src/bin.js\">cssnext</a></li>\n<li><a href=\"https://github.com/sindresorhus/trash-cli/blob/master/cli.js\">trash</a></li>\n</ul>\n<p>Je vous invite également à visionner la\n<a href=\"http://blog.clement.delafargue.name/posts/2015-02-25-declarative-cli-parsing-in-js.html\">vidéo</a>\nde <a href=\"https://twitter.com/clementd\">Clement Delafargue</a> qui a fait une\nprésentation sur le sujet en début d'année.</p>\n<p>À partir de là on dispose d'une bonne base pour refaire le monde et accroître la\nflemme du développeur que l'on est en automatisant tout plein de tâches.</p>\n"}