{"slug":"le-web-merite-de-meilleures-primitives","filename":"2021-04-12-le-web-merite-de-meilleures-primitives","title":"Le web mérite de meilleures primitives","date":"Mon, 12 Apr 2021 00:00:00 GMT","draft":false,"meta":{"title":"Le web mérite de meilleures primitives","date":"2021-04-12T00:00:00.000Z","author":"zoontek","slug":"le-web-merite-de-meilleures-primitives"},"body":"<p>Il est souvent reproché aux développeurs front-end d'utiliser des abstractions\ninutilement complexes sous couvert d'une volonté de &quot;s'amuser&quot; avec celles-ci\nplutôt que de concevoir des sites simples, accessibles et performants.</p>\n<p>Personnellement, j'apprécie énormément\n<a href=\"https://necolas.github.io/react-native-web/\">react-native-web</a> et ai tendance à\nm'en servir systématiquement et ce même si la plupart du temps il n'est même pas\nquestion de partage de code avec une application mobile.</p>\n<p>Ce qui veut dire que je suis régulièrement tenu d'écrire du code de la sorte:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { Pressable } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-native&quot;</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pressable</span>\n  <span class=\"hljs-attr\">accessibilityRole</span>=<span class=\"hljs-string\">&quot;button&quot;</span>\n  <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{({</span> <span class=\"hljs-attr\">hovered</span>, <span class=\"hljs-attr\">focused</span>, <span class=\"hljs-attr\">pressed</span> }) =&gt;</span> [\n    { backgroundColor: &quot;red&quot; },\n    hovered &amp;&amp; { backgroundColor: &quot;blue&quot; },\n    focused &amp;&amp; { backgroundColor: &quot;green&quot; },\n    pressed &amp;&amp; { backgroundColor: &quot;pink&quot; },\n  ]}\n&gt;\n  Click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Pressable</span>&gt;</span></span>;\n</code></pre>\n<p>Vous allez me dire que c'est horrible. J'utilise une <code>&lt;div&gt;</code> en lieu et place\nd'un <code>&lt;button&gt;</code>, du CSS-in-JS pour styliser mon élément et je fais même\ntotalement l'impasse sur l'usage des pseudo-classes <code>:hover</code> et <code>:focus</code>!</p>\n<p>Pourquoi diable s'acharner à réimplémenter ce qui existe de base sur la\nplateforme web et qui fonctionne bien?</p>\n<h2>Qui fonctionne bien, vous êtes sûrs?</h2>\n<p>Déconstruisons donc cet exemple. Je souhaite créer un bouton rouge qui sera bleu\nau survol, vert quand il aura le focus et rose quand il sera pressé.</p>\n<h3>Le cas du survol</h3>\n<p>Implémentons notre solution naïvement:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">button</span> {\n  <span class=\"hljs-attribute\">appearance</span>: none;\n  <span class=\"hljs-attribute\">background-color</span>: red;\n}\n\n<span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">background-color</span>: blue;\n}\n</code></pre>\n<p>Cela ne suffira pas. En effet, mon bouton deviendra bleu lors d'un appui sur\nsmartphone ou autre appareil tactile.</p>\n<p><img src=\"/public/images/articles/2021-04-12-le-web-merite-de-meilleures-primitives/BlueButton.png\" alt=\"Bouton bleu\" /></p>\n<p>Heureusement, il existe une bride de solution: le media query\n<a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/@media/hover\"><code>hover</code></a>.</p>\n<blockquote>\n<p>hover est une caractéristique média CSS (cf. @media) qui permet de vérifier si\nle dispositif de saisie/d'entrée principal permet à l'utilisateur de survoler\nles éléments.</p>\n</blockquote>\n<p>Il serait donc possible de corriger le problème de la sorte:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">button</span> {\n  <span class=\"hljs-attribute\">appearance</span>: none;\n  <span class=\"hljs-attribute\">background-color</span>: red;\n}\n\n<span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">hover:</span> hover) {\n  <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n    <span class=\"hljs-attribute\">background-color</span>: blue;\n  }\n}\n</code></pre>\n<p>Sauf qu'encore une fois, tout cela reste imparfait. Depuis peu, il est devenu\npossible d'utiliser un périphérique de pointage (type souris donc, avec son\ncurseur) sur iPad et, je vous le donne en mille, le dispositif d'entrée\nprincipal restant l'écran tactile, les styles présents dans le media query en\nquestion ne seront pas activés lors du survol du curseur.</p>\n<p>L'affaire serait donc insoluble? Pas nécessairement, mais résoudre tous les\nproblèmes inhérents à chaque appareil et situation afin de normaliser le\ncomportement de cette interaction pourtant basique n'est au final pas mince\naffaire, comme peuvent l'attester l'implémentation des abstractions offertes par\n<a href=\"https://github.com/necolas/react-native-web/blob/0.15.5/packages/react-native-web/src/modules/useHover/index.js\"><code>react-native-web</code></a>\nou\n<a href=\"https://github.com/adobe/react-spectrum/blob/react-aria%403.5.0/packages/@react-aria/interactions/src/useHover.ts\"><code>@react-aria</code></a>.</p>\n<h3>Le cas du focus</h3>\n<p>Rebelote, traitons le problème naïvement:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">button</span> {\n  <span class=\"hljs-attribute\">appearance</span>: none;\n  <span class=\"hljs-attribute\">background-color</span>: red;\n}\n\n<span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:focus</span> {\n  <span class=\"hljs-attribute\">background-color</span>: green;\n}\n</code></pre>\n<p>Tout comme pour le cas du survol, cette solution est loin d'être parfaite\npuisque le style appliqué normalement au focus sera visible au clic.</p>\n<p><img alt=\"Bouton vert\" src=\"/public/images/articles/2021-04-12-le-web-merite-de-meilleures-primitives/GreenButton.png\" style=\"max-width: 180px\"></p>\n<p>Pire encore, l'apparition du <strong>focus-ring</strong>, pourtant indispensable à une bonne\nnavigation au clavier, poussera grand nombre de développeurs non sensibilisés au\nsujet à appliquer le fameux <code>outline-style: none</code> et à anéantir une grande part\nde l'accessibilité du site au passage.</p>\n<p>Mais tout comme le cas du survol, il existe une bride de solution: la\npseudo-classe\n<a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/:focus-visible\"><code>:focus-visible</code></a>.</p>\n<blockquote>\n<p>La pseudo-classe :focus-visible s'applique lorsqu'un élément correspond à la\npseudo-classe focus et que l'agent utilisateur détermine, via une heuristique,\nque le focus devrait être mis en évidence sur l'élément (la plupart des\nnavigateurs affichent un contour en surbrillance par défaut).</p>\n</blockquote>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">button</span> {\n  <span class=\"hljs-attribute\">appearance</span>: none;\n  <span class=\"hljs-attribute\">background-color</span>: red;\n}\n\n<span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:focus-visible</span> {\n  <span class=\"hljs-attribute\">background-color</span>: green;\n}\n</code></pre>\n<p>Et tout comme le media query <code>hover</code>, cette solution reste imparfaite: si l'on\nmet de côté son support navigateur restreint à l'heure où je rédige cet article,\non peut également pointer du doigt le fait que le focus reste &quot;cassé&quot; en\nJavaScript. En effet, il n'est pas encore question d'un événément\n<code>focus-visible</code> et l'événement <code>focus</code> reste déclenché lors du clic sur certains\nnavigateurs.</p>\n<p>Il vous sera donc très difficile de réagir à une réelle intention de focus, sauf\nsi, encore une fois, vous utilisez des abstractions offertes par\n<a href=\"https://github.com/necolas/react-native-web/blob/0.15.5/packages/react-native-web/src/modules/modality/index.js\"><code>react-native-web</code></a>,\n<a href=\"https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/interactions/src/useFocusVisible.ts\"><code>@react-aria</code></a>\nou autre.</p>\n<h3>Le cas du <code>&lt;button&gt;</code></h3>\n<p>Reste un dernier point: l'usage d'une <code>&lt;div&gt;</code> à la place d'un <code>&lt;button&gt;</code>.\nL'argument souvent avancé contre cela est le suivant :</p>\n<blockquote>\n<p>Utiliser une <code>&lt;div&gt;</code> pour réimplémenter un bouton en lieu et place d'un\n<code>&lt;button&gt;</code> peut ruiner l'accessibilité de celui-ci.</p>\n</blockquote>\n<p>Je suis absolument d'accord avec ce point. Réimplémenter le comportement d'un\nbouton en partant de zéro est complexe, vous mènera certainement à commettre un\ntas d'erreurs et je vous le déconseille fortement.</p>\n<p>Seulement ici ce n'est pas le cas : j'utilise une abstraction qui a correctement\nété pensée et ne souffre d'aucun réel défaut d'accessibilité si on la compare à\nun <code>&lt;button&gt;</code>. Sachant qu'en plus il y a encore très peu, les <code>&lt;button&gt;</code>\nsouffraient de\n<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=700029#c24\">problèmes de styling</a>\net que donc, il m'est nécessaire soit d'en tenir compte, soit de ne pas\nsupporter certaines versions de navigateurs pourtant récentes.</p>\n<p>Si j'ai ce composant <code>&lt;Pressable&gt;</code> à ma disposition, qui a le bon goût de ne pas\nsouffrir des problèmes présentés plus haut et réagit tel que la logique le\nvoudrait lors du survol, du focus ou encore de l'appui… Pourquoi devrais-je donc\nm'en passer?</p>\n<h2>Autres manques, en vrac</h2>\n<h3>Le focus-trapping</h3>\n<p>Afin de faciliter l'accessibilité clavier, il est important de &quot;capturer&quot; et de\nborner le focus lors de l'apparition d'une modale, par exemple (ce qu'on appelle\ncommunément le <code>focus-trapping</code>).</p>\n<figure>\n  <img src=\"/public/images/articles/2021-04-12-le-web-merite-de-meilleures-primitives/FocusTrappingFail.png\" />\n  <figcaption>Exemple d'échec de focus trapping: il est possible de sélectionner le champ de recherche à l'aide de son clavier</figcaption>\n</figure>\n<p>Il existe actuellement 2 potentielles solutions à ce problème. L'une, haut\nniveau, est l'élément natif\n<a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/dialog\"><code>&lt;dialog&gt;</code></a>,\nl'autre, plus bas niveau (et plus intéressante selon moi) est l'attribut\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\"><code>inert</code></a>.\nCes solutions ne sont malheureusement pour le moment pas très bien, voire pas du\ntout, supportées par les navigateurs.</p>\n<h3>Les popups</h3>\n<p>Tout comme les modales, elles sont présentes dans une majeure partie des\ninterfaces web actuelles et pourtant il n'existe actuellement aucune méthode\nsimple et sans abstraction qui nous permette d'en créer une.</p>\n<p>Dans un futur proche, peut-être (je l'espère) que\n<a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/Popup/explainer.md\">la proposition de Microsoft</a>\nsera retenue, mais en attendant, bon courage pour implémenter ça &quot;à la main&quot; si\nvous souhaitez que celles-ci soient fonctionnelles sur tous les navigateurs,\ntout type d'appareil et de surcroît parfaitement accessibles.</p>\n<h3>Plus? Plus!</h3>\n<p>Qu'en est-il de tout ces besoins devenus quasiment primaires:</p>\n<ul>\n<li>Les masques sur les champs texte?</li>\n<li>Un élément <code>&lt;switch&gt;</code>?</li>\n<li>Les listes virtualisées (avec recherche fonctionnelle au sein de la page)?</li>\n<li>Le RTL (right-to-left) simplifié?</li>\n<li>Les containers queries en CSS?</li>\n<li>Le champ texte <code>type=number</code>\n(<a href=\"https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/\">actuellement cassé</a>)?</li>\n<li>… la liste est potentiellement <strong>infinie</strong></li>\n</ul>\n<h2>Du coup, qu'est ce qu'on fait?</h2>\n<p>Avant tout, arrêtons de blâmer les développeurs qui découvrent aujourd'hui cette\ncomplexité monstre et cessons de leur déconseiller d'utiliser des abstractions,\nde leur dire de &quot;juste apprendre le HTML, CSS et JS&quot; car ce comportement est\ndangereux et ne tient pas compte d'une chose : si vous avez vu vécu l'évolution\ndu web et vu apparaitre des courants tels que le responsive design, de nouveaux\ntypes d'appareils tels que les smartphones et eu le temps de vous adapter à ces\nchangements, ce n'est pas le cas de développeurs plus juniors qui se retrouvent\naujourd'hui face à une quantité astronomique de problématiques, sans courbe\nd'apprentissage naturelle guidée par l'évolution des usages.</p>\n<p>L'accessibilité vous tient à cœur? Parfait. Conseillez-leur d'utiliser une\nabstraction simple qui leur garantira un bon résultat, plutôt que de leur\nconseiller de devenir un expert absolu sur le domaine afin de ne pas se tirer\nune balle dans le pied. S'il sont intéressés par le sujet, ils se pencheront sur\nla façon dont est conçue celle-ci, s'ils ne le sont pas, et bien, au moins les\nutilisateurs de leurs sites bénéficieront d'une meilleure accessibilité. Et je\npense que c'est ce qui importe le plus: <strong>l'objectif est plus important que le\nmoyen</strong>.</p>\n<p>Ensuite, posons-nous réellement la question de la nécessité de ces ajouts\ncontinuels de solutions de haut niveau dans la plateforme web, qui débarquent\nsans que jamais rien ne semble vraiment être officiellement déclaré caduque. En\neffet, toutes les solutions énoncées précédemment viennent ou viendront <strong>en\nplus</strong> de tout ce qui peut déjà exister.</p>\n<p><strong>La plateforme déborde</strong>. J'en prends pour exemple une donnée qui me semble\ntotalement absurde, le nombre de propriétés CSS actuel:\n<a href=\"https://css-tricks.com/how-many-css-properties-are-there/\">520 (+132 en attente)</a>.\nOutre le fait que cela rend extrêmement complexe l'apparition de nouveaux\nnavigateurs web, cela rend la charge mentale du développeur <strong>incommensurable</strong>.\nIl en va de même avec l'évolution de la syntaxe JavaScript, l'augmentation du\nnombre de sélecteurs CSS, l'apparition de\n<a href=\"https://developer.mozilla.org/fr/docs/Web/API\">nouvelles APIs</a>, etc.</p>\n<p>Imaginez si demain un nouveau paradigme d'utilisation venait à apparaitre (une\ninteraction autre que le touch, par exemple) ou si un nouveau type de pattern UI\ngagnait en popularité (comme a pu le faire le switch). Devrait-on continuer à\nempiler…? Ou devrait-on accepter le fait que le web a plus que jamais besoin\nd'abstractions au dessus de concepts bas niveau, que celles-ci soient des\nbibliothèques exécutées au runtime ou carrément des langages de plus haut niveau\nqui compileront vers du HTML, CSS et JS en guise de bytecode?</p>\n<p>L'avenir est incertain, imitez-le.</p>\n"}