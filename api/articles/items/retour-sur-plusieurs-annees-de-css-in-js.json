{"slug":"retour-sur-plusieurs-annees-de-css-in-js","filename":"2021-02-08-retour-sur-plusieurs-annees-de-css-in-js","title":"Retour sur plusieurs ann√©es de CSS-in-JS","date":"Mon, 08 Feb 2021 00:00:00 GMT","draft":false,"meta":{"title":"Retour sur plusieurs ann√©es de CSS-in-JS","date":"2021-02-08T00:00:00.000Z","author":"bloodyowl","slug":"retour-sur-plusieurs-annees-de-css-in-js"},"body":"<p>Voil√† maintenant plus de 4 ans, je vous partageais <a href=\"/articles/pourquoi-j-ai-arrete-d-utiliser-css/\">les raisons me poussant √† me d√©tourner de mon amour initial pour CSS</a>, alors que je m'en allais vers des alternatives qui proposaient des solutions aux probl√®mes que je rencontrais quotidiennement.</p>\n<p>L'article original, √©crit dans la fougue de la jeunesse, utilisait un ton dit de &quot;petit merdeux&quot;. J'ai bien conscience que √ßa n'avait √† l'√©poque pas aid√© √† faire passer le message souhait√©, comme peuvent <a href=\"http://www.glazman.org/weblog/dotclear/index.php?post/2016/06/18/Pourquoi-il-n-aurait-pas-du-arr√™ter-d-utiliser-CSS\">en t√©moigner</a> <a href=\"/articles/pourquoi-j-ai-arrete-d-utiliser-css/#disqus_thread\">les diff√©rents retours</a>. Je vais donc profiter de cette r√©trospective pour r√©sumer son propos un peu plus finement.</p>\n<h2>Arr√™ter de sacraliser CSS</h2>\n<p>Au d√©part, CSS √©tait de loin mon langage pr√©f√©r√© de la stack web. J'ai ador√© bidouiller avec ce langage pendant des ann√©es, faire le malin avec des hacks qui me permettaient de faire les rendus que je voulais. <strong>J'ai ador√© CSS</strong>. Je trouvais √ßa chouette d'utiliser des pseudo-√©l√©ments pour faire des bords arrondis, de fabriquer mes sprites et de factoriser mes styles en commun derri√®re des s√©lecteurs.</p>\n<p>Puis vint le travail en √©quipe et les projets plus gros. Chacun notre tour on casse quelque chose, quelque part dans le projet. On change le style appliqu√© √† un s√©lecteur et √ßa applique ces styles √† un endroit auquel on ne pensait pas. On corrige, √ßa p√®te quelque chose ailleurs. Le probl√®me, c'est que <strong>les s√©lecteurs s'appliquent globalement sur l'int√©gralit√© du projet</strong>. Qui plus est, l'application d'un style est un calcul savant: il d√©pend non seulement d'un s√©lecteur, de l'<strong>endroit o√π il est d√©fini</strong> dans la feuille de style (les derniers √©crasent les premiers), mais aussi de ce qu'on appelle <strong>sa sp√©cificit√©</strong> (une sorte de score de pr√©cision, qui fait que plus un s√©lecteur est consid√©r√© comme &quot;fin&quot; par le syst√®me, plus il prendra la pr√©c√©dence). Si cette complexit√© n'√©tait pas suffisante, ce ne sont pas des d√©clarations de style indivisibles qui s'√©crasent les unes les autres, mais les <strong>propri√©t√©s individuelles</strong> qu'elles contiennent, comme un gros <code>merge</code> complexe dont l'ordre varie selon tous les param√®tres cit√©s au dessus pour chaque √©l√©ment. Il faut donc inspecter minutieusement ce qui s'applique d√©j√† √† un √©l√©ment pour savoir quoi √©craser ou non.</p>\n<p>Naturellement, la feuille de style devient rapidement une course √† la sp√©cificit√© et on se retrouve avec des styles de plus en plus compliqu√©s √† annuler lorsqu'on veut appliquer une exception. √áa devient rapidement un <strong>cauchemar de maintenabilit√©</strong> : √† chaque √©tape du projet on peut casser des √©l√©ments sans avoir voulu les changer, on doit <strong>tout</strong> rev√©rifier √† chaque changement.</p>\n<p>On peut ceci dit y rem√©dier, en se mettant d'accord sur des <strong>m√©thodologies</strong> qui feront en sorte d'√©viter ce genre d'effets de bord, mieux vaut pr√©venir que gu√©rir. C'est <strong>BEM</strong> (Block Element Modifier) qui retiendra mon attention, avec une logique plus simple √† aborder que la majorit√© des autres m√©thodologies : on utilise des s√©lecteurs avec <strong>la m√™me sp√©cificit√©</strong>, des attributs <code>class</code>, qu'on nomme tous d'une certaine fa√ßon. Ce nommage indiquant clairement la nature et le r√¥le de chaque √©l√©ment, on isole chaque bloc r√©utilisable derri√®re son <strong>namespace</strong>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;UserProfile&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;UserProfile-avatar&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;...&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;UserProfile-username&quot;</span>&gt;</span> ... <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>D√®s lors, on change de mod√®le mental : en pratique les s√©lecteurs ne sont plus des instructions complexes pour trouver des √©lements de notre page selon leur contexte, mais un <strong>simple cl√©-valeur</strong>. HTML et CSS <strong>partagent d√©sormais cette cl√©</strong>, et √ßa simplifie le travail de tout le monde : une approche unifi√©e pour toute l'√©quipe, <strong>moins de conflits</strong> dans l'application des styles, <strong>moins de regressions</strong>, et une <strong>meilleure &quot;recherchabilit√©&quot;</strong> (la cl√© √©tant partag√©e entre le markup et le style). Le seul d√©tail qui fait tiquer c'est que les noms de <code>class</code> sont quand m√™me un poil long et r√©p√©titifs.</p>\n<p>La communaut√© r√©clame depuis des ann√©es un standard donnant la possibilit√© de cr√©er des <strong>styles &quot;scop√©s&quot;</strong>, c'est √† dire <strong>limit√©s dans leur port√©</strong>, ce qui r√©soudrait notre probl√®me de noms trop longs. Et c'est une solution technique, hors standards, qui va apporter une solution : les <strong>CSS modules</strong>. C'est une technique d'injection des styles qui transforme les s√©lecteurs en les <strong>pr√©fixant de cl√©s uniques, correspondant au scope</strong>. L√† o√π BEM nous for√ßait √† maintenir notre namespace √† la main, on a d√©sormais un syst√®me capable de s'en charger, et ce syst√®me est moins faillible que nous.</p>\n<p>√Ä mon sens, <strong>les CSS modules sont la premi√®re occurence de CSS-in-JS</strong>. Probablement une question de syntaxe, mais cette technique est relativement bien accept√©e. Suite √† la popularisation de ce syst√®me, les id√©es fusent et les solutions CSS-in-JS se multiplient, chacune avec son approche sur le sujet.</p>\n<p>Qu'est-ce qu'on peut tirer de √ßa ? Que oui, comme le disent ses d√©fenseurs, CSS est puissant, son syst√®me d'application des styles l'est tr√®s certainement. Ce n'est pas pour autant qu'il est <strong>pratique</strong> et <strong>adapt√©</strong> √† de gros projets qu'on doit maintenir dans le temps. La complexit√© qui en d√©coule <strong>impose aux devs une forme de rigueur</strong>, faute de quoi les regressions sont in√©vitables. <strong>√áa a un co√ªt, en temps pass√© et en √©nergie mentale d√©ploy√©e</strong>.  Si cette rigueur peut √™tre d√©l√©gu√©e √† une machine, quelle raison aurait-on de s'en priver ?</p>\n<p>CSS a beau n'√™tre qu'un <strong>langage informatique</strong>, on a parfois l'impression qu'il est consid√©r√© comme une <strong>doctrine religieuse</strong>, et on m'a souvent reproch√© de promouvoir des approches qui d√©l√®guent la charge mentale induite √† une machine, avec l'argument que je ne savais pas faire de CSS. Parce que CSS, par sa volont√© propre, voulait qu'il en soit autrement.</p>\n<p>Non, CSS n'a pas √©t√© originalement pr√©vu pour √™tre utilis√© comme √ßa. Et c'est pas grave, c'√©tait il y a 25 ans (environ un mill√©naire en ann√©es tech). Les usages, les besoins, tout √ßa a √©volu√©. <strong>Il y a 25 ans il √©tait inimaginable que le web puisse devenir ce qu'il est aujourd'hui</strong>, avec des interfaces incroyablement riches, permettant de faire √† peu pr√®s ce qu'on veut depuis un navigateur. Pourquoi cette vision originale devrait nous freiner dans nos id√©es ? Pourquoi devrait-elle nous imposer une difficult√© ? On ne parle pas d'un probl√®me √©thique complexe : qu'on d√©l√®gue ou pas, qu'on automatise ou pas, √ßa ne change rien √† personne. Il s'agit juste d'un attachement profond √† une doctrine.</p>\n<p>Je pense qu'il est temps d'<strong>arr√™ter de sacraliser tous les aspects de CSS</strong>. Je suis admiratif de son mod√®le de boite, de styling, et je pense honn√™tement que c'est un des outils permettant l'expression du style de la mani√®re la plus simple possible. En revanche, je trouve sa fa√ßon de r√©soudre les styles compl√®tement obsol√®te et risqu√©e dans les contextes o√π je l'utilise.</p>\n<p>J'utilise les parties de CSS qui me permettent de faire ce que je veux (pour simplifier, tout ce qu'on trouve entre des accolades), et je d√©l√®gue la gestion des autres parties √† une machine.</p>\n<h2>CSS-in-JS, qu'est-ce que √ßa apporte ?</h2>\n<p>Alors maintenant, au bout de 4/5 ans, qu'est-ce que √ßa donne, CSS-in-JS ? Est-ce que c'√©tait une immense connerie ? Est-ce que c'est finalement une bonne id√©e ?</p>\n<p>Pour expliquer un peu mon usage: je travaille sur une <strong>web app dont je ma√Ætrise le markup</strong> (si ce n'est pas votre cas, il y a fort √† parier que CSS-in-JS vous pose plus de probl√®mes que de solutions ‚ö†Ô∏è).</p>\n<p>J'utilise deux &quot;genres&quot; de CSS-in-JS. Mon application se divise en deux parties: un widget dans une iframe-sourceless et un dashboard. Le widget utilise pour des raisons pratiques des styles inline (l'attribut style, oui oui üò±) et le dashboard la biblioth√®que <a href=\"https://emotion.sh/docs/introduction\">emotion</a>.</p>\n<p>Eh bien je suis tr√®s content des deux. <strong>Je n'ai pas eu la moindre r√©gression li√©e √† de l'application de style depuis que j'utilise CSS-in-JS</strong>.</p>\n<p>Ma mani√®re de d√©finir et d'appliquer un style √† un √©l√©ment ressemble √† √ßa (attention, c'est du <a href=\"https://rescript-lang.org\">ReScript</a>):</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> on stocke la sp√©cification dans une variable\n<span class=\"hljs-keyword\">module</span> <span class=\"hljs-module-identifier\">Styles</span> = {\n  <span class=\"hljs-keyword\">open</span> <span class=\"hljs-module-identifier\">Css</span>;\n  <span class=\"hljs-keyword\">let</span> callToAction =\n    style(<span class=\"hljs-literal\">[</span>\n      backgroundColor(<span class=\"hljs-module-identifier\">BeOpTheme</span>.mainGreen<span class=\"hljs-operator\">-&gt;</span>hex),\n      fontSize(<span class=\"hljs-number\">16</span><span class=\"hljs-operator\">-&gt;</span>px),\n      padding4(~left=<span class=\"hljs-number\">40</span><span class=\"hljs-operator\">-&gt;</span>px, ~right=<span class=\"hljs-number\">40</span><span class=\"hljs-operator\">-&gt;</span>px, ~top=<span class=\"hljs-number\">13</span><span class=\"hljs-operator\">-&gt;</span>px, ~bottom=<span class=\"hljs-number\">16</span><span class=\"hljs-operator\">-&gt;</span>px),\n      borderRadius(<span class=\"hljs-number\">26</span><span class=\"hljs-operator\">-&gt;</span>px),\n      color(<span class=\"hljs-string\">&quot;fff&quot;</span><span class=\"hljs-operator\">-&gt;</span>hex),\n      textAlign(center),\n    <span class=\"hljs-literal\">]</span>)\n}\n<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> on passe cette variable √† l&#x27;√©l√©ment souhait√©\n&lt;<span class=\"hljs-module-identifier\">TouchableOpacity</span> onPress&gt;\n  &lt;div className=<span class=\"hljs-module-identifier\">Styles</span>.callToAction&gt;\n    title\n  &lt;/div&gt;\n&lt;/<span class=\"hljs-module-identifier\">TouchableOpacity</span>&gt;\n</code></pre>\n<p>Que vous trouviez √ßa <strong>joli ou moche, l√† n'est pas le sujet</strong>. La machine fait ce qu'on lui dit. Elle g√©n√®re un nom de <code>class</code> en faisant un hash des styles, cette <code>class</code> <strong>ne pourra d√©clencher aucun effet de bord</strong> ailleurs dans l'application.</p>\n<p>√áa m'a rendu la gestion des styles tellement <strong>b√™te et simple</strong> qu'il n'y a pas grand chose √† dire dessus. <strong>J'assigne √† une variable une sp√©cification de style</strong>, et <strong>je donne cette variable √† l'√©l√©ment</strong> sur lequel je la veux appliqu√©e, et ce sera le seul style appliqu√© √† mon √©l√©ment. <em>That's it</em>. √áa √©limine une cat√©gorie enti√®re de probl√®mes, me laissant l'occasion de me concentrer sur d'autres choses. Vu que j'utilise une biblioth√®que typ√©e qui s'assure qu'une propri√©t√© re√ßoit une valeur d'un type attendu : <strong>j'√©cris du CSS avec des petites roues</strong>, √ßa m'√©vite m√™me de laisser passer des fautes de frappe.</p>\n<p>Et ce qui √©taient autrefois des casse-t√™tes immenses sont g√©r√©s automatiquement : <strong>√ßa √©limine les styles morts</strong> facilement, ce qui est virtuellement infaisable √† grande √©chelle (ici, c'est simplement une variable, et on sait tr√®s facilement d√©tecter les variables inutilis√©es). C'est m√™me capable d'<strong>extraire les styles critiques au rendu de la page</strong>, automatiquement !</p>\n<p>Quand je reviens √† l'occasion sur des trucs n√©cessitant des s√©lecteurs CSS (pour des choses o√π je ne ma√Ætrise pas le markup, et c'est un cas d'usage tr√®s l√©gitime), je r√©alise √† quel point j'avais accept√© une complexit√© incroyable parce que c'√©tait la seule fa√ßon. Quand j'y r√©fl√©chis bien, pour styliser des √©l√©ments, j'√©tais oblig√© de me <strong>cr√©er une cartographie mouvante d√©pendant d'un algorithme de r√©solution dont je n'avais pas forc√©ment les param√®tres √† tout instant donn√©</strong>.</p>\n<p>Les s√©lecteurs repr√©sentent une charge mentale √©norme qui est <strong>√©vitable</strong>. C'est √ßa, la killer feature de CSS-in-JS.</p>\n<p>La puissance des s√©lecteurs complexes CSS ne <strong>valent pas le coup pour moi</strong> tant que leur <a href=\"/articles/tradeoffs\">balance b√©n√©fice/risque</a> est plus faible que l'alternative. <strong>Si exprimer la m√™me chose que le s√©lecteur CSS avec du JS est plus lisible et maintenable, je ne vais pas h√©siter</strong>.</p>\n<p>C'est bien d'avoir un syst√®me ultra-puissant qui impose de d√©ployer une √©nergie folle. Je pr√©f√®re √™tre capable de retourner dans mon code au quotidien <a href=\"/articles/introduction-a-rud\">sans avoir √† me faire des n≈ìuds au cerveau</a>.</p>\n<h2>Mais √ßa casse le web !</h2>\n<p>C'est un des nombreux arguments d'autorit√© qu'on a entendu au fil des ann√©es. Les technologies telles que CSS-in-JS, <strong>√ßa casserait le web</strong>.</p>\n<p>Le blog que vous √™tes en train de lire est <a href=\"/articles/comment-on-a-fait-ce-site\"><strong>une application web qui utilise CSS-in-JS</strong></a>. Est-ce qu'il casse le web ? Est-ce √ßa vous emp√™che de lire son contenu avec les styles d√©sactiv√©s ? Est-ce que √ßa vous emp√™che de parcourir le site sans JavaScript ? Essayez !</p>\n<p><strong>Ce que le navigateur re√ßoit, il est parfaitement capable de l'interpr√©ter</strong>.</p>\n<p><strong>√áa ne change rien au r√©sultat final</strong>, et √ßa facilite la vie des gens qui travaillent dessus au quotidien. <a href=\"/articles/2021-01-29-ecrivez-du-code-stupide\">Pourquoi on s'en priverait ?</a> √Ä l'heure o√π l'immense majorit√© du code qu'on √©crit √† destination d'un navigateur passe par une √©tape de compilation (que ce soit un pr√©processeur, un minifier‚Ä¶), pourquoi ne pas aller au bout et consid√©rer la plateforme web comme une &quot;compilation target&quot; ? Pourquoi ne pas s'autoriser une abstraction qui nous permet de travailler plus confortablement pour <strong>un r√©sultat √©quivalent, sinon meilleur</strong> ?</p>\n<h2>Pourquoi des r√©actions si √©pidermiques face √† CSS-in-JS ?</h2>\n<p>Je pense qu'il est difficile d'envisager que <strong>nos connaissances puissent devenir obsol√®tes</strong>, particuli√®rement quand la connaissance a √©t√© difficile √† acqu√©rir. Tous les hacks CSS de mes d√©buts n'ont plus cours aujourd'hui, mes vieilles techniques ECMAScript3 sont inutiles depuis les mises √† jour du langage, mes fa√ßons de g√©rer les interfaces en manipulant scrupuleusement le DOM me paraissent compl√®tement archa√Øques maintenant que j'ai √† disposition <strong>des outils g√©rant toute cette complexit√©</strong> pour moi.</p>\n<p>√áa n'a pourtant pas servi √† rien : √ßa a forg√© la vision du d√©veloppement que j'ai aujourd'hui par la somme de mes exp√©riences. <strong>Chacun¬∑e d'entre nous a une vision singuli√®re gr√¢ce √† son parcours et c'est une excellente chose</strong>, parce que √ßa multiplie les points de vue et rend notre communaut√© plus riche.</p>\n<p>Mais il faut √™tre capable d'<strong>archiver son savoir</strong>, particuli√®rement dans les domaines technologiques o√π l'√©volution est rapide, il faut toujours partir du principe que <strong>l'utilit√© de nos connaissances n'est pas intemporelle</strong>.</p>\n<p>Demain, avec l'exp√©rience collective accumul√©e et les progr√®s qu'elle induira, <strong>ce qui a toujours √©t√© vrai ne le sera plus</strong>. Certaines limites se poussent, d'autres se rapprochent. Dans l'immense majorit√© des cas, c'est pour le mieux : les applications qu'on est capable de produire aujourd'hui √©taient encore impensables il y a quelques ann√©es. La vitesse √† laquelle on est capable de les produire l'√©tait encore plus.</p>\n<h2>Qu'est-ce qu'on peut souhaiter maintenant ?</h2>\n<p>Ce que je souhaite pour les ann√©es √† venir, c'est que les groupes de travail sp√©cifiant les standards web parviennent √† <strong>mettre le doigt sur les probl√®mes d√©crits ici</strong>, que je suis loin d'√™tre le seul √† exprimer.</p>\n<p>Qu'on arr√™te de se concentrer sur des nouveaux s√©lecteurs, des nouveaux syst√®mes de layout ne faisant rien de plus que ce qu'on pouvait d√©j√† faire avant ou des raccourcis pour des propri√©t√©s de transformation qui de toute fa√ßon d√©pendent de l'ordre dans lequel on les applique. Je ne dis pas que ce sont des propositions inutiles dans l'absolu, mais √ßa me semble √™tre tr√®s superficiel au regard des <strong>transformations structurelles</strong> que des outils maintenus par la communaut√© proposent.</p>\n<p>J'aimerais qu'on d√©ploie notre √©nergie √† <strong>rendre la plateforme meilleure</strong>, <strong>plus accessible</strong> et <strong>plus maintenable</strong>. Aujourd'hui on est encore forc√©s de g√©rer nous-m√™mes des &quot;pi√®ges √† focus&quot; pour nos modales, on n'a toujours pas de solution viable pour faire varier les propri√©t√©s CSS d'un conteneur selon l'espace √† sa disposition (on est cens√© pr√©voir tous les contextes o√π un composant r√©utilisable va s'afficher, puis qu'on ne peut le faire varier que selon une taille de fen√™tre), on n'a pas de brique native pour cr√©er des animations utilisant des propri√©t√©s physique performantes (les applications natives mobiles parviennent avec elles √† cr√©er des animations logiques, aidant √† la compr√©hension des interfaces). Ces probl√®mes ne sont pas nouveaux, certains sont identifi√©s depuis plus de 15 ans, et <strong>de l'ext√©rieur il ne semble pas qu'il s'agisse d'une priorit√©</strong> (m√™me si certains sont en cours de d√©veloppement, √ßa aura quand m√™me mis le temps).</p>\n<p>Quitte √† laisser la communaut√© d√©velopper ses alternatives, autant lui offrir de <strong>meilleures briques de base</strong> (au hasard, un syst√®me natif de liste virtualis√©e), une <strong>meilleure accessibilit√© par d√©faut</strong>, <strong>des arguments pour ramener sur le web des produits s'√©tant tourn√©s vers les stores</strong> mobiles pour y d√©livrer de meilleures exp√©riences : tout le monde y gagne.</p>\n<p>Plus on fera comme si les usages tels que ceux qui poussent les gens √† utiliser CSS-in-JS n'existent pas, ou pire, qu'ils ne sont pas l√©gitimes, plus la scission dans la communaut√© sera grande et <strong>moins le web y gagnera</strong>.</p>\n<p>Ali√©ner la communaut√© en expliquant avec d√©dain qu'une partie <strong>fait de la merde</strong>, qu'elle <strong>ne sait pas se servir des outils qu'on lui met √† disposition</strong>, √ßa ne m√®nera nulle part. <strong>Le narratif du <em>dev JS qui comprend rien √† CSS et donc fait du CSS-in-JS</em> n'a jamais tenu</strong>, et la plupart des adeptes de CSS-in-JS ont utilis√© (voire aim√©) CSS avant d'y trouver des limites pratiques.</p>\n<p>Au motif d'une doctrine ou d'une pr√©f√©rence esth√©tique, ne pas chercher √† comprendre <strong>pourquoi</strong> on se tourne vers de telles solutions, √† comprendre les <strong>limites structurelles</strong> que pose le mod√®le qu'offre et promeut CSS, c'est retarder ind√©finiment le moment o√π on pourra se poser autour d'une table pour parler de ces limites et y <strong>trouver des solutions</strong>.</p>\n<p>Quand la majorit√© des application devra utiliser <a href=\"https://developer.mozilla.org/fr/docs/WebAssembly\">WebAssembly</a> pour contourner les limites de la plateforme et √™tre en mesure de d√©livrer <strong>de meilleurs produits pour leurs utilisateur¬∑rice¬∑s</strong>, on pourra pas dire que ce sera sorti de nulle part.</p>\n"}