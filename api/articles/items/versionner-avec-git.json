{"slug":"versionner-avec-git","filename":"2013-11-06-versionner-avec-git","title":"Versionner avec Git","date":"Wed, 06 Nov 2013 00:00:00 GMT","draft":false,"meta":{"date":"2013-11-06T00:00:00.000Z","title":"Versionner avec Git","author":"madx","oldSlug":"git","slug":"versionner-avec-git"},"body":"<p>Chez <em>Putain de code !</em>, on aime se servir de <a href=\"http://git-scm.com/\">Git</a> (et de GitHub,\nmais c'est une autre histoire), même si certains d'entre nous (comme Lionel) ne\ns'en servent pas forcément bien.</p>\n<p>Pour éviter ce genre de mésaventures, on s'est dit qu'on allait consacrer une\nsérie d'articles à ce merveilleux gestionnaire de versions, et de vous en faire\nprofiter par la même occasion.</p>\n<p>Et si Git permet de faire à peu près ce qu'on veut sur un dépôt, vous verrez\nqu'on peut assez facilement réparer ses erreurs (et même celles des autres\nparfois !).</p>\n<h2>C'est quoi Git ?</h2>\n<p>Si vous êtes un développeur un tant soit peu consciencieux, vous utilisez un\ngestionnaire de versions pour suivre l'évolution de votre code. Non,\n<a href=\"http://roland.entierement.nu/blog/2008/01/22/cpold-la-poudre-verte-du-suivi-de-versions.html\">CPOLD</a> n'est pas un gestionnaire de versions.</p>\n<p>Git, c'est un gestionnaire de versions décentralisé, aussi connu sous le terme\nde DVCS (pour Distributed Version Control System) pour les amateurs.</p>\n<p>Le terme <em>distribué</em> est très important car c'est ce qui le différencie d'autres\ngestionnaires historiquement plus connus comme Subversion (SVN) ou le vénérable\nCVS.</p>\n<p>Ça veut dire que chaque développeur possède sa propre copie du dépôt, chez lui,\nlocalement, contrairement à un gestionnaire centralisé ou tout est… centralisé\nsur un même serveur (merci Captain Obvious).</p>\n<p>Git est principalement utilisable en ligne de commande, mais il existe des\ninterfaces graphiques sous les principaux OS du marché (OS X, Linux, Windows).\nIci, on va traiter de la ligne de commande, car c'est l'arme de base du bon\ndéveloppeur.</p>\n<p>Je vous passe l'installation, référez-vous à la documentation officielle pour\ncette partie. (Ça se résume souvent à un <code>nom-du-package-manager install git</code>)</p>\n<h2>Comment ça marche ?</h2>\n<p>Avant d'attaquer la partie pratique, on va s'attarder un peu sur comment Git\nfonctionne, parce qu'à mon sens c'est essentiel pour comprendre rapidement ce\nqu'il est possible de faire et pour se construire un modèle mental des\nopérations.</p>\n<p>Dans Git, les commits sont tous reliés avec leur(s) parent(s) comme les maillons\nd'une chaîne qui pourrait avoir des bifurcations. Chaque commit stocke des\ninformations sur l'état du dépôt à un instant donné (l'état complet, pas\nuniquement un diff).</p>\n<p>On construit cette chaîne et ses bifurcations en créant des commits, en\nbranchant et en fusionnant une branche dans une autre.</p>\n<p>Enfin, une dernière chose que vous devez garder en tête c'est qu'un commit est\ndéfinitif dans le sens ou on ne pourra jamais modifier son contenu (on pourra\npar contre le remplacer par un autre). Comme il est unique, il a un numéro qui\nest un haché <code>SHA1</code> de diverses informations.</p>\n<p>Ces <code>SHA1</code> sont utilisés à foison, habituez-y vous !</p>\n<p>Voilà, maintenant sortons nous les doigts et regardons comment ça marche\nconcrètement.</p>\n<h2>Créer ou récupérer un dépôt</h2>\n<p>Il y a deux manières de créer un dépôt Git : soit on en veut un tout neuf et on\nutilise <code>git init</code>, soit on veut cloner un dépôt déjà existant et on utilise le\nbien nommé <code>git clone</code>.</p>\n<p>Appelé sans argument, <code>git init</code> initialise un dépôt dans le dossier courant, on\npeut lui passer un nom de dépôt en argument pour le créer dans un sous-dossier\nspécifique du dossier courant.</p>\n<p>Du côté de <code>git clone</code>, on va passer l'adresse d'un dépôt, et optionnellement un\nnom local pour le dépôt. Il va récupérer le dépôt à l'adresse spécifiée (c'est\nbien foutu hein ?) puis le mettre soit dans un dossier du même nom soit dans un\ndossier du nom spécifié en dernier argument.</p>\n<p>Par exemple, si je veux cloner le dépôt du site :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> https://github.com/putaindecode/putaindecode.io.git</span>\n</code></pre>\n<p>Ça va créer un dossier <code>putaindecode.io</code> avec le contenu du dépôt.</p>\n<p><code>clone</code> accepte plusieurs types d'adresses : HTTP(S), SSH, protocole Git dédié\net même des chemins locaux pour cloner un dépôt situé ailleurs sur le système de\nfichiers.</p>\n<p>Pour la suite, il va falloir se placer dans un dépôt avec le petit <code>cd</code> qui va\nbien pour lancer les vraies commandes intéressantes de Git.</p>\n<h2>Premiers commits</h2>\n<p>Pour commencer à s'amuser, écrivez un bout de code dans un fichier et\nsauvegardez le :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cat &gt; putain_de_hello_world.rb</span>\nputs &quot;Hello, putain de codeur !&quot;\n^D\n</code></pre>\n<p>On va tout se suite introduire l'un des concepts déroutants de Git, <em>l'Index</em>.\nGit utilise trois zones distinctes pour les fichiers : le dossier de travail\n(<em>Working Dir</em>) qui contient les fichiers dans leur version actuelle, <em>l'Index</em>\nqui permet de stocker les modifications et <code>HEAD</code> qui pointe vers le dernier\ncommit.</p>\n<p>L'idée, c'est qu'on peut modifier les fichiers comme on le souhaite, et\nconstuire le commit avec seulement les modifications que l'on souhaite voir\napparaître.</p>\n<p>Cette possibilité permet d'avoir des commits atomiques, c'est à dire qui\nintroduisent une modification simple. Ça évite de se retrouver avec un commit\nmammouth qui change tout le programme d'un coup et qui est un enfer pour le\nfutur développeur qui revient sur le code et qui cherche à comprendre la logique\nde sa construction. Ce développeur, c'est vous dans 1 ou 2 semaines.</p>\n<p>Pour info, vous verrez parfois <em>l'Index</em> appellé <em>Staging Area</em>, ou encore\n<em>Cache</em>.</p>\n<p>Git fournit des commandes pour passer les fichiers d'un état à l'autre. Elles\nsont certes parfois un peu obscures, mais dans l'ensemble c'est pas si\ndifficile.</p>\n<p>Dans notre cas, notre fichier n'est même pas encore suivi par Git ! Vous pouvez\nvérifier ça en utilisant <code>git status</code>, dont vous ne pourrez bientôt plus vous\npasser :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git status</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Sur la branche master</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n<span class=\"hljs-comment\"># Validation initiale.</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n<span class=\"hljs-comment\"># Fichiers non suivis:</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">   (utilisez <span class=\"hljs-string\">&quot;git add &lt;fichier&gt;...&quot;</span> pour inclure dans ce qui sera validé)</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n<span class=\"hljs-comment\">#   putain_de_hello_world.rb</span></span>\nAucune modification indexée mais des fichiers non suivis sont présents (utilisez &quot;git add&quot; pour les suivre)\n</code></pre>\n<p>Pour pallier cela, on utilise <code>git add</code> pour l'ajouter direct à l'index.</p>\n<p>Dans notre cas, ça donne <code>git add putain_de_hello_world.rb</code></p>\n<p>On peut utiliser <code>git add</code> pour ajouter des dossiers entiers, des motifs, … Mais\nsoyez vigilants, c'est une bonne source d'erreurs souvent chiantes.</p>\n<p>Vous pouvez vérifier que <code>git add</code> a bien marché avec la commande <code>git status</code>,</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git status</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Sur la branche master</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n<span class=\"hljs-comment\"># Validation initiale.</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n<span class=\"hljs-comment\"># Modifications qui seront validées :</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">   (utilisez <span class=\"hljs-string\">&quot;git rm --cached &lt;fichier&gt;...&quot;</span> pour désindexer)</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n<span class=\"hljs-comment\">#   nouveau : putain_de_hello_world.rb</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n</span></code></pre>\n<p>Ok c'est prêt ! On lance maintenant <code>git commit</code> pour créer notre premier commit\n(pas con le <em>naming</em> de la commande hein ?). Si tout se passe bien vous devriez\navoir un éditeur qui s'ouvre pour écrire un message de commit. Prenez l'habitude\nde décrire votre changement sur la première ligne succintement et, si vous avez\nbesoin de détails, sautez une ligne et détaillez les modifications.</p>\n<p>Un petit <code>git status</code> nous confirme qu'on s'est pas foiré (la preuve, tout est\npropre) :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git status</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Sur la branche master</span>\nrien à valider, la copie de travail est propre\n</code></pre>\n<h2>Inspecter</h2>\n<p>Bon, c'est bien beau de commiter, mais à un moment on arrive sur un projet en\ncours et on aimerait bien savoir où on en est. Pour ça, vous pouvez utiliser un\noutil graphique (il y en a pour <a href=\"https://wiki.gnome.org/Apps/Gitg\">Linux</a>, <a href=\"http://gitx.frim.nl/\">OS X</a> et même sûrement\nWindows) ou retrousser vos poils de barbe et sortir le bon vieux <code>git log</code>.</p>\n<p>C'est un vrai couteau suisse qui va vous permettre d'inspecter tout l'historique\nde votre dépôt, avec des options en veux-tu en voilà pour personnaliser\nl'affichage.</p>\n<p>Un <code>git log</code> basique ça ressemble à ça :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">log</span></span>\ncommit 8120de7b7139e46b9cbc1c3ee89a02962dbc198e\nAuthor: madx &lt;madx+github@yapok.org&gt;\nDate:   Mon Nov 4 23:28:11 2013 +0100\n\n    Premier commit\n</code></pre>\n<p>Oui, c'est le commit que je viens de faire dans la partie précédente. Comment\nj'en suis sûr ? Car je peux utiliser <code>git show</code> pour afficher les détails d'un\nobjet Git (il n'y a pas que des commits, mais on verra ça une prochaine fois).</p>\n<p><code>git show</code> prend en argument le fameux <code>SHA1</code> du commit :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git show 8120de7b7139e46b9cbc1c3ee89a02962dbc198e</span>\ncommit 8120de7b7139e46b9cbc1c3ee89a02962dbc198e\nAuthor: madx &lt;madx+github@yapok.org&gt;\nDate:   Mon Nov 4 23:28:11 2013 +0100\n\n    Premier commit\n\ndiff --git a/putain_de_hello_world.rb b/putain_de_hello_world.rb\nnew file mode 100644\nindex 0000000..ded37dc\n--- /dev/null\n+++ b/putain_de_hello_world.rb\n@@ -0,0 +1 @@\n+puts &quot;Hello, putain de codeur !!!&quot;\n</code></pre>\n<p>Dit comme ça, ça a pas l'air de casser trois pattes à un canard, mais c'est la\nbase de la base de la praticité. Je vous fais pas l'insulte de vous expliquer\nles détails, vous êtes sans doute assez malins pour comprendre ce que Git\nraconte sur la sortie de ces deux commandes.</p>\n<p>Remarquez que <code>git show</code> affiche en bonus les différences introduites par un\nfichier. Ces différences on peut aussi les voir avant de commiter avec\n<code>git diff</code>, ce qui est bien pratique.</p>\n<p>Entraînez-vous maintenant à faire des commits, à inspecter et à farfouiller les\npages de <code>man</code>, c'est la meilleure façon d'apprendre. Après, on va attaquer le\ngros morceau, celui qui fait la force de Git.</p>\n<figure>\n  <img src=\"/public/images/articles/2013-11-06-versionner-avec-git/mind_blown.gif\" alt=\"Mind blown\" />\n</figure>\n<h2>Branchement et fusions</h2>\n<p>Créer une branche, ça permet de travailler sur une fonctionnalité ou un bug\nprécis, sans encombrer la ligne de conduite principale, qui peut évoluer sous\nd'autres contraintes.</p>\n<p>Dans Git, les branches sont une partie essentielle de quasiment tout <em>workflow</em>,\net leur manipulation est très rapide et très légère.</p>\n<p>Pour en revenir à mon histoire de maillon, créer une branche revient à créer un\npoint à partir duquel deux chaînes vont être possibles.</p>\n<p>C'est aussi simple qu'un <code>git branch le-nom-de-ma-branche</code>. Cette commande se\ncontente de créer la branche, pour se positionner dessus on utilise\n<code>git checkout</code> qui permet de naviguer de branche en branche tel Tarzan sur ses\nlianes.</p>\n<p>Comme c'est super chiant à écrire, il existe un raccourci bien pratique :\n<code>git checkout -b</code>, auquel on passe un nom de branche comme pour <code>git branch</code>.</p>\n<p>Une fois qu'on est bien sur la branche, tous les commits suivants seront liés à\ncette branche.</p>\n<p>On peut utiliser <code>git branch</code> sans argument pour lister les branches, celle avec\nun petit asterisque devant c'est la branche courante.</p>\n<p>Essayons ça avec notre petit dépôt :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git branch</span>\n* master\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout -b add-shebang</span>\nBasculement sur la nouvelle branche &#x27;add-shebang&#x27;\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> vim putain_de_hello_world.rb</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git status</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Sur la branche add-shebang</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Modifications qui ne seront pas validées :</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">   (utilisez <span class=\"hljs-string\">&quot;git add &lt;fichier&gt;...&quot;</span> pour mettre à jour ce qui sera validé)</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">   (utilisez <span class=\"hljs-string\">&quot;git checkout -- &lt;fichier&gt;...&quot;</span> pour annuler les modifications dans la copie de travail)</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\n<span class=\"hljs-comment\">#   modifié : putain_de_hello_world.rb</span></span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">\naucune modification n<span class=\"hljs-string\">&#x27;a été ajoutée au commit (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-string\"> git add putain_de_hello_world.rb</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-string\"> git commit</span></span>\n[add-shebang 5d48735] Add shebang\n 1 file changed, 1 insertion(+)\n<span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-string\"> git log --pretty=oneline --decorate</span></span>\n5d48735fcc805d51e2e294df5d9d22d481250789 (HEAD, add-shebang) Add shebang\n8120de7b7139e46b9cbc1c3ee89a02962dbc198e (master) Premier commit\n</code></pre>\n<p>Comme vous le voyez grâce à l'option <code>--decorate--</code> de <code>git log</code>, on a bien\nnotre branche qui pointe sur le dernier commit fait, alors que la branche de\nbase fournie par Git, <code>master</code>, reste au commit précédent.</p>\n<p>Dernière étape avant la fin de cette article : le redouté et redoutable <code>merge</code>\n!</p>\n<p>Pour fusionner nos deux branches, on va utiliser cette commande en se plaçant\nsur la branche dans laquelle on va fusionner et en passant en argument la\nbranche à fusionner.</p>\n<p>Si vous avez bien suivi, on va donc faire les choses suivantes :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout master</span>\nBasculement sur la branche &#x27;master&#x27;\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git merge add-shebang</span>\nUpdating 8120de7..5d48735\nFast-forward\n putain_de_hello_world.rb | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre>\n<p>Vous remarquez que Git signale <em>Fast-forward</em>. Comme le commit pointé par\n<code>add-shebang</code> est un fils direct de celui de <code>master</code>, Git se contente de faire\npointer <code>master</code> sur celui-ci, ce qui est beaucoup plus rapide.</p>\n<p>Dans le cas où on a eu des modifications sur <code>master</code> entre temps, on aurait eu\nune vraie fusion des contenus des commits, avec éventuellement une résolution de\nconflits, mais on verra ça dans un prochain article !</p>\n<h2>La suite</h2>\n<p>On a vu les bases, et très bientôt on va approfondir le sujet, en voyant\nnotamment comment collaborer, comment résoudre des conflits ou des problèmes\nd'utilisation de Git, tout ça dans la joie et la bonne humeur.</p>\n<h2>Références</h2>\n<p>Si vous voulez en savoir plus sur Git, la <a href=\"http://git-scm.com/documentation\">documentation officielle</a>\nest plutôt bien foutue.</p>\n<p>Si vous aimez les petites références rapides et illustrées, le <a href=\"http://rogerdudler.github.io/git-guide/\">Git\nGuide</a> de Roger Dudler est une bonne manière d'apprendre.</p>\n"}