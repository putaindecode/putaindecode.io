{"slug":"quelques-petits-hacks-typographiques","filename":"2017-01-10-quelques-petits-hacks-typographiques","title":"Quelques petits h͔̞̞̭͙͠a̘ç̫̯͓k̵͖̘̬̳̱̯̤s̴͎̻̯ typographiques","date":"Tue, 10 Jan 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-01-10T00:00:00.000Z","title":"Quelques petits h͔̞̞̭͙͠a̘ç̫̯͓k̵͖̘̬̳̱̯̤s̴͎̻̯ typographiques","author":"jojmaht","oldSlug":"css/remplacer-glyphes-font","slug":"quelques-petits-hacks-typographiques"},"body":"<p>On ne va pas se mentir, la typo c'est quand même super important sur le web, et\nil va falloir admettre que ce bon vieux Gutenberg avait eu un sacré flair à\nl'époque.</p>\n<p>Ah, qu'il est bon de parcourir un web parfaitement typesetté, avec de jolies\npolices bien kernées et- NOPE. Au mieux une bonne grosse Arial bien crasse dans\nta face quand c'est pas de la Comic Sans MS rendue avec un crénelage moisi sous\nWindows XP, #geocities.</p>\n<p>Heureusement, le web a progressé depuis, et en tant que créateurs, nous pouvons\ntous apporter notre petit morceau de plomb à l'édifice typographique avec\nquelques petites astuces. Ce sont quelques unes de ces astuces que je vais vous\nfournir ici, alors ouvrez bien les mirettes.</p>\n<h3>Ampersand hacking (je suis sûr que ça ne s'appelle pas comme ça)</h3>\n<p>Pas loin d'être l'un des plus connus, il est également l'un des plus simples.</p>\n<p>Il consiste simplement à remplacer un glyphe de votre texte par le glyphe\ncorrespondant à ce caractère depuis une autre typo. Je m'explique.</p>\n<p><img src=\"/public/images/articles/2017-01-10-quelques-petits-hacks-typographiques/csslickbait.png\" alt=\"cliquez pas, sérieux\" /></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n  Until the\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;amp&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;amp;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  of time\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.amp</span> {\n  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&quot;Baskerville&quot;</span>;\n  <span class=\"hljs-attribute\">font-style</span>: italic;\n}\n</code></pre>\n<p>Voilà, c'est pas bien folichon mais ça fonctionne : vous pouvez dès à présent\nenrouler toutes vos esperluettes (si vous êtes chef de projet, une esperluette\nc'est un &quot;et commercial&quot;) dans des <code>span</code> pour leur donner une bien chouette\ngueule.</p>\n<p>Mais ça c'est pour les quelques d'entre vous qui ont la main sur le contenu\ntextuel du projet, beaucoup d'autres n'ont pas ce luxe et se font fournir de\npauvres textes mal traduits servis par un vieux CMS miteux.</p>\n<p>Ce serait chouette d'avoir un moyen pour spécifier une typo pour certains\ncaractères au cas par cas, non ?</p>\n<p>Bonne nouvelle.</p>\n<h3>Go Go Unicode-Range !</h3>\n<p>Reprenons notre exemple précédent, que nous allons implémenter avec la feature\n<code>unicode-range</code> de CSS.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Until the <span class=\"hljs-symbol\">&amp;amp;</span> of time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-keyword\">@font-face</span> {\n  <span class=\"hljs-attribute\">font-family</span>: BaskervilleAmpersand;\n  <span class=\"hljs-attribute\">font-style</span>: italic;\n  <span class=\"hljs-attribute\">font-weight</span>: normal;\n  <span class=\"hljs-attribute\">src</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">&quot;path/to/your/font/i&#x27;m/not/your/mother/Baskerville.eot&quot;</span>);\n  <span class=\"hljs-attribute\">unicode-range</span>: U+<span class=\"hljs-number\">0026</span>; <span class=\"hljs-comment\">/* unicode codepoint for &amp;amp; */</span>\n}\n\n<span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">font-family</span>: BaskervilleAmpersand, Helvetica, Arial, Serif;\n}\n</code></pre>\n<p>Ainsi, en tirant parti d'<code>unicode-range</code> et du stacking des polices, toutes les\nesperluettes dans le corps de texte seront rendues en Baskerville et les autres\ncaractères tomberont en défaut sur Helvetica puis Arial, puis Serif en général.\nBon, ne me faites pas dire ce que je n'ai pas dit, cette propriété CSS n'est pas\nparfaite non plus, rien que le fait de devoir aller chercher les codepoints\nunicode pour retrouver le caractère à remplacer est assez lourd et fastidieux\n(sauf si vous connaissez unicode par cœur mais là vous me faites peur). L'autre\npossibilité si vous utilisez PostCSS, c'est le plugin\n<a href=\"https://github.com/ben-eb/postcss-unicode-characters\"><code>postcss-unicode-characters</code></a>\npar <a href=\"https://github.com/ben-eb\">@beneb</a> qui simplifie grandement l'API\nd'unicode-range et que je vous invite à aller voir. Enfin, la bonne nouvelle\nc'est que c'est une propriété relativement bien supportée, à partir d'IE9 vous\ndevriez vous en tirer.</p>\n<h3>Je suis sur IE8</h3>\n<p>(mes condoléances) Une autre solution existe pour vous ! Il faut juste créer sa\npropre police et- non sérieux revenez c'est pas si horrible, promis. Bon,\nreprenons. Pour ce genre de manipulations vous aurez besoin d'un éditeur de\npolice, j'aime personnellement beaucoup BirdFont, qui a l'avantage d'être\ngratuit et disponible sur macOS, Windows, pas mal de versions de Linux et même\nOpenBSD. On entre ici dans la partie très procédurière de cet article mais mieux\nvaut ça que de vous laisser seuls dans l'interface spartiate de BirdFont.</p>\n<p><img src=\"/public/images/articles/2017-01-10-quelques-petits-hacks-typographiques/birdfont.png\" alt=\"\" /></p>\n<p>Spartiate. Bref, le bouton tout en haut à gauche, c'est le bouton &quot;Nouvelle\npolice&quot;, vous pouvez cliquer dessus pour arriver à l'écran suivant.</p>\n<p><img src=\"/public/images/articles/2017-01-10-quelques-petits-hacks-typographiques/birdfont1.png\" alt=\"\" /></p>\n<p>À partir de là vous allez devoir choisir un caractère à remplacer. Ça peut être\nla lettre E comme ça peut être l'emoji Pizza, personnellement j'ai décidé de\nremplacer le symbole dit &quot;paragraphe&quot; ou &quot;Simflouz&quot; si vous avez joué aux Sims\n(et &quot;Sporeflouz&quot; si vous avez joué à Spore mais passons). Si votre caractère est\nun peu dur à trouver dans la liste, l'option de recherche est faite pour ça.\nDouble-cliquer sur un caractère vous emmènera à l'interface d'édition.</p>\n<p><img src=\"/public/images/articles/2017-01-10-quelques-petits-hacks-typographiques/birdfont3.png\" alt=\"\" /></p>\n<p>Nous voici dans l'interface d'édition de glyphe proprement dite. Elle ne vous\ndépaysera pas trop si vous avez déjà utilisé un outil de création de SVG.\nN'hésitez pas à vous en donner à cœur joie si vous avez la fibre créatrice,\npersonnellement comme vous pouvez le voir sur la capture, je suis déjà un\nartiste accompli. Le menu hamburger en haut à droite vous permettra également\nd'importer directement un SVG en tant que glyphe si vous n'avez pas la chance de\ndessiner aussi bien que moi et que vous préférez déléguer ce genre de tâches à\nvotre designer. Ensuite, depuis le même menu hamburger, vous pourrez exporter\nvotre typo dans tous les formats que vous voudrez si tant est que vous vouliez\nles exporter en TTF, EOT ou SVG.</p>\n<p>De là, vous n'aurez plus qu'à importer cette font comme dans le chapitre 2 et\nvous pourrez enfin rajouter &quot;typesetter&quot; dans vos compétences sur LinkedIn.</p>\n<p>Vous n'avez plus qu'à trouver les utilisations les plus intéressantes de ce\ngenre de pratiques (il y en a plein).</p>\n<p>La bise.</p>\n"}