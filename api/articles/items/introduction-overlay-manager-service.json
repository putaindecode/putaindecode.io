{"slug":"introduction-overlay-manager-service","filename":"2017-11-02-introduction-overlay-manager-service","title":"Introduction à l'Overlay Manager Service, expliqué par quelqu'un qui n'y connaît rien","date":"Thu, 02 Nov 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-11-02T00:00:00.000Z","title":"Introduction à l'Overlay Manager Service, expliqué par quelqu'un qui n'y connaît rien","author":"jojmaht","oldSlug":"android/overlaymanagerservice","slug":"introduction-overlay-manager-service"},"body":"<blockquote>\n<p>DISCLAIMER : J'entrave pas un keyword de Java, j'ai jamais développé une seule\napp native, et plus globalement, je ne connais vraiment pas mon sujet. Ainsi,\nsi quelqu'un s'y connaissant mieux que moi passe par là, qu'il n'hésite\nsurtout pas à me corriger et à m'afficher devant la planète entière, j'ai\nbesoin de nourrir mon syndrome de l'imposteur.</p>\n</blockquote>\n<p>Salut les copains aujourd'hui tonton FoetusBoy (SkinnyFoetusDaron) (moi) va vous\nparler d'un sujet qu'il ne connaît pas et qui s'insèrera à ce titre aux côtés\nd'autres sujets qu'il ne connaît pas tels que la joie de vivre, les souvenirs\ndes jours joyeux et comment ne pas parler de soi à la troisième personne.</p>\n<p>Ouvrez vos calepins à la page bullshit, on va faire un cours sur l'Overlay\nManager Service (ou OMS) d'Android, sur comment ça fonctionne et comment vous\nallez pouvoir l'utiliser pour faire des trucs moches.</p>\n<figure>\n  <img src=\"/public/images/articles/2017-11-02-introduction-overlay-manager-service/OMS-moche.png\" alt=\"hahaha comment c'est trop moche\" />\n  <figcaption>J'ai séché les cours de théorie des couleurs</figcaption>\n</figure>\n<p>Okay alors maintenant que vos rétines sont perpétuellement démolies par cette\ncapture d'écran et que votre curiosité est piquée au vif, on attaque le cours\nd'histoire. Fin 2015, deux ingénieurs de chez Sony Mobile, Mårten Kongstad et\nMartin Wallgren, que j'identifie à 99% de chances comme étant probablement tous\nles deux Suédois (et qui illustrent bien l'inventivité de ce peuple lorsqu'il\ns'agit de trouver toutes les façons de nommer quelqu'un Martin), coécrivent un\ncommit dans l'AOSP (Android Open-Source Project), sous le chouette identifiant\n&quot;OMS: introduce the OverlayManagerService&quot;. Cet événement est chouette pour deux\nraisons :</p>\n<ul>\n<li>La première est qu'Android étant malgré le contrôle de Google un projet\nopen-source, c'est toujours intéressant de voir les constructeurs participer\nun peu au projet (les mauvaises langues diront que seul Sony joue vraiment le\njeu de l'open-source et les mauvaises langues n'auraient pas vraiment tort).</li>\n<li>La deuxième est que ça marque l'arrivée sur Android d'un véritable système de\ntheming (thématisation en Français, donc je vais dire theming plutôt hein),\npermettant ainsi aux constructeurs d'implémenter leurs customisations de façon\nbeaucoup plus souple et surtout aux initiés (moi et bientôt vous) de s'amuser\nun peu.</li>\n<li>Troisième raison (bonus) : C'était bientôt Noël et cette année-là on m'avait\noffert un joli manteau.</li>\n</ul>\n<p>Commençons. Comme son nom l'indique si vous parlez la langue de Jay-Z, l'Overlay\nManager Service est un service de gestion de surcouches.</p>\n<figure>\n  <img src=\"/public/images/articles/2017-11-02-introduction-overlay-manager-service/jayz.png\" alt=\"\" />\n  <figcaption>Si votre Google Translate n'a pas l'option de traduction de Jay-Z vers Molière c'est que vous n'avez pas souscrit à un abonnement Translate Gold</figcaption>\n</figure>\n<p>L'OMS est lui-même le successeur du RRO, pour &quot;Runtime Resource Overlay&quot;, ancien\nsystème propriétaire de Sony Mobile, utilisé en interne pour déployer et\nparamétrer rapidement leur surcouche à Android en fonction des demandes et\nbesoins des opérateurs et des mises à jour d'Android lui-même ou bien pour faire\nfonctionner les Thèmes Xperia (on connaît Sony assez friands de la customisation\npar les utilisateurs depuis la sortie de la PS3, surtout quand il s'agit de\nvendre des thèmes à 25$).</p>\n<p>Ce Runtime Resource Overlay (surcouches de ressources à l'exécution) s'opposait\nà l'outil Static Resource Overlay (surcouches de ressources statiques), un flag\ndu packager d'Android (aapt) qui était comme qui dirait &quot;bien mais pas top&quot; : il\npermettait de séparer le code source d'une application de sa surcouche pour\ngarder une base de travail propre (bien) mais ces surcouches ne pouvaient être\ninstallées qu'à la compilation de l'app, les rendant donc chiantes à débugger et\nnécessitaient plus ou moins qu'on soit le vendor original de l'application à\nmodifier (pas top). Le principal intérêt du RRO était donc de faire sauter ces\n&quot;barrières&quot;.</p>\n<p>Voyant donc que l'un des principaux reproches faits à Android, à raison ou à\ntort (à raison hein, on va pas se mentir) était sa fragmentation et que l'un de\nses facteurs (mais non le seul) était lié aux <em>vendors</em> (Samsung.) mettant trop\nde temps à recoder leur surcouche de A à Z à chaque version d'Android (et que de\ntoute façon pourquoi s'emmerder à mettre à jour un téléphone gratuitement alors\nque tu peux en vendre un nouveau pour 700 pétrodollars <em>allez achète, vil\nconsommateur</em> ?) les braves petits ingés de chez Sony ont préféré faire une\npetite PR sympa du côté de l'AOSP pour ajouter ce système de surcouches en natif\ndans Android. Resté dormant pendant quelques temps, l'OMS a enfin été activé de\nfaçon officielle (à peu près) par Google, lors de la sortie d'Android 8.0 Oreo,\nqui en tire une utilité assez basique mais prometteuse : changer littéralement\nune seule couleur dans l'interface, spécifiquement pour les téléphones Pixel.</p>\n<figure>\n  <img src=\"/public/images/articles/2017-11-02-introduction-overlay-manager-service/epoustouflan.png\" alt=\"époustouflan\" />\n  <figcaption>époustouflan</figcaption>\n</figure>\n<p>Ça peut paraître peu mais c'est finalement ce genre de modifications à la con\nqui peut considérablement ralentir le portage d'une nouvelle version d'Android\nsur un device existant. Ouvrons un peu le ventre de la bête.</p>\n<p>Un overlay, ça fonctionne assez simplement. Il prend la forme d'un Android\nPacKage (ci-après APK), le format standard des applications Android, genre de\npoint JAR survitaminé, qu'il conviendra donc de signer s'il vous plaît merci\nc'est important bonne journée, si vous comptez l'installer par vous-même en\ndehors de l'IDE consacré (Android Studio, donc). De par sa nature d'APK, un\noverlay devra donc contenir un AndroidManifest.xml, sorte de package.json si je\ndevais faire une équivalence avec le dev web, cet AndroidManifest donc, qui\nprendra la forme suivante :</p>\n<pre><code><?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"LePetitNomDeMonPackage\">\n    <overlay android:priority=\"1000\" android:targetPackage=\"LePetitNomDuPackageCible\"/>\n</manifest>\n</code></pre>\n<p>Mettons les points sur les i et définissons immédiatement ce qu'un overlay n'est\npas : un overlay n'est <em>pas</em> une extension d'application, il ne peut en aucun\ncas rajouter des fonctionnalités à une application existante, de la même manière\nque vous galéreriez à rajouter des features à un site existant juste en\nmodifiant son CSS. En somme, à peu de choses près, un overlay se réduit à une\nfeuille de style où toutes les déclarations seraient faites avec <code>!important</code> et\ncomme on aime les bonnes pratiques bien maintenables chez PutainDeCode on vous\nrappellera de ne <em>JAMAIS</em> faire ça s'il vous plaît.</p>\n<p>Là où la comparaison s'arrête c'est que contrairement à CSS, les ressources\nd'une application ne comprennent pas que les couleurs et occasionnellement les\ndimensions des blocs, mais peuvent renfermer les icônes, les sons, les images,\net à peu près tout ce que le développeur original a voulu foutre dedans.</p>\n<p>En résumé, rajouter une feature pour envoyer des SMS depuis votre lecteur de\nmusique : c'est non; remplacer toutes les couleurs d'une appli par du rose, les\ntypos par du Comic Sans MS et les sons d'interactions par le bruit d'un canard\nqui fait &quot;Coin coin&quot; : c'est oui.</p>\n<p>D'ailleurs on va rendre l'application Calculatrice (dont le nom de package est\n&quot;com.google.android.calculator&quot;, ça servira plus tard) toute rose parce que\npourquoi pas. En décompilant donc l'APK à l'aide de notre fidèle\n<a href=\"https://ibotpeaches.github.io/Apktool/\">apktool</a>, nous voilà dans le cœur du\ncode, dans la matrice, dans la mer numérique, bref, dans un sacré paquet de\nfichiers XML.</p>\n<figure>\n  <img src=\"/public/images/articles/2017-11-02-introduction-overlay-manager-service/chosenOne.png\" alt=\"Mes collègues détestent que je dise I'm in à chaque fois que je fais un git pull\" />\n  <figcaption>*hacker voice* I'm in</figcaption>\n</figure>\n<p>Selon toute logique, la gestion des couleurs de l'app va probablement se\nretrouver dans un fichier qui s'appelle à peu près <code>colors.xml</code>, ce qui n'est\npas étonnant parce que c'est comme ça qu'on nomme ses fichiers quand on veut s'y\nretrouver, j'ai appris ça à l'école quand je mettais des gommettes sur mes\ncahiers. Il s'agit donc maintenant de voir ce à quoi sert chaque valeur dans ce\nfichier. Si vous arrivez à déduire le code hexa d'une couleur juste en la\nregardant, félicitations, vous êtes probablement un Terminator. Pour ceux qui ne\nsont pas des robots tueurs venus du turfu, faire une capture d'écran de\nl'application et ouvrir celle-ci dans Photoshop fonctionne très bien aussi.</p>\n<figure>\n  <img src=\"/public/images/articles/2017-11-02-introduction-overlay-manager-service/colors.png\" alt=\"Featuring l'outil pipette de Photoshop, on applaudit l'outil pipette de Photoshop\" />\n  <figcaption>Devinez à quel moment j'en ai eu marre de faire de belles flèches bien droites</figcaption>\n</figure>\n<p>Les trois valeurs nous intéressant sont donc <code>pad_advanced_background_color</code>,\n<code>pad_numeric_background_color</code> et <code>pad_operator_background_color</code> qui sont\nfinalement assez bien nommées. Vous remarquerez que les couleurs sont au format\n#aarrggbb et non pas #rrggbb, donc faites gaffe quand vous tripotez ça et que\nvous remplacez les couleurs par du rose (j'ai choisi le Bubblegum Pink de\nPantone mais si vous préférez d'autres teintes de rose, libre à vous). Il s'agit\nmaintenant de créer un nouveau fichier colors.xml dans notre\n<a href=\"https://github.com/jojmaht/OMS-template\">template OMS</a> qu'on va remplir\nainsi :</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">color</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pad_advanced_background_color&quot;</span>&gt;</span>#fff4cbd4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">color</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">color</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pad_numeric_background_color&quot;</span>&gt;</span>#fff4cbd4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">color</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">color</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pad_operator_background_color&quot;</span>&gt;</span>#fff4cbd4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">color</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span>\n</code></pre>\n<p>Puis nous pouvons enfin compiler notre chef d'œuvre (toujours avec apktool) puis\nl'installer sur notre appareil, non sans l'avoir\n<a href=\"https://stackoverflow.com/questions/10930331/how-to-sign-an-already-compiled-apk\">au préalable signé</a>,\npuis enfin de l'appliquer via la commande</p>\n<pre><code>adb shell cmd overlay enable [le namespace de votre package que vous avez spécifié dans AndroidManifest.xml, moi par exemple c'est \"com.sfb.pinkcalc\"]\n</code></pre>\n<p>(il faut que votre téléphone soit en mode Développeur et que vous tourniez sous\nAndroid Oreo minimum sinon ça ne marchera pas, pas la peine de me demander pour\nfaire marcher ça sur votre téléphone si vous êtes sous Gingerbread, tout ce que\nje ferai ce sera me moquer de vous).</p>\n<p>Admirons ce merdier, maintenant.</p>\n<figure>\n  <img src=\"/public/images/articles/2017-11-02-introduction-overlay-manager-service/fuckthatspink.png\" alt=\"Sans rire, depuis l'écriture de cet article j'ai pas désactivé cet overlay, j'aime vraiment le look que ça donne à l'app calculatrice\" />\n  <figcaption>Absolument splendide.</figcaption>\n</figure>\n<p>C'est à peu près tout pour l'OMS, pour les bases du moins, n'hésitez surtout pas\nà décompiler toutes les apps que vous trouvez pour voir un peu comment ça marche\nà l'intérieur, c'est aussi pour ça que c'est cool Android. Allez faire vos\npropres trucs moches maintenant. <em>Ciao.</em></p>\n"}