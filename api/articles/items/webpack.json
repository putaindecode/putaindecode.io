{"slug":"webpack","filename":"2015-07-20-webpack","title":"Webpack","date":"Mon, 20 Jul 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-07-20T00:00:00.000Z","title":"Webpack","author":"MoOx","oldSlug":"js/webpack","slug":"webpack"},"body":"<h1>Pourquoi Webpack ?</h1>\n<p>Webpack a pour objectif de vous faciliter la vie, notamment en vous aidant à\norganiser\n<a href=\"/fr/articles/frontend/2015-etat-lieux-javascript-modulaire/\">votre application JS en modules</a>.\nLe projet est déjà très populaire, particulièrement dans la communauté React, ce\nqui parait logique vu qu'il s'agit de développer des composants.</p>\n<p>Webpack apporte à ce niveau des fonctionnalités intéressantes :</p>\n<ul>\n<li>disposer de toutes les ressources statiques (CSS, images, fontes) en tant que\nmodule,</li>\n<li>intégrer et consommer des bibliothèques tierces très simplement en tant que\nmodule,</li>\n<li>séparer votre <code>build</code> en plusieurs morceaux, chargés à la demande,</li>\n<li>garder un chargement initial très rapide si besoin,</li>\n<li>personnaliser la plupart des étapes du processus,</li>\n<li>adapté pour les gros projets.</li>\n</ul>\n<p>Avant Webpack, nous avions beau avoir des super task-runners comme\n<a href=\"/fr/articles/js/grunt/\">Grunt</a> ou <a href=\"/fr/articles/js/gulp/\">Gulp</a>, il faut avouer\nqu'on bricolait quand même pas mal.</p>\n<p>Et vous avez sûrement mieux à faire que de devoir modifier des configurations ou\ndes définitions de tâches pour ajuster les copies d'images ou de fontes, ou\nencore ajuster des URL générées. Il y avait avec ces solutions une grande partie\nde rafistolage, où l’on se devait de faire très attention à la moindre\nréorganisation de code, sous peine de casser une partie du rendu.</p>\n<p>Prenons par exemple une image de fond déclarée en CSS via un\n<code>background: url(...)</code>. Qui vous préviendra lorsque celle-ci aura été supprimée\nou déplacée, et que la référence n'est donc plus bonne ? Peut-être vos logs de\nserveur web ? En recherchant les erreurs HTTP 404...</p>\n<p>Vous avez la responsabilité de gérer vos tâches et leurs résultats tout en vous\nassurant du bon fonctionnement car vous êtes la glu entre tous ces morceaux.</p>\n<h1>Qu'est-ce que Webpack ?</h1>\n<p>Pas besoin de s'appeler Einstein pour comprendre les intentions de Webpack en\ninterprétant le nom : web + pack. Faire un pack prêt pour le web.</p>\n<p>Nativement, Webpack s'occupe uniquement de ressources JavaScript. Webpack\npropose un système de <em>loader</em> qui permet de transformer tout et n'importe quoi\nen JavaScript (mais pas que). Ainsi, tout est consommable en tant que module.</p>\n<p>Webpack prend en charge la fonction <code>require()</code> (connue et utilisée dans node.js\net browserify) et permet de définir des nouveaux comportements.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> myModule = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./my-module.js&quot;</span>);\n<span class=\"hljs-comment\">// &quot;classique&quot; pour ceux qui utilisent node.js/browserify</span>\n\n<span class=\"hljs-comment\">// nouveauté avec Webpack</span>\n<span class=\"hljs-keyword\">var</span> myStyles = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./my-module.css&quot;</span>);\n<span class=\"hljs-comment\">// si vous utilisez le css-loader par exemple, toutes les directives url()</span>\n<span class=\"hljs-comment\">// se comporteront comme des require(), ainsi, vous pourrez appliquer</span>\n<span class=\"hljs-comment\">// des loaders sur tous vos assets et vous aurez des erreurs à la compilation</span>\n<span class=\"hljs-comment\">// si une ressource est manquante.</span>\n\n<span class=\"hljs-comment\">// vous pourrez aussi consommer des SVG en tant que chaînes (eg: raw-loader)</span>\n<span class=\"hljs-keyword\">var</span> mySVG = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./my-module.svg&quot;</span>);\n\n<span class=\"hljs-comment\">// ou inclure des fichiers dans votre build (via file-loader)</span>\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;index.html&quot;</span>);\n</code></pre>\n<p>C'est cette partie qui est aujourd'hui la plus intéressante et la plus flexible.</p>\n<figure>\n  <img src=\"/public/images/articles/2015-07-20-webpack/index.jpg\" alt=\"\" />\n  <figcaption>\n    Webpack transforme une multitude de fichiers en lots par responsabilité\n  </figcaption>\n</figure>\n<p>Webpack va donc pouvoir s'occuper aussi bien de vos modules JavaScript\n(CommonJS, AMD, UMD...), mais aussi de\n<a href=\"https://github.com/css-modules/css-modules\">vos modules CSS</a>, de vos fichiers\nSVG, gif, png, etc. ainsi que potentiellement n'importe quel type de fichier\npour peu que vous preniez le temps d'écrire un <em>loader</em> (rassurez-vous, il\nexiste déjà un loader pour tous les fichiers que vous manipulez couramment).</p>\n<p>En plus de cela, il a été pensé afin de permettre la séparation de votre pack\n(votre gros fichier JavaScript compilé) en plusieurs morceaux, selon vos besoins\n: vous pourrez ainsi ajuster la balance entre performance et lazy loading.</p>\n<p>Avec les solutions existantes, il est actuellement très difficile d'arriver\nfacilement à ce que propose Webpack, pour ne pas dire impossible.</p>\n<p>Il est possible d'avoir l'équivalent avec\n<a href=\"/fr/articles/js/browserify/\">browserify</a> comme l'a indiqué son auteur dans un\narticle\n<a href=\"https://gist.github.com/substack/68f8d502be42d5cd4942\">browserify for Webpack users</a>\n(qui est une réponse à la ressource\n<a href=\"https://github.com/webpack/docs/wiki/webpack-for-browserify-users\">Webpack for browserify users</a>\n).</p>\n<p>Il est clair que cela n'est pas aussi simple qu'avec Webpack qui est beaucoup\nplus flexible de par sa conception et ses objectifs initiaux.</p>\n<p>Par exemple, browserify pourra appliquer d'éventuelles transformations\nuniquement au code local et donc pas dans <code>node_modules/*</code>. Cela peut être\nproblématique et nous conduit forcément à finir par du bricolage si on veut\nconsommer des assets de modules de manière transparente.</p>\n<p>Ne parlons pas du\n<a href=\"http://webpack.github.io/docs/hot-module-replacement-with-webpack.html\">hot loading</a>\n(remplacement de code à la volée) qui n'est pas du tout facile à mettre en place\n(pour le moment) avec autre chose que Webpack.</p>\n<h1>Comment intégrer Webpack dans votre workflow ?</h1>\n<p>Dans un premier temps vous pourrez facilement intégrer Webpack en remplacement\nde <a href=\"/fr/articles/js/browserify/\">browserify</a> ou d'une éventuelle concaténation\nvia des plugins Gulp, Grunt, etc.</p>\n<p>Dans un second temps, vous pourrez très certainement remplacer une partie de vos\nautres tâches pour ajuster/copier/déplacer vos assets (CSS, images...) et ainsi\nréduire le code dédié à votre workflow. Il se pourrait alors que votre\nutilisation d'un task-runner soit maintenant si réduite que vous pourriez vous\nen passez en utilisant simplement\n<a href=\"http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/\">des scripts npm</a>.</p>\n<p>Si jamais vous êtes limité,\n<a href=\"/fr/articles/npm/utilitaire-cli/\">vous pourrez bien entendu créer votre propre commande</a>,\nqui sera réutilisable dans n'importe quel contexte.</p>\n<h1>Webpack en pratique</h1>\n<p>Quelques ressources pour vous y mettre :</p>\n<ul>\n<li>Un premier\n<a href=\"/fr/articles/js/webpack/premier-exemple\">exemple détaillé de configuration et d'utilisation</a>\nbasé sur notre retour d'expérience.</li>\n</ul>\n<p>En anglais :</p>\n<ul>\n<li><a href=\"http://webpack.github.io/docs/tutorials/getting-started/\">Tutoriel officiel</a></li>\n<li><a href=\"http://okonet.ru/viennajs-webpack-introduction/\">Slides d'introduction</a></li>\n<li><a href=\"https://github.com/petehunt/webpack-howto\">&quot;How to&quot; webpack</a></li>\n</ul>\n<p><a href=\"http://webpack.github.io/docs\">Webpack possède une documentation</a> assez\nfournie, mais pas vraiment facile à aborder lorsqu'on découvre le projet. Aussi,\nn'hésitez pas à nous poser vos questions en commentaires.</p>\n"}