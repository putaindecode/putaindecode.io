{"slug":"es6-es2015-les-promesses","filename":"2015-12-06-es6-es2015-les-promesses","title":"ES6, ES2015 : les promesses","date":"Sun, 06 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-06T00:00:00.000Z","title":"ES6, ES2015 : les promesses","author":"Uhsac","oldSlug":"js/es2015/promises","slug":"es6-es2015-les-promesses"},"body":"<p>ES2015 apporte une fonctionnalité simplifiant grandement l'asynchrone en\nJavaScript, les promesses ! Visible depuis longtemps dans l'écosystème\nJavaScript grâce a diverses librairies, on peut maintenant utiliser directement\nla spécification officielle.</p>\n<h2>C'est quoi une promesse ?</h2>\n<p>Et bien comme son nom l'indique vous pouvez voir ça comme la promesse que vous\nallez recevoir une valeur. Comme toute promesse, elle peut être tenue, la valeur\nest arrivée et on peut s'en servir, ou ne pas l'être, dans ce cas une erreur\narrive et on peut réagir en conséquence.</p>\n<p>Ce mécanisme permet de remplacer les callbacks d'une manière plus élégante. Au\nrevoir, la suite de callbacks qui rend votre code illisible ! Vous ne me croyez\npas ? Voici un exemple pour vous le prouver :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// En utilisant les callbacks</span>\n<span class=\"hljs-comment\">// Imaginez que chacune de ces fonctions effectue des tâches asynchrones</span>\n<span class=\"hljs-comment\">// plus ou moins complexes (requête HTTP, appel à une base de données</span>\n<span class=\"hljs-comment\">// ou encore lecture de fichier)</span>\n<span class=\"hljs-keyword\">const</span> functionWithCallback1 = <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =&gt;</span> callback(<span class=\"hljs-string\">&quot;test&quot;</span>, <span class=\"hljs-literal\">undefined</span>);\n<span class=\"hljs-keyword\">const</span> functionWithCallback2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =&gt;</span> callback(arg, <span class=\"hljs-literal\">undefined</span>);\n<span class=\"hljs-keyword\">const</span> functionWithCallback3 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =&gt;</span> callback(arg, <span class=\"hljs-literal\">undefined</span>);\n<span class=\"hljs-keyword\">const</span> functionWithCallback4 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =&gt;</span> callback(arg, <span class=\"hljs-literal\">undefined</span>);\n<span class=\"hljs-keyword\">const</span> functionWithCallback5 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =&gt;</span> callback(arg, <span class=\"hljs-literal\">undefined</span>);\n<span class=\"hljs-keyword\">const</span> functionWithCallback6 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =&gt;</span> callback(arg, <span class=\"hljs-literal\">undefined</span>);\n\nfunctionWithCallback1(<span class=\"hljs-function\">(<span class=\"hljs-params\">result1, err</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (err) {\n    <span class=\"hljs-keyword\">throw</span> err;\n  }\n  functionWithCallback2(result1, <span class=\"hljs-function\">(<span class=\"hljs-params\">result2, err</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-keyword\">throw</span> err;\n    }\n    functionWithCallback3(result2, <span class=\"hljs-function\">(<span class=\"hljs-params\">result3, err</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (err) {\n        <span class=\"hljs-keyword\">throw</span> err;\n      }\n      functionWithCallback4(result3, <span class=\"hljs-function\">(<span class=\"hljs-params\">result4, err</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (err) {\n          <span class=\"hljs-keyword\">throw</span> err;\n        }\n        functionWithCallback5(result4, <span class=\"hljs-function\">(<span class=\"hljs-params\">result5, err</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">if</span> (err) {\n            <span class=\"hljs-keyword\">throw</span> err;\n          }\n          functionWithCallback6(result5, <span class=\"hljs-function\">(<span class=\"hljs-params\">result6, err</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">if</span> (err) {\n              <span class=\"hljs-keyword\">throw</span> err;\n            }\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Exemple avec les callback : <span class=\"hljs-subst\">${result6}</span>`</span>);\n          });\n        });\n      });\n    });\n  });\n});\n\n<span class=\"hljs-comment\">// Et maintenant, en utilisant les promesses</span>\n<span class=\"hljs-keyword\">const</span> functionWithPromise1 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">&quot;test&quot;</span>);\n<span class=\"hljs-keyword\">const</span> functionWithPromise2 = <span class=\"hljs-function\"><span class=\"hljs-params\">arg</span> =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg);\n<span class=\"hljs-keyword\">const</span> functionWithPromise3 = <span class=\"hljs-function\"><span class=\"hljs-params\">arg</span> =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg);\n<span class=\"hljs-keyword\">const</span> functionWithPromise4 = <span class=\"hljs-function\"><span class=\"hljs-params\">arg</span> =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg);\n<span class=\"hljs-keyword\">const</span> functionWithPromise5 = <span class=\"hljs-function\"><span class=\"hljs-params\">arg</span> =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg);\n<span class=\"hljs-keyword\">const</span> functionWithPromise6 = <span class=\"hljs-function\"><span class=\"hljs-params\">arg</span> =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg);\n\nfunctionWithPromise1()\n  .then(functionWithPromise2)\n  .then(functionWithPromise3)\n  .then(functionWithPromise4)\n  .then(functionWithPromise5)\n  .then(functionWithPromise6)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Exemple avec les promesses : <span class=\"hljs-subst\">${result}</span>`</span>))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">throw</span> err;\n  });\n</code></pre>\n<p>Comme vous pouvez le voir, l'exemple avec les promesses est tout de même plus\nlisible !</p>\n<h2>Trop bien ! Comment je les utilise ?</h2>\n<p>Une promesse peut avoir plusieurs états au cours de son existence :</p>\n<ul>\n<li>en cours : la valeur qu'elle contient n'est pas encore arrivée</li>\n<li>résolue : la valeur est arrivée, on peut l'utiliser</li>\n<li>rejetée : une erreur est survenue, on peut y réagir</li>\n</ul>\n<p>Une promesse possède 2 fonctions : <code>then</code> et <code>catch</code>, vous pouvez utiliser\n<code>then</code> pour récupérer le resultat ou l'erreur d'une promesse et <code>catch</code> pour\nrécupérer l'erreur d'une ou plusieurs promesses.</p>\n<p>Voyons comment utiliser les promesses à l'aide de la future implémentation de\n<a href=\"https://fetch.spec.whatwg.org\"><code>fetch</code></a>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// À ce moment, la promesse est en attente</span>\n<span class=\"hljs-keyword\">const</span> fetchPromise = fetch(<span class=\"hljs-string\">&quot;http://putaindecode.io&quot;</span>);\n\n<span class=\"hljs-comment\">// Quand la requête est terminée la promesse est résolue avec le résultat de</span>\n<span class=\"hljs-comment\">// la requête</span>\n<span class=\"hljs-keyword\">const</span> parsePromise = fetchPromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">fetchResult</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// Je peux retourner une nouvelle promesse à partir d&#x27;un then, ici</span>\n  <span class=\"hljs-comment\">// j&#x27;appelle .text() qui parse le contenu de la requête et retourne</span>\n  <span class=\"hljs-comment\">// une promesse</span>\n  <span class=\"hljs-keyword\">return</span> fetchResult.text();\n});\n\n<span class=\"hljs-comment\">// Quand le parsing est terminé, je peux recuperer son contenu</span>\nparsePromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">textResult</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Voici le résultat : <span class=\"hljs-subst\">${textResult}</span>`</span>);\n});\n\n<span class=\"hljs-comment\">// Si la requête a un problème, la promesse est rejetée avec une erreur</span>\nfetchPromise.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">fetchError</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Une erreur a eu lieu pendant la requête&quot;</span>, fetchError);\n});\n\n<span class=\"hljs-comment\">// S&#x27;il y a une erreur pendant le parsing, je peux la récupérer</span>\nparsePromise.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">parseError</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Une erreur a eu lieu pendant le parsing&quot;</span>, parseError);\n});\n\n<span class=\"hljs-comment\">// Cela peut aussi être écrit</span>\nfetch(<span class=\"hljs-string\">&quot;http://putaindecode.io&quot;</span>)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">fetchResult</span> =&gt;</span> fetchResult.text())\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">textResult</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Voici le résultat : <span class=\"hljs-subst\">${textResult}</span>`</span>);\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(\n      <span class=\"hljs-string\">&quot;Une erreur a eu lieu pendant la requête ou le parsing&quot;</span>,\n      fetchError,\n    );\n  });\n\n<span class=\"hljs-comment\">// Ou encore</span>\nfetch(<span class=\"hljs-string\">&quot;http://putaindecode.io&quot;</span>)\n  .then(\n    <span class=\"hljs-function\"><span class=\"hljs-params\">fetchResult</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> fetchResult.text();\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-params\">fetchError</span> =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Une erreur a eu lieu pendant la requête&quot;</span>, fetchError);\n    },\n  )\n  .then(\n    <span class=\"hljs-function\"><span class=\"hljs-params\">textResult</span> =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Voici le résultat : <span class=\"hljs-subst\">${textResult}</span>`</span>);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-params\">parseError</span> =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Une erreur a eu lieu pendant le parsing&quot;</span>, parseError);\n    },\n  );\n</code></pre>\n<h2>Mais comment je crée mes propres promesses ?</h2>\n<p>C'est bien beau d'utiliser les promesses, mais c'est encore mieux de savoir\ncréer les vôtres ! Je vous rassure, c'est très simple.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> functionThatReturnAPromise = <span class=\"hljs-function\"><span class=\"hljs-params\">success</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// On utilise la classe Promise pour en créer une, le constructeur prend 2</span>\n  <span class=\"hljs-comment\">// fonctions en paramètre :</span>\n  <span class=\"hljs-comment\">// - resolve que l&#x27;on pourra appeler avec le résultat de notre fonction</span>\n  <span class=\"hljs-comment\">// - reject que l&#x27;on pourra appeler avec une erreur s&#x27;il y a une erreur</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (success) {\n      resolve(<span class=\"hljs-string\">&quot;success&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      reject(<span class=\"hljs-string\">&quot;failed&quot;</span>);\n    }\n  });\n};\n\n<span class=\"hljs-comment\">// Vous pouvez maintenant utiliser votre fonction comme vu précédemment</span>\nfunctionThatReturnAPromise(success)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(res))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(error));\n\n<span class=\"hljs-comment\">// équivalent dans notre cas à</span>\nfunctionThatReturnAPromise(success).then(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(res),\n  <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(error),\n);\n</code></pre>\n<h2>Et demain ?</h2>\n<p>Une fonctionnalité encore plus pratique que les promesses arrive en JavaScript,\nles mots-clés <code>async</code> et <code>await</code> ! Ces mots-clés vous permettront d'avoir un\ncode encore plus lisible quand vous ferez de l'asynchrone, mais ça ne concerne\npas ES2015 :)</p>\n"}