{"slug":"formatez-votre-javascript-avec-prettier","filename":"2017-03-08-formatez-votre-javascript-avec-prettier","title":"Formatez votre JavaScript avec prettier","date":"Wed, 08 Mar 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-03-08T00:00:00.000Z","title":"Formatez votre JavaScript avec prettier","author":"zoontek","oldSlug":"js/prettier","slug":"formatez-votre-javascript-avec-prettier"},"body":"<p>Rob Pike et Ken Thompson ont conçu le langage de programmation Go de façon à ce\nque celui-ci soit à portée des jeunes développeurs : si vous découvrez et\ncommencez à apprendre le Go le lundi, vous devriez être en mesure d'être\nproductif le mercredi. Le langage est extrêmement minimaliste, il y a rarement\nplus d'une façon de faire quelque chose.</p>\n<p>Seulement voilà, le développeur torturé se posera toujours un tas de questions\nessentielles : tabs ou spaces ? 2, 4 ou 8 spaces ? Single quotes ou double\nquotes ? Après quelles structures de contrôle passer une ligne ? Mais aussi les\néternels : vim ou emacs ? Flow ou TypeScript ? Maintenir ce projet Angular 1 ou\ndémissionner comme un prince ?</p>\n<p><em>N.B. : Pour information, les bonnes réponses sont bien évidemment spaces, 2,\nsingle quotes, vim, flow, la démission</em></p>\n<p>C'est pour répondre à ce problème (enfin, ceux liés au formatage de votre code)\nque Go intègre un formatting tool (<code>fmt</code>, comme la commande Unix), intitulé\n<a href=\"https://golang.org/cmd/gofmt/\">gofmt</a>.</p>\n<ol>\n<li>Vous codez comme vous le sentez</li>\n<li>Vous sauvegardez votre fichier</li>\n<li>Votre code est automatiquement formaté</li>\n<li>Vous vous sentez frustré</li>\n<li>Très vite, vous vous rendez compte que c'est pour votre bien, et que perdre\ndu temps ou débattre sur ce genre de détails, c'est tout sauf utile</li>\n</ol>\n<p>Autre avantage non négligeable : le code Go que vous trouverez dans d'autres\npackages, des exemples, etc. sera toujours formaté de la même façon.</p>\n<p><em>À noter : Reason offre quelque chose de similaire avec\n<a href=\"https://facebook.github.io/reason/tools.html\">refmt</a>.</em></p>\n<p>Cette solution officielle n'existe pas en JS. Mais c'est ici qu'intervient\n<a href=\"https://github.com/prettier/prettier\">prettier</a> (et non\n<a href=\"https://www.npmjs.com/package/jsfmt\">jsfmt</a>, qui existe mais ne semble plus\nmaintenu), un projet relativement récent, en version <code>0.21</code> à l'heure où j'écris\nces lignes. Compatible <em>out of the box</em> avec le JS ES2017, JSX, flow, il offre\négalement le moins de configuration possible (ce qui est une bonne chose). Le\nprojet est activement suivi par Facebook, qui discute même la possibilité de\ns'en servir sur la codebase de\n<a href=\"https://github.com/facebook/react/pull/9101\">React</a>.</p>\n<h2>Comment ça fonctionne ?</h2>\n<p>Croyez-le ou non, ce n'est pas &quot;tellement&quot; complexe. À la manière de babel ou\nflow, prettier utilise un AST parser (Abstract Syntax Tree parser) afin\nd'analyser le contenu de votre fichier JS, suite à quoi il va simplement\nformater votre code sans tenir compte de la forme précédente, en ne gardant que\nce qui est important: le fond, pas la forme.</p>\n<p>Je vous invite à jouer avec <a href=\"https://astexplorer.net/\">AST explorer</a> pour\ncomprendre beaucoup plus simplement comment tout cela fonctionne.</p>\n<h2>Installation</h2>\n<pre><code class=\"hljs language-console\">npm install --save-dev prettier\n</code></pre>\n<p>Ou, pour les meilleurs d'entre vous :</p>\n<pre><code class=\"hljs language-console\">yarn add --dev prettier\n</code></pre>\n<p>¯\\<em>( ツ )</em>/¯</p>\n<h2>Configuration</h2>\n<p>Car oui, il y en a tout de même un peu. Il est possible de régler:</p>\n<ul>\n<li>La longueur maximale des lignes (<code>printWidth</code>, <code>80</code> caractères par défaut)</li>\n<li>Le nombre d'espaces pour l'indentation (<code>tabWidth</code>, <code>2</code> par défaut, pas de\ntabs)</li>\n<li>Single quotes / double quotes (<code>singleQuote</code>, <code>false</code> par défaut)</li>\n<li>S'il faut ajouter des virgules en fin de certaines structures (comme les\nobjets, mais aussi dans les paramètres de fonction, ce qui est possible depuis\npeu) (<code>trailingComma</code>, <code>none</code> par défaut, <code>es5</code> et <code>all</code> sont également\npossibles)</li>\n<li>S'il faut ajouter des espaces dans un objet écrit sur une seule ligne\n(<code>bracketSpacing</code>, <code>true</code> par défaut)</li>\n<li>Comment fermer les balises JSX (<code>jsxBracketSameLine</code>, <code>false</code> par défaut)</li>\n<li>Quel parser utiliser (<code>parser</code>, <code>babylon</code> par défaut, <code>flow</code> est disponible)</li>\n</ul>\n<blockquote>\n<p>Mais attends… Si l'on peut malgré tout configurer tout ça, ce n'est plus\nvraiment un style standard ?</p>\n</blockquote>\n<p>Oui et non, car il y aura toujours beaucoup de détails sur lesquels il nous sera\nimpossible de choisir, les options resteront minimalistes. Par exemple, vous ne\npourrez jamais retirer les points-virgules.</p>\n<p><code>EDIT: Il semblerait que malgré ce qui a pu être annoncé par l'auteur de prettier, une option --no-semicolons soit dans les tuyaux.</code></p>\n<p>Dans tous les cas, prettier reste un outil extrêmement pratique pour forcer le\nformatage du code au sein de votre équipe.</p>\n<p>Ouvrez votre <code>package.json</code>, c'est parti.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;prettify&quot;</span>: <span class=\"hljs-string\">&quot;prettier src/**/*.js&quot;</span>\n  },\n  <span class=\"hljs-attr\">&quot;devDependencies&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;prettier&quot;</span>: <span class=\"hljs-string\">&quot;^0.21.0&quot;</span>\n  }\n}\n</code></pre>\n<p><code>npm run prettify</code> ou <code>yarn run prettify</code> formateront automatiquement tous les\nfichiers <code>.js</code> contenus dans votre dossier <code>/src</code>. Bon j'avoue, c'est assez\nbasique comme usage. Ajoutons-y notre config préférée.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;prettify&quot;</span>:\n      <span class=\"hljs-string\">&quot;prettier --single-quote --trailing-comma all --write &#x27;{src,__{tests,mocks}__}/**/*.js&#x27;&quot;</span>\n  },\n  <span class=\"hljs-attr\">&quot;devDependencies&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;prettier&quot;</span>: <span class=\"hljs-string\">&quot;^0.21.0&quot;</span>\n  }\n}\n</code></pre>\n<p><code>npm run prettify</code> ou <code>yarn run prettify</code> formateront maintenant automatiquement\ntous les fichiers <code>.js</code> contenus dans vos dossiers <code>/src</code>, <code>__tests__</code> et\n<code>__mocks__</code>, en utilisant le parser de flow, préférant les single quotes et en\najoutant une virgule en fin de chaque structure possible.</p>\n<p>OK. Mais si un membre de l'équipe oublie d'exécuter le script avant de commiter\nson code ? <strong>We got this !</strong> (avec 2 dépendances de plus).</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;precommit&quot;</span>: <span class=\"hljs-string\">&quot;lint-staged&quot;</span>,\n    <span class=\"hljs-attr\">&quot;prettify&quot;</span>:\n      <span class=\"hljs-string\">&quot;prettier --single-quote --trailing-comma all --write &#x27;{src,__{tests,mocks}__}/**/*.js&#x27;&quot;</span>\n  },\n  <span class=\"hljs-attr\">&quot;lint-staged&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;{src,__{tests,mocks}__}/**/*.js&quot;</span>: [\n      <span class=\"hljs-string\">&quot;prettier --single-quote --trailing-comma all --write&quot;</span>,\n      <span class=\"hljs-string\">&quot;git add&quot;</span>\n    ]\n  },\n  <span class=\"hljs-attr\">&quot;devDependencies&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;husky&quot;</span>: <span class=\"hljs-string\">&quot;^0.13.2&quot;</span>,\n    <span class=\"hljs-attr\">&quot;lint-staged&quot;</span>: <span class=\"hljs-string\">&quot;^3.3.1&quot;</span>,\n    <span class=\"hljs-attr\">&quot;prettier&quot;</span>: <span class=\"hljs-string\">&quot;^0.21.0&quot;</span>\n  }\n}\n</code></pre>\n<h2>Les plugins</h2>\n<p>Si vous ne pouvez pas attendre le moment du commit pour admirer votre code\nfraichement formaté, il existe déjà pas mal de plugins, pour pas mal d'éditeurs\n: <code>prettier-atom</code>, <code>prettier-vscode</code>, <code>Jsprettier</code> (pour Sublime Text), mais\naussi pour emacs, vim, les IDE Jetbrain, etc. Tout est dans le\n<a href=\"https://github.com/prettier/prettier/blob/master/README.md\">README</a>.</p>\n<p><em>Protip: Inutile de vous conforter au style de formatage de votre équipe au sein\nde votre éditeur si le code est à nouveau formaté en pre-commit.</em></p>\n<h2>Quelques exemples, c'est possible ?</h2>\n<p>J'ai mieux. Il est possible\nd'<a href=\"https://prettier.github.io/prettier\">essayer en ligne</a> ! ✨</p>\n<h2>Donc c'est bon, tu conseilles ?</h2>\n<p>C'est tout de même à réfléchir. Le projet est encore jeune et en beta, même s'il\névolue extrêmement vite. Tout n'est pas encore parfaitement supporté, mais je\nvous rassure, si vous n'utilisez pas le flow-parser vous ne risquez pas de\nrencontrer beaucoup de problèmes avec la dernière version.</p>\n<p>Des projets tels que\n<a href=\"https://github.com/facebook/immutable-js/commit/9bcc8b54a17c3bbc94d70864121784bc91011e8f\">immutable-js</a>,\n<a href=\"https://github.com/necolas/react-native-web/commit/a2f25a46c495ca53a75e728cfb14dbdf67cdb342\">react-native-web</a>\net\n<a href=\"https://github.com/babel/babel/commit/bdbe2cfbc5ab5ba6f528b7ee3e4bf5ed940a47af\">babel</a>\ny sont déjà passés. Pourquoi pas vous ? 😉</p>\n"}