{"slug":"angular-1-5-un-pas-de-plus-vers-les-web-components","filename":"2016-04-12-angular-1-5-un-pas-de-plus-vers-les-web-components","title":"Angular 1.5 : un pas de plus vers les web-components","date":"Tue, 12 Apr 2016 00:00:00 GMT","draft":false,"meta":{"date":"2016-04-12T00:00:00.000Z","title":"Angular 1.5 : un pas de plus vers les web-components","author":"Freezystem","oldSlug":"js/angular/components","slug":"angular-1-5-un-pas-de-plus-vers-les-web-components"},"body":"<p>Ce post a été écrit à la lumière du\n<a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md#150-rc1-quantum-fermentation-2016-01-15\">changelog d'Angular 1.5.0 rc1</a>.<br />\nToutes information est succeptible d'évoluer au cours des publications de nouvelles\nversions du framework.</p>\n<h2>Le petit nouveau : <code>.component()</code></h2>\n<p>Avec l'arrivée imminente de la version 2, Angular commence lentement à préparer\nla transition et apporte de nombreux changements à la v1 pour tenter de combler\nl'écart entre les deux et rendre les changements moins pénibles.</p>\n<p>On voit donc progressivement apparaitre de nouvelles fonctionnalités comme :</p>\n<ul>\n<li><del>un <a href=\"https://angular.github.io/router/\">nouveau router</a> ?</del></li>\n<li>la possibilité\nd'<a href=\"https://docs.angularjs.org/api/ngResource/service/$resource#cancelling-requests\">annuler une resource</a></li>\n<li>les transclusions multiples</li>\n<li>la compilation paresseuse des transclusions</li>\n</ul>\n<p>Mais le point qui nous intéresse particulièrement ici n'est autre que le nouveau\n<em>helper</em> permettant la déclaration de similis\n<a href=\"https://fr.wikipedia.org/wiki/Composants_web\">composants web</a>, aka\nweb-components.</p>\n<p>Les habitués connaissaient déjà\n<a href=\"https://docs.angularjs.org/api/ng/service/$compile\"><code>angular.directive()</code></a>, un\n<em>helper</em> permettant la déclaration de composants réutilisables.\n<code>angular.directive()</code> s'est donc enrichi au cours des années en faisant un atout\nincontournable du framework de par sa flexibilité et sa simplicité.</p>\n<p>Mais toutes ces possibilités de déclaration n'étaient plus vraiment en phase\navec les spécifications du W3C, <code>angular.component()</code> se présente donc un retour\naux sources.</p>\n<h2>De <code>.directive()</code> à <code>.component()</code></h2>\n<p>Pour comprendre à quoi on arrive, il faut savoir de quoi on est parti. De toute\névidence vous ne pourrez pas transformer toutes vos vieilles directives en\ncomposants web, du moins, pas sans compromis.</p>\n<p>Pour rappel une directive Angular est définie par un objet JavaScript pouvant\ncomporter les attributs suivants :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> directiveObj = {\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>,\n  <span class=\"hljs-attr\">transclude</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">restrict</span>: <span class=\"hljs-string\">&quot;EA&quot;</span>,\n  <span class=\"hljs-attr\">scope</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">bindToController</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">controller</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{},\n  <span class=\"hljs-attr\">controllerAs</span>: <span class=\"hljs-string\">&quot;stringIdentifier&quot;</span>,\n};\n</code></pre>\n<h3>Restriction à la forme élémentaire</h3>\n<p>Ceux qui utilisent les directives Angular de manière régulière ne sont pas sans\nsavoir qu'il est possible de les instancier de 4 manières différentes dans son\nHTML en modifiant l'attribut <code>restrict</code> :</p>\n<ul>\n<li>comme un élément avec <code>restrict : 'E'</code></li>\n<li>comme un attribut avec <code>restrict : 'A'</code></li>\n<li>comme une classe avec <code>restrict : 'C'</code> (déconseillé)</li>\n<li>comme un commentaire avec <code>restrict : 'M'</code> (fortement déconseillé)</li>\n</ul>\n<p>On peut aussi autoriser l'utilisation mixe en combinant les lettres :\n<code>restrict : 'EAC'</code></p>\n<p><code>restrict</code> n'est donc plus configurable et est restreint <em>(sans mauvais jeu de\nmot)</em> à la forme <code>'E'</code> en faisant un composant de façon claire.</p>\n<h3>Isolement du scope</h3>\n<p>Contrairement à <code>.directive()</code>, <code>.component()</code> force l'isolement du scope, ainsi\non colle à la specification : le composant web est agnostique du contexte.</p>\n<p>l'attribut <code>scope</code> est donc forcé à <code>{}</code> et n'est plus configurable.</p>\n<h3>Passage de paramètres via <code>bindings</code></h3>\n<p>La propriété <code>scope</code> n'étant plus disponible <code>component</code>. Il faut à présent\nutiliser la propriété <code>bindings</code>. La syntaxe de celle-ci est équivalent à celle\nde la propriété <code>scope</code>. Mais les éléments passés sont automatiquement attachés\nà l'instance du contrôleur lié au <code>component</code>.</p>\n<p>Notons, que s'il reste possible d'utiliser la syntaxe <code>=</code> (two-way data\nbinding), celle-ci est déconseillée au profit de la syntaxe <code>&lt;</code> (one-way data\nbinding).</p>\n<h3>Utilisation <em>forcée</em> de <code>controllerAs</code></h3>\n<p>Déjà présenté comme une\n<em><a href=\"https://toddmotto.com/digging-into-angulars-controller-as-syntax/\">best practice</a></em>,\n<code>controllerAs</code> fait son chemin de manière évidente jusqu'au nouveau <em>helper</em>\n<code>.component()</code> son utilisation va de pair avec celle de <code>bindings</code>.</p>\n<p>L'attribut, qui prend une chaine de caractères pour valeur, est à présent\nfacultatif. S'il est omit le controller est automatiquement aliassé par l'objet\n<code>$ctrl</code>.</p>\n<h2>Exemple de migration</h2>\n<p>Prenons l'exemple d'une directive simple et transformons la en composant Angular\npour mettre en évidence l'ensemble des changements :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello-world</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;World&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello-world</span>&gt;</span>\n</code></pre>\n<p>La syntaxe <em>directive</em> :</p>\n<pre><code class=\"hljs language-js\">angular.directive(<span class=\"hljs-string\">&quot;helloWorld&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">helloWorld</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">restrict</span>: <span class=\"hljs-string\">&quot;E&quot;</span>,\n    <span class=\"hljs-attr\">scope</span>: {},\n    <span class=\"hljs-attr\">bindToController</span>: {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;@&quot;</span>,\n    },\n    <span class=\"hljs-attr\">controller</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">helloWorldCtrl</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">this</span>.logName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);\n      };\n    },\n    <span class=\"hljs-attr\">controllerAs</span>: <span class=\"hljs-string\">&quot;hw&quot;</span>,\n    <span class=\"hljs-attr\">template</span>:\n      <span class=\"hljs-string\">&#x27;&lt;div&gt;&lt;span ng-click=&quot;hw.logName()&quot;&gt;Hello {{hw.name}}!&lt;/span&gt;&lt;/div&gt;&#x27;</span>,\n  };\n});\n</code></pre>\n<p>La syntaxe <em>component</em> :</p>\n<pre><code class=\"hljs language-js\">angular.component(<span class=\"hljs-string\">&quot;helloWorld&quot;</span>, {\n  <span class=\"hljs-attr\">bindings</span>: {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;@&quot;</span>,\n  },\n  <span class=\"hljs-attr\">controller</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">helloWorldCtrl</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.logName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);\n    };\n  },\n  <span class=\"hljs-attr\">template</span>:\n    <span class=\"hljs-string\">&#x27;&lt;div&gt;&lt;span ng-click=&quot;$ctrl.logName()&quot;&gt;Hi {{$ctrl.name}}!&lt;/span&gt;&lt;/div&gt;&#x27;</span>,\n});\n</code></pre>\n<p>Les changements sont légers mais permettent une lecture améliorée des attributs.\nLe composant est donc une version simplifiée de la directive, plus en phase avec\nla logique d'Angular 2.</p>\n<p>Ce nouveau <em>helper</em> permet donc l'introduction progressive des <em>web-components</em>\nau sein d'Angular en vue de leur intégration et utilisation active dans la\nversion 2.</p>\n"}