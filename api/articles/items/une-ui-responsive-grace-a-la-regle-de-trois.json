{"slug":"une-ui-responsive-grace-a-la-regle-de-trois","filename":"2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois","title":"Une UI responsive gr√¢ce √† la r√®gle de trois","date":"Thu, 21 Mar 2019 00:00:00 GMT","draft":false,"meta":{"date":"2019-03-21T00:00:00.000Z","title":"Une UI responsive gr√¢ce √† la r√®gle de trois","author":"zoontek","slug":"une-ui-responsive-grace-a-la-regle-de-trois"},"body":"<p>Vous venez de coder un composant <code>TwitterButton</code> (avec React, Vue, en suivant une m√©thodo BEM, OOCSS, ou autre: c'est comme vous voulez) et franchement c'est du beau boulot: le rendu est vraiment tr√®s joli, kudos au designer.</p>\n<p>Seulement tr√®s vite, ce dernier jette un coup d'oeil √† la recette et vous fait un petit retour parce qu'il :</p>\n<ol>\n<li>vous a fait parvenir des maquettes &quot;mobile-first&quot; et trouve le r√©sultat &quot;un peu petit sur son iMac 27 pouces&quot;</li>\n<li>vous a fait parvenir des maquettes &quot;desktop-first&quot; et trouve le r√©sultat &quot;un peu gros sur son iPhone XS&quot;</li>\n</ol>\n<p>Vous ajoutez donc quelques media queries pour adapter le style de ce bouton en fonction de la largeur du viewport. Ses dimensions changent maintenant lorsque la page fait plus de <code>768px</code> de large, puis lorsqu'elle fait plus de <code>968px</code> et enfin plus de <code>1200px</code>. Un chouia fastidieux.</p>\n<p>Vous pestez un peu sur votre coll√®gue qui aurait d√ª vous fournir toutes les maquettes (alors qu'il n'a pas forc√©ment eu le temps de les cr√©er) et lui peste car vous l'avez d√©rang√© toutes les 2 minutes pour obtenir ces mesures interm√©diaires.</p>\n<p>Il vous reste 72 composants √† coder. Super ambiance dans les bureaux üëèüèº</p>\n<p>Plut√¥t que de demander √† votre sup√©rieur Jean-Michel de prendre parti pour r√©soudre ce probl√®me, nous allons faire appel aux <strong>MATHS</strong>.</p>\n<h2>L'interpolation lin√©aire entre 2 valeurs</h2>\n<p>Des termes foutrement complexes pour d√©finir quelque chose de tr√®s simple: il s'agit de faire transiter une valeur <strong><em>Œ≥</em></strong> de <strong><em>Œ±</em></strong> √† <strong><em>Œ≤</em></strong> de fa√ßon lin√©aire et dans notre cas born√© dans un intervalle donn√©e.</p>\n<p><img src=\"/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/linear-interpolation.png\" alt=\"Explication sch√©matis√©e de l'interpolation lin√©aire born√©e\" /></p>\n<p>En partant de √ßa, nous allons d√©finir une UI fluide √† l'aide de 3 variables :</p>\n<ul>\n<li><code>baseFontSize: number (px value)</code></li>\n<li><code>scaleRatio: number (abs value)</code></li>\n<li><code>fluidRange: [number (px value), number (px value)]</code></li>\n</ul>\n<p>Prenons l'exemple d'un site web o√π, en mobile-first, la taille de police par d√©faut (<code>baseFontSize</code>) est de <code>16px</code>. On souhaiterait que celle-ci soit de <code>20px</code> lorsque le viewport fait plus de <code>1600px</code> de large (donc que le coefficient d'agrandissement - <code>scaleRatio</code> - soit de <code>20 / 16 = 1.25</code>) et que la transition pour passer de 16 √† 20 ne se d√©clenche pas avant que le viewport fasse <strong>au moins</strong> <code>480px</code> de large.</p>\n<p><img src=\"/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/linear-interpolation-with-values.png\" alt=\"Exemple d'interpolation lin√©aire born√©e avec valeurs\" /></p>\n<p>La fonction suivante va nous permettre d'obtenir cette fameuse interpolation lin√©aire sous le forme d'une formule CSS avec <code>calc()</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// on utilise JS par praticit√©</span>\n\n<span class=\"hljs-keyword\">let</span> getLinearInterpolation = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  baseFontSize, <span class=\"hljs-comment\">// number</span>\n  scaleRatio, <span class=\"hljs-comment\">// number</span>\n  fluidRange <span class=\"hljs-comment\">// [number, number]</span>\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> maxFontSize = baseFontSize * scaleRatio;\n  <span class=\"hljs-keyword\">let</span> [rangeStart, rangeEnd] = fluidRange;\n  <span class=\"hljs-keyword\">let</span> multiplier = (baseFontSize - maxFontSize) / (rangeStart - rangeEnd);\n  <span class=\"hljs-keyword\">let</span> fixed = maxFontSize - multiplier * rangeEnd;\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`calc(<span class=\"hljs-subst\">${fixed}</span>px + <span class=\"hljs-subst\">${<span class=\"hljs-number\">100</span> * multiplier}</span>vw)`</span>;\n};\n</code></pre>\n<p>Si vous copiez-collez √ßa comme un sagouin dans la console devtools de votre navigateur web et tentez un essai avec les valeurs de notre exemple, vous obtiendrez normalement :</p>\n<p><img src=\"/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/devtools-result.png\" alt=\"Le r√©sultat de notre appel de fonction\" /></p>\n<p>Voyons maintenant comment nous servir de √ßa.</p>\n<h2>Un coefficient d'agrandissement global</h2>\n<p>L'int√©r√™t de cette valeur, c'est qu'elle va nous permettre de modifier toutes les dimensions que l'on veut de fa√ßon progressive et <strong>proportionnelle</strong>.</p>\n<p>Petit exemple, simple, basique :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>Hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;red-block&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-comment\">// exemple avec SCSS</span>\n\n<span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>; <span class=\"hljs-comment\">// baseFontSize</span>\n}\n\n<span class=\"hljs-keyword\">@media</span> (min-width: <span class=\"hljs-number\">480px</span> /* fluidRange start */) {\n  <span class=\"hljs-selector-tag\">html</span> {\n    <span class=\"hljs-comment\">// l&#x27;interpolation lin√©aire</span>\n    <span class=\"hljs-attribute\">font-size</span>: calc(<span class=\"hljs-number\">14.285714285714285px</span> + <span class=\"hljs-number\">0.35714285714285715vw</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">@media</span> (min-width: <span class=\"hljs-number\">1600px</span> /* fluidRange end */) {\n  <span class=\"hljs-selector-tag\">html</span> {\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-comment\">// baseFontSize * scaleRatio</span>\n  }\n}\n\n<span class=\"hljs-comment\">// par d√©faut dans les navigateurs 1rem = 16px, cette fonction nous simplifie les divisions</span>\n<span class=\"hljs-comment\">// si vous faites du CSS-in-JS, let fluid = v =&gt; `${v / 16}rem` fait le job</span>\n<span class=\"hljs-keyword\">@function</span> fluid(<span class=\"hljs-variable\">$value</span>) {\n  <span class=\"hljs-keyword\">@return</span> <span class=\"hljs-variable\">$value</span> / <span class=\"hljs-number\">16</span> + rem;\n}\n\n<span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-comment\">// si largeur du viewport &lt; 480px -&gt; font-size = 24px</span>\n  <span class=\"hljs-comment\">// si largeur du viewport &gt; 1600px -&gt; font-size = 24 * 1.25 = 30px</span>\n  <span class=\"hljs-comment\">// si 480px &lt; largeur du viewport &lt; 1600px -&gt; 24px &lt; font-size &lt; 30px</span>\n  <span class=\"hljs-attribute\">font-size</span>: fluid(<span class=\"hljs-number\">24</span>);\n}\n\n<span class=\"hljs-selector-class\">.red-block</span> {\n  <span class=\"hljs-attribute\">background-color</span>: red;\n  <span class=\"hljs-comment\">// les dimensions seront contenues entre 100px et 100 * 1.25 = 125px</span>\n  <span class=\"hljs-attribute\">height</span>: fluid(<span class=\"hljs-number\">100</span>);\n  <span class=\"hljs-attribute\">width</span>: fluid(<span class=\"hljs-number\">100</span>);\n}\n</code></pre>\n<figure>\n  <a href=\"/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/basic-example-result.gif\">\n    <img src=\"/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/basic-example-result.gif\" alt=\"r√©sultat quand on joue sur la largeur du viewport\" />\n  </a>\n  <figcaption>(Cliquez sur le gif pour le voir en taille r√©elle)</figcaption>\n</figure>\n<h2>Forcer une font-size par d√©faut, c'est MAL</h2>\n<p><em>(On va se mentir et tenter d'ignorer le fait que tout le monde utilise le zoom)</em></p>\n<p>En effet, l'utilisateur peut toujours choisir d'avoir une taille de police plus petite ou plus grande que celle par d√©faut (<code>16px</code>) et c'est franchement pas tr√®s accessible de forcer.</p>\n<p>On va donc modifier notre fonction JS et tenir compte de √ßa.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> getCSSFluidConfig = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  baseFontSize, <span class=\"hljs-comment\">// number</span>\n  scaleRatio, <span class=\"hljs-comment\">// number</span>\n  fluidRange <span class=\"hljs-comment\">// [number, number]</span>\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> toRem = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> value / <span class=\"hljs-number\">16</span>;\n\n  <span class=\"hljs-keyword\">let</span> maxFontSize = baseFontSize * scaleRatio;\n  <span class=\"hljs-keyword\">let</span> baseRemFontSize = toRem(baseFontSize);\n  <span class=\"hljs-keyword\">let</span> maxRemFontSize = toRem(maxFontSize);\n\n  <span class=\"hljs-keyword\">let</span> [rangeStart, rangeEnd] = fluidRange;\n  <span class=\"hljs-comment\">// on √©vite rem pour les media queries: merci Safari</span>\n  <span class=\"hljs-comment\">// pas de soucis pour utiliser toRem malgr√© tout:</span>\n  <span class=\"hljs-comment\">// les media queries sont √† la racine du document</span>\n  <span class=\"hljs-keyword\">let</span> emRangeStart = toRem(rangeStart);\n  <span class=\"hljs-keyword\">let</span> emRangeEnd = toRem(rangeEnd);\n\n  <span class=\"hljs-keyword\">let</span> multiplier =\n    (baseRemFontSize - maxRemFontSize) / (emRangeStart - emRangeEnd);\n  <span class=\"hljs-keyword\">let</span> fixed = maxRemFontSize - multiplier * emRangeEnd;\n\n  <span class=\"hljs-comment\">// on en profite √©galement pour retourner l&#x27;int√©gralit√© du CSS voulu</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`html { font-size: <span class=\"hljs-subst\">${baseRemFontSize}</span>rem }\n\n@media (min-width: <span class=\"hljs-subst\">${emRangeStart}</span>em) {\n  html { font-size: calc(<span class=\"hljs-subst\">${fixed}</span>rem + <span class=\"hljs-subst\">${<span class=\"hljs-number\">100</span> * multiplier}</span>vw) }\n}\n\n@media (min-width: <span class=\"hljs-subst\">${emRangeEnd}</span>em) {\n  html { font-size: <span class=\"hljs-subst\">${maxRemFontSize}</span>rem }\n}`</span>;\n};\n</code></pre>\n<!-- ![Le r√©sultat de notre appel de fonction](/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/devtools-responsive-result.png) -->\n<p>Et voil√† ! √áa continue de faire ce que l'on veut, mais en prenant en compte la taille de police par d√©faut d√©finie par l'utilisateur.</p>\n<h2>Un exemple un peu plus complexe</h2>\n<p>Vous vous √™tes empress√© d'emb√™ter le designer √† nouveau afin de d√©terminer ces 3 variables ensemble: √ßa sera donc une <code>font-size</code> comprise entre <code>16px</code> et <code>18px</code> (donc une UI qui scale jusqu'√† <code>18 / 16</code> = <code>1.125</code> ‚Ä¶vous √™tes encore frileux √† l'id√©e) entre <code>480px</code> et <code>1440px</code> !</p>\n<p>Il est maintenant temps de modifier ce fameux bouton.</p>\n<pre><code class=\"hljs language-js\">getCSSFluidConfig(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">1.125</span>, [<span class=\"hljs-number\">480</span>, <span class=\"hljs-number\">1440</span>]);\n\n<span class=\"hljs-comment\">/* -&gt; &quot;html { font-size: 1rem }\n\n@media (min-width: 30em) {\n  html { font-size: calc(0.9375rem + 0.20833333333333334vw) }\n}\n\n@media (min-width: 90em) {\n  html { font-size: 1.125rem }\n}&quot; */</span>\n</code></pre>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-comment\">// le code g√©n√©r√©</span>\n\n<span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1rem</span>;\n}\n\n<span class=\"hljs-keyword\">@media</span> (min-width: <span class=\"hljs-number\">30em</span>) {\n  <span class=\"hljs-selector-tag\">html</span> {\n    <span class=\"hljs-attribute\">font-size</span>: calc(<span class=\"hljs-number\">0.9375rem</span> + <span class=\"hljs-number\">0.20833333333333334vw</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">@media</span> (min-width: <span class=\"hljs-number\">90em</span>) {\n  <span class=\"hljs-selector-tag\">html</span> {\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.125rem</span>;\n  }\n}\n\n<span class=\"hljs-comment\">// fonctions utilitaires</span>\n\n<span class=\"hljs-keyword\">@function</span> fluid(<span class=\"hljs-variable\">$value</span>) {\n  <span class=\"hljs-keyword\">@return</span> <span class=\"hljs-variable\">$value</span> / <span class=\"hljs-number\">16</span> + rem;\n}\n\n<span class=\"hljs-comment\">// le reste du CSS</span>\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-family</span>: -apple-system, BlinkMacSystemFont, <span class=\"hljs-string\">&quot;Segoe UI&quot;</span>, Roboto, Helvetica,\n    Arial, sans-serif, <span class=\"hljs-string\">&quot;Apple Color Emoji&quot;</span>, <span class=\"hljs-string\">&quot;Segoe UI Emoji&quot;</span>, <span class=\"hljs-string\">&quot;Segoe UI Symbol&quot;</span>;\n}\n\n<span class=\"hljs-selector-class\">.twitter-btn</span> {\n  <span class=\"hljs-attribute\">align-items</span>: center;\n  <span class=\"hljs-attribute\">display</span>: flex;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#1da1f3</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#218de4</span>; <span class=\"hljs-comment\">// il ne serait pas logique que border-width soit fluide</span>\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>; <span class=\"hljs-comment\">// idem pour border-radius</span>\n  <span class=\"hljs-attribute\">padding</span>: fluid(<span class=\"hljs-number\">4</span>);\n  <span class=\"hljs-attribute\">padding-right</span>: fluid(<span class=\"hljs-number\">8</span>);\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">5px</span> -<span class=\"hljs-number\">5px</span> rgba(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.25</span>);\n}\n\n<span class=\"hljs-selector-class\">.twitter-btn</span> svg {\n  <span class=\"hljs-attribute\">height</span>: fluid(<span class=\"hljs-number\">24</span>);\n  <span class=\"hljs-attribute\">width</span>: fluid(<span class=\"hljs-number\">24</span>);\n}\n\n<span class=\"hljs-selector-class\">.twitter-btn</span> <span class=\"hljs-selector-tag\">span</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;\n  <span class=\"hljs-attribute\">font-size</span>: fluid(<span class=\"hljs-number\">14</span>);\n  <span class=\"hljs-attribute\">margin-left</span>: fluid(<span class=\"hljs-number\">4</span>);\n}\n</code></pre>\n<p>Ainsi,</p>\n<ul>\n<li>la <code>font-size</code> par d√©faut fera entre <code>1rem</code> et <code>1.125rem</code><br/>(<code>16px</code> et <code>18px</code> si r√©glage navigateur par d√©faut)</li>\n<li>le <code>padding</code> de <code>.twitter-btn</code> fera entre <code>0.25rem</code> et <code>0.28125rem</code><br/>(<code>4px</code> et <code>4.5px</code>)</li>\n<li>la <code>height</code> et la <code>width</code> du svg feront entre <code>1.5rem</code> et <code>1.6875rem</code><br/>(<code>24px</code> et <code>27px</code>)</li>\n<li>etc‚Ä¶ vous avez l'id√©e, tout reste proportionnel.</li>\n</ul>\n<figure>\n  <a href=\"/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/twitter-button-result.gif\">\n    <img src=\"/public/images/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/twitter-button-result.gif\" alt=\"r√©sultat quand on joue sur la largeur du viewport\" />\n  </a>\n  <figcaption>(Cliquez sur le gif pour le voir en taille r√©elle)</figcaption>\n</figure>\n<p>La diff√©rence est <strong>tr√®s subtile</strong> (mais vous √©tiez frileux). L'avantage, c'est que si vous changez d'avis dans 3 semaines pour finalement passer sur un agrandissement de <strong>x1.5</strong> √† <code>2560px</code> de large, il vous suffira g√©n√©rer un nouveau ce petit bout de code, de copier/coller les quelques lignes obtenues au d√©but de votre fichier CSS ‚Ä¶et c'est tout ! Inutile de revenir dans les composants ou de refaire un quelconque calcul.</p>\n<p>Pour que ce soit encore plus simple, je vous ai concoct√© un petit g√©n√©rateur :</p>\n<p><iframe\n  width=\"1px\"\n  height=\"510\"\n  scrolling=\"no\"\n  style=\"border: 2px solid rgba(0,0,0,0.1); border-radius: 10px; width: 1px; min-width: 100%;\"\n  src=\"/public/misc/articles/2019-03-21-une-ui-responsive-grace-a-la-regle-de-trois/generator.html\"></p>\n</iframe>\n<p>Il ne vous qu'√† profiter de toute ces heures gagn√©es en invitant votre (maintenant pote) graphiste √† boire une bi√®re ! üçª</p>\n"}