{"slug":"decouverte-de-preact","filename":"2017-12-21-decouverte-de-preact","title":"Découverte de Preact","date":"Thu, 21 Dec 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-12-21T00:00:00.000Z","title":"Découverte de Preact","author":"drazik","oldSlug":"js/preact","slug":"decouverte-de-preact"},"body":"<p>Preact est une alternative à React. Plus précisément, voici sa description\nofficielle :</p>\n<blockquote>\n<p>Fast 3kB alternative to React with the same ES6 API.</p>\n</blockquote>\n<p>Cette description semble alléchante au premier coup d'oeil. Si on peut avoir un\nReact de 3ko, banco, on switch !</p>\n<p>Pas si vite. L'API est la même, mais rien n'indique que Preact est un React qui\ntient dans 3 petits ko (bien que c'est ce qu'on peut parfois lire). Ça ferait\nbien longtemps que les ingénieurs de Facebook auraient réagit s'il était\npossible de faire en sorte que React soit si petit. Preact fait donc des\ncompromis, des choix, et présente donc des différences avec React qu'il faut\nconnaître et prendre en compte avant d'envisager de switcher.</p>\n<p><em>Cet article est destiné aux gens qui connaissent déjà au moins un petit peu\nReact. Tous les concepts liés à (P)React ne seront pas détaillés. Si vous ne\nconnaissez rien à React, je vous invite à lire\n<a href=\"/fr/articles/js/react/\">l'introduction à React</a>.</em></p>\n<h2>Quelles sont les différences entre React et Preact ?</h2>\n<dl>\n<dt>Les différences entre React et Preact peuvent être rangées dans deux catégories</dt>\n<dd>ce qu'il &quot;manque&quot; à Preact, et ce qui est là, mais différent.\n</dd>\n</dl>\n<h3>Ce qu'il &quot;manque&quot;</h3>\n<p>Premièrement, Preact se concentre uniquement sur le DOM. Cela signifie qu'il\nn'existe pas d'équivalent à\n<a href=\"https://facebook.github.io/react-native/\">react-native</a>,\n<a href=\"https://facebook.github.io/react-vr/\">react-vr</a> ou tout autre\n<a href=\"http://iamdustan.com/react-renderers/\">renderer</a> du côté de Preact. Celui-ci a\npour but d'afficher du DOM le plus efficacement possible.</p>\n<p>Cette spécialisation pour le DOM permet à Preact de ne pas avoir à implémenter\nle système de Synthetic Events utilisé par React. Ainsi, Preact peut se\npermettre d'utiliser simplement le système d'événements standard du navigateur.\nIl faut bien avoir cela en tête lorsqu'on a l'habitude de travailler avec React,\ncar celui-ci corrige, ou du moins unifie certains comportements entre les\nnavigateurs (notamment sur <code>onChange</code>). Des différences dans le comportement de\nvotre app est donc à prévoir en cas de switch.</p>\n<p>Preact n'embarque pas de gestion de validation des PropTypes. Partant du\nprincipe que celles-ci ne sont pas utilisées par tout le monde, la décision a\nété prise de ne pas les inclure dans le coeur de la bibliothèque.</p>\n<p>Pour finir, Preact n'expose pas (encore, tout du moins) les nouvelles APIs de\nReact 16 telles que <code>React.Fragment</code> (dont\n<a href=\"https://github.com/developit/preact/issues/946\">le support est prévu</a>),\n<code>ReactDOM.createPortal</code> (la fonctionnalité existe tout de même sous une forme\ndifférente dans <a href=\"https://github.com/developit/preact-portal\">preact-portal</a>) ou\n<code>ReactDOM.hydrate</code>.</p>\n<h3>Ce qui est différent</h3>\n<p>Preact utilise la bibliothèque\n<a href=\"https://github.com/hyperhype/hyperscript\">hyperscript</a>, qui est une version\ngénérique de <code>React.createElement</code>. Le résultat est le même, la signature de la\nfonction <code>h()</code> exposée par hyperscript étant la même que celle de\n<code>React.createElement</code>. Il faudra quand même indiquer au compiler qu'il doit\nutiliser cette fonction pour transpiler le JSX.</p>\n<p>La méthode <code>render()</code> des composants reçoit toujours <code>this.props</code> et\n<code>this.state</code> en paramètres, ce qui permet de les destructurer directement dans\nles paramètres de la fonction, et ainsi de les traiter comme s'ils étaient\neux-mêmes des paramètres.</p>\n<p>Preact gère l'API <code>context</code>, mais il n'existe pas de <code>contextTypes</code> ni de\n<code>childContextTypes</code> (ce qui est raccord avec l'absence de <code>propTypes</code>). Tous les\nenfants reçoivent le <code>context</code> définit dans la méthode <code>getChildContext()</code> de\nleurs parents. Si plusieurs parents implémentent cette méthode, alors les\ndescendants recevront un agrégat.</p>\n<p>Dans Preact, <code>props.children</code> est un <code>Array</code>. On peut donc utiliser toutes les\nméthodes de <code>Array.prototype</code> dessus, sans avoir à passer par un équivalent de\n<code>React.Children</code>. Toutefois, certains patterns tels que le <em>function as child</em>\nnécessitent un peu de bricolage pour fonctionner.</p>\n<p>Enfin, il est possible d'utiliser l'attribut <code>class</code> sur un noeud JSX.\n<code>className</code> est aussi supporté, mais vous ne vous prendrez plus d'erreur lorsque\nvotre esprit se croira dans un fichier HTML et vous fera écrire <code>class</code>.</p>\n<h2>Comment démarrer un projet Preact ?</h2>\n<p>Pour démarrer sur de bonnes bases, le plus simple est d'utiliser\n<a href=\"https://github.com/developit/preact-cli\"><code>preact-cli</code></a>. C'est un outil en ligne\nde commande qui vous permet de créer toute la structure de base de votre\napplication. Si vous connaissez <code>create-react-app</code>, alors vous aurez deviné que\n<code>preact-cli</code> est l'équivalent pour Preact.</p>\n<p>Commençons par l'installer :</p>\n<pre><code class=\"hljs language-console\">npm install -g preact-cli\n</code></pre>\n<p>Nous avons maintenant accès à la commande <code>preact</code>. Celle-ci s'utilise de la\nmanière suivante :</p>\n<pre><code class=\"hljs language-console\">preact create &lt;template-name&gt; &lt;project-name&gt;\n</code></pre>\n<p>Où <code>&lt;template-name&gt;</code> est le nom d'un template officiel (listé sur l'org GitHub\n<a href=\"https://github.com/preactjs-templates\"><code>preactjs-template</code></a>) ou un repository\nGitHub contenant un dossier <code>template</code> (de la forme <code>&lt;username&gt;/&lt;repository&gt;</code>);\net <code>&lt;project-name&gt;</code> est le nom du dossier dans lequel la structure du projet\nsera créée. Pour notre exemple, nous utiliserons le template <code>default</code>, et le\nnom <code>test-preact</code> pour notre projet :</p>\n<pre><code class=\"hljs language-console\">preact create default test-preact\n</code></pre>\n<p>En utilisant le template <code>default</code>, nous obtenons une application qui embarque\npar défaut :</p>\n<ul>\n<li>Du code-splitting pour chaque route</li>\n<li>Votre page <code>index.html</code> prérendue pour un affichage le plus rapide possible</li>\n<li>Un ServiceWorker prêt à l'emploi (score Lighthouse 100/100 à la génération de\nl'app, ce score est bien évidemment dépendant de ce que vous faites par la\nsuite)</li>\n<li>Des metas preload en fonction de vos URL</li>\n<li>Des polyfills chargés uniquement si nécessaire</li>\n</ul>\n<p>Il ne vous reste plus qu'à écrire votre app sur ces bases solides ! Pour\ninformation, le routing est géré par\n<a href=\"https://github.com/developit/preact-router\"><code>preact-router</code></a>.</p>\n<h2>J'utilise React, je peux switcher sur Preact ?</h2>\n<p>Oui, et pour ça il y a deux possibilités : ajouter une couche de compatibilité,\nou passer purement et simplement à Preact.</p>\n<h3>Rendre Preact quasi-compatible avec React en utilisant <code>preact-compat</code></h3>\n<p>Le plus rapide est d'utiliser\n<a href=\"https://github.com/developit/preact-compat\"><code>preact-compat</code></a>. Ce module vient\ns'ajouter à Preact pour y ajouter une couche de compatibilité le rendant\ncompatible avec preque n'importe quel module écrit pour React (tant que celui-ci\nn'utilise pas les quelques bouts d'API manquants). Pour cela, <code>preact-compat</code>\nexpose l'ensemble de l'API de <code>react</code> et <code>react-dom</code>. Cela vous permettra de\ncontinuer à utiliser sereinement tous vos composants écrits spécifiquement pour\nReact, ainsi que vous son écosystème.</p>\n<p>Il faut donc l'installer, ainsi que Preact :</p>\n<pre><code class=\"hljs language-console\">npm install --save preact preact-compat\n</code></pre>\n<p>Puis il faut ajouter des alias à votre système de build, afin que tous vos\nimports de <code>react</code> et <code>react-dom</code> soient reroutés vers <code>preact-compat</code>. Par\nexemple, pour webpack :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-comment\">//... votre configuration webpack</span>\n    <span class=\"hljs-attr\">resolve</span>: {\n        <span class=\"hljs-attr\">alias</span>: {\n            <span class=\"hljs-string\">&quot;react&quot;</span>: <span class=\"hljs-string\">&quot;preact-compat&quot;</span>,\n            <span class=\"hljs-string\">&quot;react-dom&quot;</span>: <span class=\"hljs-string\">&quot;preact-compat&quot;</span>\n        }\n    }\n}\n</code></pre>\n<p>Si vous n'utilisez pas webpack, votre système de build est très certainement\nlisté sur la\n<a href=\"https://github.com/developit/preact-compat#preact-compat\">documentation</a>.</p>\n<p>Cette solution a l'avantage d'être très rapide à mettre en place. Toutefois, le\nprincipal avantage de Preact est son poids de seulement 3ko. En ajoutant\n<code>preact-compat</code>,vous ajouterez environ 2ko supplémentaires. Ce n'est pas énorme,\nsurtout si on prend en compte les avantages que ce module apporte, mais il est\npossible de ne pas avoir à ajouter cette couche de compatibilité.</p>\n<h3>Passer complètement à Preact</h3>\n<p>Cette solution est un peu plus longue à mettre en place, mais si votre code\nn'est pas dépendant d'un module qui utilise des parties de l'API de React qui ne\nsont pas prises en compte par Preact, alors elle vous permettra d'obtenir le\nbundle le plus léger possible.</p>\n<p>Premièrement, il faut installer Preact :</p>\n<pre><code class=\"hljs language-console\">npm install --save preact\n</code></pre>\n<p>Puis il faut indiquer à votre compiler le pragma JSX qu'il doit utiliser. Pour\nbabel, vous pouvez installer le plugin <code>babel-plugin-transform-react-jsx</code> :</p>\n<pre><code class=\"hljs language-console\">npm instal --save-dev babel-plugin-transform-react-jsx\n</code></pre>\n<p>Puis indiquer le pragma JSX dans les options de ce plugin dans votre fichier\n<code>.babelrc</code> :</p>\n<pre><code class=\"hljs language-js\">{\n    <span class=\"hljs-string\">&quot;plugins&quot;</span>: [\n        [<span class=\"hljs-string\">&quot;transform-react-jsx&quot;</span>, { <span class=\"hljs-string\">&quot;pragma&quot;</span>: <span class=\"hljs-string\">&quot;h&quot;</span> }]\n    ]\n}\n</code></pre>\n<p><em>Même si vous connaissez React, cette histoire de pragma JSX pourrait ne pas\nvous évoquer grand chose. Si vous souhaitez en savoir plus, je vous conseille de\nlire l'article suivant : <a href=\"https://jasonformat.com/wtf-is-jsx/\">WTF is JSX</a>. Si\nvous utilisez React et n'avez jamais eu à configurer ce pragma, c'est parce que\nla plupart des compilers utilisent le pragma <code>@jsx React.createElement</code> par\ndéfaut.</em></p>\n<p>Si vous utilisez une version de React qui n'est pas à jour, il est possible que\nvotre codebase utilise l'ancienne syntaxe <code>React.createClass()</code>. Dans ce cas, il\nfaut que vous installiez\n<a href=\"https://github.com/laurencedorman/preact-classless-component\"><code>preact-classless-component</code></a>,\nou que vous passiez votre codebase dans le\n<a href=\"https://github.com/vutran/preact-codemod\"><code>preact-codemod</code></a> qui transformera\nvos composants en classes ES6. De même, il se peut que vous utilisiez des\nréférences par chaîne de caractères, qui ne sont pas supportées par Preact. Dans\nce cas, il faudra les transformer en références fonctionnelles.</p>\n<p>Il ne vous reste plus qu'à mettre à jour vos imports pour que ceux-ci pointent\nvers Preact. Voici un petit exemple :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { h, Component, render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;preact&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> Header = <span class=\"hljs-function\">() =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>Ma putain d&#x27;app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>Hello, world !<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n\nrender(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;app&quot;</span>));\n</code></pre>\n<p>Voilà, vous avez maintenant une aperçu de ce qu'est Preact et des moyens à votre\ndisposition pour l'utiliser. Facebook ne vous est plus d'aucune utilité, vous\npouvez fermer votre compte.</p>\n<p>Plus sérieusement, nous avons vu que Preact est en grande partie compatible avec\nReact et peut presque le remplacer sur une app web. Cela nécessite tout de même\nun peu de travail et de vigilance, mais le switch est possible et peut vous\npermettre de faire économiser à vos utilisateurs le téléchargement de précieux\nko.</p>\n"}