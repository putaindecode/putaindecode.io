{"slug":"es6-es2015-les-maps-weakmaps","filename":"2015-12-11-es6-es2015-les-maps-weakmaps","title":"ES6, ES2015 : les Maps & WeakMaps","date":"Fri, 11 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-11T00:00:00.000Z","title":"ES6, ES2015 : les Maps & WeakMaps","author":"bloodyowl","oldSlug":"js/es2015/maps-weakmaps","slug":"es6-es2015-les-maps-weakmaps"},"body":"<h2>Maps</h2>\n<p>Comme les objets, les maps et weak maps introduites avec ES6 sont des\ndictionnaires. La différence avec un objet, c'est que n'importe quelle valeur\npeut être utilisée comme clé.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> myMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\nmyMap.set(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-number\">1</span>);\nmyMap.get(<span class=\"hljs-built_in\">window</span>); <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<p>Pour créer une map avec des valeurs, on peut passer un tableau de clés/valeurs\nen argument :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> myMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>], [<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>]]);\n</code></pre>\n<p>Pour tester si une clé est présente, on peut utiliser la méthode <code>has</code> :</p>\n<pre><code class=\"hljs language-javascript\">map.has(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p>On peut itérer sur les entrées d'une map à l'aide de <code>forEach</code> :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> myMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>], [<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>]]);\n\nmyMap.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// do something</span>\n});\n</code></pre>\n<p>On peut aussi itérer à l'aide du <code>for … of</code> :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [key, value] <span class=\"hljs-keyword\">of</span> myMap) {\n  <span class=\"hljs-built_in\">console</span>.log(key, value);\n}\n</code></pre>\n<p>Ainsi que convertir la map en tableau à l'aide du spread, puisqu'une map est\nitérable :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> myEntries = [...myMap]; <span class=\"hljs-comment\">// […[key, value]]</span>\n<span class=\"hljs-keyword\">const</span> myEntries = [...myMap.entries()]; <span class=\"hljs-comment\">// alternativement</span>\n</code></pre>\n<p>On peut aussi récupérer des itérables par clés et valeurs :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> myKeys = [...myMap.keys()];\n<span class=\"hljs-keyword\">const</span> myValues = [...myMap.values()];\n</code></pre>\n<p>Particularité, la valeur <code>NaN</code>, qui en JS n'est pas égale à elle même, est bien\ngérée :</p>\n<pre><code class=\"hljs language-javascript\">myMap.set(<span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-number\">1</span>);\nmyMap.get(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<p>Une utilisation possible des Maps est la fonction <code>dedupe</code> pour éliminer les\ndoublons d'un array :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> dedupe = <span class=\"hljs-function\"><span class=\"hljs-params\">array</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> [...new <span class=\"hljs-built_in\">Map</span>(array.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> [item, <span class=\"hljs-literal\">true</span>])).keys()];\n};\n\ndedupe([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n</code></pre>\n<h2>WeakMaps</h2>\n<p>Les WeakMaps sont comme les Maps mais qui ne gardent pas les valeurs &quot;oubliées&quot;.\nLe garbage collector ne tient donc pas compte des weak maps.</p>\n<p>Les WeakMaps ne possèdent pas de méthodes d'itération et n'acceptent pas de\nvaleurs primitives comme clés.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> myWeakMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakMap</span>();\nmyWeakMap.set(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// TypeError</span>\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> myWeakMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakMap</span>();\nmyWeakMap.set(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-number\">1</span>)(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> object = {};\n  myWeakMap.set(object, <span class=\"hljs-number\">2</span>);\n})();\n<span class=\"hljs-comment\">// myWeakMap a oublié la valeur 2, car `object` n&#x27;est plus accessible</span>\n<span class=\"hljs-comment\">// seule la clé `window` persiste.</span>\n</code></pre>\n<p>Un usage possible est le stockage d'informations lié à une instance de classe,\npermettant de &quot;cacher&quot; cette information de l'instance :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> callbacks = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakMap</span>();\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleEventEmitter</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n    callbacks.set(<span class=\"hljs-built_in\">this</span>, []);\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-title\">addEventListener</span>(<span class=\"hljs-params\">callback</span>)</span> {\n    callbacks.set(<span class=\"hljs-built_in\">this</span>, callbacks.get(<span class=\"hljs-built_in\">this</span>).concat(callback));\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-title\">removeEventListener</span>(<span class=\"hljs-params\">callback</span>)</span> {\n    callbacks.set(<span class=\"hljs-built_in\">this</span>, callbacks.get(<span class=\"hljs-built_in\">this</span>).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">func</span> =&gt;</span> func !== callback));\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-title\">triggerEvent</span>(<span class=\"hljs-params\">...args</span>)</span> {\n    callbacks.get(<span class=\"hljs-built_in\">this</span>).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">func</span> =&gt;</span> func(...args));\n  }\n}\n</code></pre>\n"}