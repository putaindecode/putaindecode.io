{"slug":"git-boutez-les-bugs-domptez-votre-historique","filename":"2014-02-27-git-boutez-les-bugs-domptez-votre-historique","title":"Git, boutez les bugs, domptez votre historique!","date":"Thu, 27 Feb 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-02-27T00:00:00.000Z","title":"Git, boutez les bugs, domptez votre historique!","author":"Erwyn","oldSlug":"git/log-bisect-rebase-reflog","slug":"git-boutez-les-bugs-domptez-votre-historique"},"body":"<p>Vous viendez de lire l'<a href=\"/fr/articles/git/\">article de madx</a> sur le gestionnaire\nde version Git et vous vous dites que vous aimeriez en découvrir plus! Vous\nl'utilisez déjà mais êtes en quête de quelques nouvelles (ou pas) astuces à vous\nmettre sous la dent! Bienvenue!</p>\n<p>Si vous désirez vous servir de cet article comme d'un tutoriel il est recommandé\nd'avoir quelques bases concernant l'utilisation et le fonctionnement de Git\n(commits/branches/etc…).</p>\n<p>Allez, je ne vous fais pas plus attendre, voici ma liste des fonctionnalités Git\ndont je ne saurais plus me passer:</p>\n<h2>git lg, l'alias qui vous parle d'Histoire</h2>\n<p>À l'aide, à l'aide je ne comprends plus rien à l'historique de mon dépôt Git!\nJ'ai créé un monstre… Pas de panique! J'ai pour vous l'alias qu'il vous faut,\nhonteusement pompé de <a href=\"https://coderwall.com/p/euwpig\">ce site</a>, mais comme j'ai\npas d'honneur… Pour le mettre en place il suffit d'entrer la commande suivante\ndans votre terminal préféré:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git config --global alias.lg <span class=\"hljs-string\">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span>\n</code></pre>\n<p>Au cas où vous ne seriez pas à l'aise avec ce genre de choses, sachez simplement\nque la commande <code>git config --global alias.lg</code> permet d'inscrire à votre\nconfiguration générale un nouvel alias ( ici lg). Le reste est ce que doit faire\ncet alias, à savoir afficher un historique reformaté de votre dépôt Git.</p>\n<p>Allez, je vous met au défi d'oser taper un coup de <code>git lg</code> dans votre terminal\nmaintenant (dans un dépôt Git bien entendu banane). Pour l'exemple, je l'ai\nréalisé dans le dépôt de Putain De Code:</p>\n<figure>\n  <img src=\"/public/images/articles/2014-02-27-git-boutez-les-bugs-domptez-votre-historique/omagad-history.png\" alt=\"capture historique\" />\n  <figcaption>Le pouvoir de l'arc en ciel</figcaption>\n</figure>\n<p>Eh oui, sous vos yeux ébahis se dessine maintenant l'historique de votre dépôt!\nTout y est: créations de branches, commits, merges, les miaouOnes… Voilà, vous\nne pourrez plus dire que vous n'y comprenez rien, vous seriez un fieffé menteur.</p>\n<h2>git bisect, trouver et punir</h2>\n<p>S'il y a bien quelque chose d'agaçant dans l'activité de développement, c'est\nque bien souvent on est amené à travailler en équipe, et évidemment, il y en a\ntoujours un pour introduire des Putain De Bugs. Alors c'est parti on sort le\ndébugger pour l'autre ingrat, on place les <code>console.log</code> et autres <code>var_dump()</code>\npour trouver d'où peut bien venir ce fichu problème, et on se coule un café\nparce qu'entre nous, ça peut prendre du temps.</p>\n<p>Heureusement pour nous, là aussi Git est au rendez-vous avec sa fonctionnalité\nde <em>bisecting</em>. Je vous vois déjà en train de baver devant votre écran, mais\nnon, Git ne va pas corriger vos bugs bien évidemment, il va vous aider à trouver\nle changement dans le code qui l'a fait apparaître et ceci grâce à la commande\n<code>git bisect</code>.</p>\n<p>Pour lancer une <em>bisection</em> par Git il suffit d'entrer <code>git bisect start</code> dans\nvotre terminal préféré et le tour est joué!</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git bisect start</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\">\n</span></code></pre>\n<figure>\n    <figcaption> Capitaine, regardez il n'y a rien </figcaption>\n</figure>\n<p>Oui bon d'accord, il va falloir s'investir un peu plus pour parvenir à nos fins.\nPour l'instant Git est passé en mode <em>bisection</em>, maintenant il a besoin\nd'informations pour s'exécuter:</p>\n<ul>\n<li>Un commit où le bug est présent</li>\n<li>Un commit où le bug est absent</li>\n</ul>\n<p>Imaginons que le commit sur lequel nous sommes comporte le bug, nous allons donc\nle signaler à Git avec <code>git bisect bad</code>. Nous allons ensuite nous déplacer sur\nun commit plus ancien qui ne comporte pas le bug et le signaler à son tour:\n<code>git bisect good</code>.</p>\n<p>Git va alors se mettre en route et vous déplacer automatiquement de commit en\ncommit. Pour chacun d'eux vous n'aurez qu'à le déclarer bon ou mauvais comme\nexpliqué au dessus, jusqu'à ce que Git vous fournisse le premier commit\ncomportant le bug, celui dont le changement a révélé le disfonctionnement.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git bisect bad</span>\n1082351d9157e98aed1bbee8b9ad6deedca1288f is the first bad commit\ncommit 1082351d9157e98aed1bbee8b9ad6deedca1288f\nAuthor: Maxime Thirouin &lt;m@***.io&gt;\nDate:   Fri Jan 17 08:19:46 2014 +0100\n\n    ¯\\_(ツ)_/¯ Fix shit bring in 34a44c98048f2b74fc2dd20f0be807c1e23e8b58\n\n:040000 040000 7a5d5010f0aaa052ffdc0747b182dc6178a346db d3562872efd1b9d662a89825a3070d64f860cc34 M  src\n</code></pre>\n<figure>\n    <figcaption>1, 2, 3, Soleil!</figcaption>\n</figure>\n<p>Et voilà, le tour est joué, en plus Git vous a positionné sur ce commit, il ne\nmanque plus qu'un petit coup de <code>git show</code> et vous savez tout. Pour revenir à\nvotre travail, un simple <code>git bisect reset</code> fera l'affaire! Il ne vous reste\nplus qu'à punir la personne fautive, mais pour ça je vous laisse avec votre\nimagination, je suis sûr que vous trouverez.</p>\n<p>Pour les fanatiques de l'efficacité et de l'automatisation, sachez que Git en a\nencore dans le ventre. Si vous connaissez déjà un bon et un mauvais commit, vous\npouvez tout simplement lancer la <em>bissection</em> à grand coup de\n<code>git bisect start MAUVAIS_COMMIT BON_COMMIT</code> et si, cerise sur le gâteau, vous\nêtes en possession d'une suite de tests unitaires (oui non je sais faut pas\ndéconner), <code>git bisect run &lt;votre_script&gt;</code> vous permettra de la lancer et la\nrecherche du premier commit défectueux se fera alors toute seule!</p>\n<h2>git rebase, du pur story-telling</h2>\n<p>Je ne sais pas s'il vous est déjà arrivé de naviguer dans les dépôts Git de\nprojets libres, mais souvent on y trouve que très peu de commits poubelles, ces\ncommits avec comme message &quot;step&quot; ou autre &quot;stuff&quot;. Chaque commit correspond à\nune fonctionnalité, un bug fix, une unité logique cohérente. Je ne sais pas pour\nvous, mais personnellement un <em>git log</em> ne ressemble pas à ça chez moi!</p>\n<pre><code>commit e739e7c0248b841b0250eb85d99a1b4ba149149d\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:39:50 2014 +0100\n\n    Now my new functionality finally works\n\ncommit 551b243525d826afcfece3e2c4c471ebd1e91779\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:39:23 2014 +0100\n\n    misc\n\ncommit 9db49a39fdb05a54adcfc2b46832818ef05b9c72\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:38:43 2014 +0100\n\n    stuff\n\ncommit ca4ff952310d6246216e83f49309b32b2d2fa010\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:38:35 2014 +0100\n\n    first commit\n</code></pre>\n<figure>\n    <figcaption>best git log, ever</figcaption>\n</figure>\n<p>Bien que l'on essaye de nous faire croire que les logiciels libres sont codés\npar des rockstars, ce qui permet de justifier le mythe du <em>1 commit = 1\nfonctionnalité</em>, vous n'êtes pas dupes; l'historique Git de ces dépôts est bel\net bien retravaillé, et ceci dans le but de maintenir sa cohérence et de\npermettre à tous les contributeurs de le comprendre. Si cela s'applique\nparticulièrement dans le cadre des logiciels libres, il n'en est pas moins\nsatisfaisant d'avoir également un historique clair sur ses propres dépôts.</p>\n<p>Pour cela, l'arme de choix s'appelle <code>git rebase</code>. Cette fonctionnalité permet\nde réécrire l'historique de vos dépôts, de réorganiser les commits, d'en\nsupprimer, de changer leur message associé etc… La fonctionnalité est assez\nsimple à utiliser, nous allons prendre exemple sur l'historique présenté\nci-dessus: je voudrais supprimer le commit dont le message est 'stuff' parce que\nfinalement il s'avère inutile. Je veux également fusionner le commit 'misc' avec\nle commit 'Now my new functionality finally works' et renommer ce dernier pour\nqu'il soit plus explicite et fasse référence à ma User Story correspondante dans\nmon outil de tracking préféré.</p>\n<p>Pour commencer, il faut dire jusqu'à quel commit on souhaite effectuer cette\nréécriture; pour cela, dans mon cas, deux solutions:</p>\n<ul>\n<li>Faire référence à partir de HEAD (l'étiquette courante), ici: HEAD~3 (je veux\nréécrire jusqu'au commit avant 'stuff')</li>\n<li>Fournir le SHA1 du commit avant 'stuff' (ici\n2645b1cdbdd72bea6c392c011320556997327761)</li>\n</ul>\n<p>Je vais utiliser la première méthode (le choix n'influe en rien sur la suite),\net donc lancer la réécriture en invoquant la commande: <code>git rebase -i HEAD~3</code> (\n-i voulant dire de lancer un <em>rebase</em> en mode intéractif). Voici ce qui m'est\nalors présenté:</p>\n<pre><code>pick 9db49a3 stuff\npick 551b243 misc\npick e739e7c Now my new functionality finally works\n\n# Rebase ca4ff95..e739e7c onto ca4ff95\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre>\n<p>Git m'affiche tous les commits concernés par l'opération (en ordre inverse),\ndevant chacun d'eux, la mention <em>pick</em>, et une légende en bas. <em>pick</em>, comme\nl'indique la légende, signifie que ce commit sera conservé, mais je peux\nremplacer cette mention par les suivantes:</p>\n<ul>\n<li>reword : modifier le message de commit.</li>\n<li>edit : utiliser le commit mais me laisser le modifier avec un\n<code>git commit --amend</code> qui permet de commiter l'état courant de la copie de\ntravail en l'incorporant au commit précédent.</li>\n<li>squash : utiliser le commit en le fusionnant avec le commit précédent.</li>\n<li>fixup : utiliser le commit en le fusionnant avec le commit précédent et ne pas\nutiliser son message associé.</li>\n<li>exec : exécuter une commande sur ce commit.</li>\n</ul>\n<p>En plus de ces différentes mentions, je peux également effectuer deux autres\nactions:</p>\n<ul>\n<li>déplacer un commit, ce qui aura pour effet final de le déplacer dans\nl'historique.</li>\n<li>supprimer un commit, ce qui aura comme résultat de le faire disparaître de\nl'historique.</li>\n</ul>\n<p>Pour ma part, je vais:</p>\n<ul>\n<li>supprimer la première ligne parce que j'ai décidé que le commit 'stuff' ne me\nservait à rien.</li>\n<li>mettre la mention reword devant le commit 'misc', car je vais fusionner le\ndernier commit avec celui-ci et mettre un nouveau message.</li>\n<li>mettre la mention fixup devant le commit 'Now my new functionality finally\nworks' car je vais le fusionner au précédent et abandonner son message.</li>\n</ul>\n<p>Ce qui nous donne le résultat suivant:</p>\n<pre><code>reword 551b243 misc\nfixup e739e7c Now my new functionality finally works\n\n# Rebase ca4ff95..e739e7c onto ca4ff95\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre>\n<figure>\n    <figcaption>Attention chérie, ça va trancher</figcaption>\n</figure>\n<p>Il n'y a plus qu'à sauvegarder et quitter (:x dans vim) pour que la machine se\nmette en route. Si certaines actions que vous avez effectuées, notamment le\ndéplacement de commits, provoquent des conflits, Git va vous demander de les\nrésoudre au fur et à mesure; il suffit pour cela d'éditer vos fichiers, puis de\nles marquer comme résolus au moyen de la commande <code>git add &lt;lefichier&gt;</code> avant de\nreprendre avec la commande <code>git rebase --continue</code>. Comme convenu, Git vous\ndemande d'éditer le message du commit marqué en <em>reword</em>:</p>\n<pre><code>Story #34 - Poker cards now have a real back picture\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# HEAD detached at ca4ff95\n# You are currently rebasing branch 'master' on 'ca4ff95'.\n#   (all conflicts fixed: run \"git rebase --continue\")\n#\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n# modified:   README.txt\n#\n</code></pre>\n<figure>\n    <figcaption>Un commit qu'il est mieux pour le relire</figcaption>\n</figure>\n<p>L'opération va continuer puis Git va vous rendre la main. Il vous suffit alors\nde faire un <code>git log</code> pour apprécier le résultat:</p>\n<pre><code>commit 481b4dccf4fedf4ed9d7f4e83ae5c19a07f7e12e\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:39:23 2014 +0100\n\n    Story #34 - Poker cards now have a real back picture\n</code></pre>\n<figure>\n    <figcaption>Et c'est le succèèèèèèès</figcaption>\n</figure>\n<p>Vous n'avez plus qu'un seul commit tout beau tout propre! Vous pouvez maintenant\nle pousser sur votre dépôt et vous vanter d'avoir un bel historique, parce que\nvous aussi, vous êtes une rockstar :).</p>\n<p>Pour ceux qui désirent aller encore plus loin dans l'automatisation de ce\nprocessus de rebase, je vous conseille d'aller jeter un œil à l'utilisation de\nl'option <a href=\"http://madx.me/articles/git_rebase_autosquash.html\">--autosquash</a>.</p>\n<h2>git reflog, la commande de celui qui a fait n'importe quoi</h2>\n<p>Voici venu le temps <del>des rires et des chants</del> de la denière commande que je\nsouhaitais vous présenter, j'ai nommé <code>git reflog</code>. Cette commande c'est votre\n<em>joker</em>, elle assure votre survie, notamment si vous avez été assez zinzins pour\nsuivre les exemples donnés dans cet article, parce que honnêtement…</p>\n<figure>\n    <img src=\"https://i1.kym-cdn.com/photos/images/newsfeed/000/305/224/3e1.jpg\" alt=\"I have no idea what I'm doing\" />\n</figure>\n<p>Vous ne le savez peut être pas, mais Git, dans sa grande bonté, garde une\nréférence de toutes vos actions, de tous les endroits où vous vous êtes\ndéplacez. Ce registre, c'est le <em>references log</em>, et en plus on peut y accéder\nsimplement grâce à la commande <code>git reflog</code> (sans déconner). Faisons un petit\ntour dans le miens:</p>\n<pre><code>481b4dc HEAD@{0}: rebase -i (finish): returning to refs/heads/master\n481b4dc HEAD@{1}: rebase -i (fixup): Story #34 - Poker cards now have a real back picture\n8fd5835 HEAD@{2}: rebase -i (continue): Story #34 - Poker cards now have a real back picture\nca4ff95 HEAD@{3}: checkout: moving from master to ca4ff952310d6246216e83f49309b32b2d2fa010\ne739e7c HEAD@{4}: rebase -i (finish): returning to refs/heads/master\ne739e7c HEAD@{5}: checkout: moving from master to e739e7c\ne739e7c HEAD@{6}: rebase -i (finish): returning to refs/heads/master\ne739e7c HEAD@{7}: checkout: moving from master to e739e7c\ne739e7c HEAD@{8}: rebase -i (finish): returning to refs/heads/master\ne739e7c HEAD@{9}: checkout: moving from master to e739e7c\ne739e7c HEAD@{10}: rebase -i (finish): returning to refs/heads/master\ne739e7c HEAD@{11}: checkout: moving from master to e739e7c\ne739e7c HEAD@{12}: commit: Now my new functionality finally works\n551b243 HEAD@{13}: commit: misc\n9db49a3 HEAD@{14}: commit (amend): stuff\naf7fc36 HEAD@{15}: commit: misc\nca4ff95 HEAD@{16}: commit (initial): first commit\n</code></pre>\n<figure>\n    <figcaption>Il est beau mon reflog, il est frais</figcaption>\n</figure>\n<p>On voit ici l'ensemble de mes opérations apparaître comme le <em>rebase</em> effectué\nprécédemment (bon d'accord il apparaît plusieurs fois parce que j'ai fait\nquelques tests avant d'écrire cette partie de l'article). Chaque opération\npossède un SHA1 qui est en fait une référence vers le commit concerné, dans\nl'état dans lequel il était au moment de l'opération. Bien, imaginons que j'ai\nfait n'importe quoi avec le rebase et que je veuille retrouver mon état\nprécédent, et bien il me suffira ici de faire un <code>git checkout e739e7c</code> (dans\nvotre cas la ligne sera probablement plus simple à trouver). Et là si je refais\nun <code>git log</code>, miracle:</p>\n<pre><code>commit e739e7c0248b841b0250eb85d99a1b4ba149149d\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:39:50 2014 +0100\n\n    Now my new functionality finally works\n\ncommit 551b243525d826afcfece3e2c4c471ebd1e91779\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:39:23 2014 +0100\n\n    misc\n\ncommit 9db49a39fdb05a54adcfc2b46832818ef05b9c72\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:38:43 2014 +0100\n\n    stuff\n\ncommit ca4ff952310d6246216e83f49309b32b2d2fa010\nAuthor: Martin GOYOT (Erwyn/Martinus) <martin@***.com>\nDate:   Tue Feb 18 21:38:35 2014 +0100\n\n    first commit\n</code></pre>\n<p>Vous voilà retombés sur vos pieds! Vous n'avez plus qu'à reconnecter votre\nbranche à ce commit si jamais vous en aviez une et vous êtes reparti pour de\nnouvelles aventures.</p>\n<p>Sachez tout de même que ce <em>references log</em> peut être effacé, et il est même\nconseillé de le faire régulièrement pour des problématiques de performance de\nGit sur votre dépôt; conserver tous ces commits peut devenir coûteux à la\nlongue. La commande <code>git gc</code> pour <em>garbage collector</em> s'occupera de faire le\nménage pour vous.</p>\n<p>Voilà, on arrive au bout de notre aventure, j'espère que vous avez appris\nquelque chose et que Git vous fait maintenant moins peur.</p>\n<p>Amike,</p>\n"}