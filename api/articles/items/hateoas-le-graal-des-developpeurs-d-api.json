{"slug":"hateoas-le-graal-des-developpeurs-d-api","filename":"2015-03-12-hateoas-le-graal-des-developpeurs-d-api","title":"HATEOAS, le Graal des développeurs d'API","date":"Thu, 12 Mar 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-03-12T00:00:00.000Z","title":"HATEOAS, le Graal des développeurs d'API","oldSlug":"api/hateoas","slug":"hateoas-le-graal-des-developpeurs-d-api","author":"awillemant"},"body":"<p>Nous vivons aujourd'hui dans un monde où tout devient service. Twitter,\nFacebook, Google Drive, GitHub, tout le monde y va de sa petite API pour que\nnous, geeks, puissions profiter pleinement des moult fonctionnalités offertes\npar ces plateformes. Qu'entend-on par service ? Comment les rendre disponibles\nfacilement et intelligemment ? On va essayer d'y répondre !</p>\n<h2>Les webservices</h2>\n<p>Rappelons juste, pour mettre tout le monde d'accord, ce qui se passe pendant une\nsimple navigation web.</p>\n<ol>\n<li>Tu tapes l'adresse de ton site préféré</li>\n<li>Le navigateur envoie la requête</li>\n<li>Le navigateur reçoit du code HTML et l'interprète, pour voir s'il faut\ncharger d'autres choses</li>\n<li>Le navigateur relance les requêtes pour charger les images, scripts et CSS</li>\n<li>Le navigateur reçoit toutes les ressources et te les affiche dans sa\nfenêtre.</li>\n</ol>\n<p>On parle donc de contenu qu'il faut afficher pour les êtres humains, avec des\nimages, des styles et des comportements qui facilitent l'ergonomie et te\npermettent de dire <em>&quot;wouaouw, ce site est vraiment beau, cool et pratique !&quot;</em></p>\n<p>Imaginons maintenant la même chose, mais à destination des programmes, qui ne\nconsomment que de l'information brute et structurée, on ne va donc plus\ns'encombrer avec les CSS, les JS, et autres gifs animés (oui, les gifs animés,\nça les fait pas marrer les machines...) ! On va se concentrer sur le contenu\néchangé et sur les moyens utilisés pour optimiser ces échanges.</p>\n<h3>La première école : SOAP</h3>\n<p>Imaginons deux programmes qui veulent discuter en passant par le web. Dans les\nannées 90, des gens super brillants se sont dit : <em>&quot;On va se baser sur le XML\npour faire communiquer nos programmes sur le web&quot;</em>. L'approche est assez logique\net ingénieuse. Tout d'abord, les deux parties (le client et le serveur) se\npartagent une notice d'utilisation : la WSDL (Web Service Description Language),\nqui est un document XML décrivant toutes les méthodes qui peuvent être appelées\npar le client sur le serveur, avec les structures de données disponibles pour\nces échanges. Le client prépare donc sa demande et l'enveloppe dans une grosse\nstructure XML contenant toutes les métadonnées (méthode appelée, signature\nnumérique, etc.). Une fois que le serveur a reçu cette demande, il la traite et\nrépond aussi dans une grosse enveloppe XML.</p>\n<p>Tu viens de comprendre le SOAP (Service Oriented Application Protocol), aucun\nrapport avec une quelconque savonnette du coup. Cette méthode a fait ses preuves\npuisqu'elle fait tourner encore aujourd'hui des milliers de systèmes très\ncomplexes et très fiables.</p>\n<h3>La maison d'en face : REST</h3>\n<p>Plusieurs années ont passées et les esprits ont évolué. On a commencé à entendre\ndes grandes déclarations comme : <em>&quot;Le SOAP c'est vraiment lourdingue !&quot;</em>, <em>&quot;Le\nprotocole HTTP est sous-exploité !&quot;</em> ou encore <em>&quot;Les enveloppes XML et les WSDL\n? Merci bien !&quot;</em> et c'est à ce moment-là qu'on a donné un acronyme bidon pour\ndécrire le protocole HTTP sans vraiment le nommer : REST (REpresentational State\nTransfert). Pour l'anecdote, tout le monde s'accorde à dire que cet acronyme ne\nveut rien dire ;)</p>\n<p>Le but du jeu est donc d'utiliser au maximum les possibilités du protocole HTTP,\nles verbes, les URL et les codes retours pour décrire des API de la manière la\nplus fidèle possible. On a donc gagné en simplicité et la communication entre\nmachines se veut désormais à la portée de tous. Je reviendrai en détail sur le\nprotocole HTTP un peu plus tard.</p>\n<h3>Un partout : balle au centre</h3>\n<p>Je tiens à remettre les choses au clair. On entend beaucoup trop souvent :\n<em>&quot;Fais du REST, SOAP c'est nul&quot;</em>. Il y a en effet clairement un effet de mode !\nLes API REST pullulent et sont vraiment très pratiques. Toutefois, dans les gros\nsystèmes nécessitant du RPC ou encore de la signature numérique, pour les\néchanges de données médicales par exemple, le contrat WSDL et la rigueur du XML\nsont clairement des alliés !</p>\n<h2>Alors comme ça, HTTP ça fait tout ?</h2>\n<p>Il y a un type qui s'appelle Leonard Richardson et qui a mis en place un\n<a href=\"http://martinfowler.com/articles/richardsonMaturityModel.html\">modèle de maturité</a>\npour qualifier les API webservice.</p>\n<h3>Niveau 0</h3>\n<p>C'est le minimum acceptable dans la communication HTTP :</p>\n<ul>\n<li>Toutes les requêtes sont envoyées à la même URL, quelle que soit la demande.</li>\n<li>Toutes les requêtes sont envoyées avec le verbe POST.</li>\n<li>Quel que soit le type de retour (donnée ou erreur), le code HTTP retourné par\nle serveur sera toujours 200 (OK, tout s'est bien passé).</li>\n<li>Le contenu échangé est majoritairement du XML (pour les enveloppes notamment).</li>\n</ul>\n<p>Quand on fait du webservice avec SOAP, c'est ce niveau qui est utilisé lors de\nla communication HTTP.</p>\n<h3>Niveau 1</h3>\n<p>Avec ce premier niveau, on essaye d'enrichir un peu plus l'utilisation. On\najoute la notion de <em>ressource</em>, en fonction de la donnée métier manipulée,\nl'URL de la requête sera différente. La preuve par l'exemple :</p>\n<ul>\n<li><strong><em>POST /agenda</em></strong> : permet de travailler avec les données de l'agenda de\nl'application</li>\n<li><strong><em>POST /customers</em></strong> : permet de travailler avec le registre des clients</li>\n</ul>\n<p>On profite aussi de la vue hiérarchique que nous proposent les URL :</p>\n<ul>\n<li><strong><em>POST /customers/42</em></strong> : permet de travailler avec le client qui possède\nl'identifiant 42</li>\n</ul>\n<p>Rien qu'en traçant les URL appelées sur le serveur, on peut comprendre ce que le\nclient HTTP cherche à faire... pas dégueu, non ?</p>\n<h3>Niveau 2</h3>\n<p>Le protocole HTTP utilise des verbes pour les requêtes et des codes numériques\npour les retours. Ce sont ces deux mécanismes qui seront utilisés en complément\ndu niveau 1.</p>\n<p>Les principaux verbes HTTP que l'on utilise sont GET, POST, PUT et DELETE. Leur\nnom est déjà très évocateur.</p>\n<ul>\n<li><strong><em>GET /customers/42</em></strong> pour récupérer les informations du client 42</li>\n<li><strong><em>PUT /customers</em></strong> <em>(+ corps de la requête)</em> pour enregistrer un nouveau\nclient</li>\n<li><strong><em>POST /customers/42</em></strong> <em>(+ corps de la requête)</em> pour mettre à jour les\ninformations du client 42</li>\n<li><strong><em>DELETE /customers/42</em></strong> pour supprimer le client 42</li>\n</ul>\n<p>Facile, non ? La réponse du serveur devient tout aussi logique grâce aux codes\nHTTP. Ces codes sont juste des nombres de 3 chiffres respectant cette logique :</p>\n<ul>\n<li><strong><em>1xx</em></strong> : <em>&quot;Je suis en train de bosser, attends encore un peu.&quot;</em></li>\n<li><strong><em>2xx</em></strong> : <em>&quot;Voilà le résultat, ça s'est bien passé.&quot;</em></li>\n<li><strong><em>3xx</em></strong> : <em>&quot;Le contenu est déplacé, va voir ailleurs (cf. en-tête\nlocation).&quot;</em></li>\n<li><strong><em>4xx</em></strong> : <em>&quot;Tu me demandes n'importe quoi, tu as merdé.&quot;</em></li>\n<li><strong><em>5xx</em></strong> : <em>&quot;J'ai merdé...&quot;</em></li>\n</ul>\n<p>Parmi les plus connus, on a donc 404 (<em>&quot;tu me demandes quelque chose qui\nn'existe pas&quot;</em>), 403 (<em>&quot;accès interdit&quot;</em>), 304 (<em>&quot;pas la peine de m'emmerder, la\ndonnée est dans ton cache&quot;</em>) et bien sûr 200 (<em>&quot;OK, tout va bien&quot;</em>).</p>\n<p>Et si les codes HTTP sont ta nouvelle passion, je te suggère de te documenter\nsur le code\n<a href=\"http://fr.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol\">418</a> !</p>\n<h3>Niveau 3 : HATEOAS</h3>\n<p>Alors on a les verbes HTTP et les codes retours. À quoi peut ressembler le Graal\ndes API REST alors ? Si on réfléchit un peu, on peut se dire qu'il faudrait,\npour toutes les URL, donner un code retour HTTP cohérent pour chaque verbe,\nlogique non ? De cette manière, on peut entamer un véritable dialogue avec le\nserveur HTTP, entièrement basé sur REST. Voilà une bonne nouvelle pour ceux qui\nveulent tailler une bavette ailleurs que sur Google Hangouts !</p>\n<p>Un petit exemple de dialogue :</p>\n<pre><code>> GET /customers/42\n200 OK\n\n> PUT /customers/42 {...}\n409 Conflict\n\n> DELETE /customers/42\n204 No Content\n\n> GET /customers/42\n404 Not Found\n</code></pre>\n<p>C'est un bon début, mais ce niveau 3 va quand même un peu plus loin ! N'as-tu\njamais trouvé génial qu'avec de simples liens dans les pages web, tu pouvais\nnaviguer des heures et des heures ?</p>\n<p>Pourquoi ne pas ajouter des liens dans les ressources retournées via REST ? Nous\nvenons de mettre le doigt sur HATEOAS (<em>Hypermedia As The Engine Of Application\nState</em>). On peut désormais imaginer un tas de choses comme :</p>\n<ul>\n<li>Quand on renvoie un tableau json par exemple, dans chaque item,\n<ul>\n<li>on peut ajouter les liens qui permettent de le mettre à jour ;</li>\n<li>on peut ajouter les liens qui permettent de récupérer des données liées\ncomme l'auteur d'un livre, les mentions d'un tweet, etc. ;</li>\n<li>on peut ajouter l'URL de putaindecode.io.</li>\n</ul></li>\n</ul>\n<p>Voici un exemple de trame JSON avec les informations HATEOAS. Pour information,\nil s'agit d'un webservice qui permet de lister des conférences.</p>\n<pre><code>[\n  {\n    \"conference\": {\n      \"id\": 1,\n      \"links\": [\n        {\n          \"rel\": \"list\",\n          \"href\": \"http://localhost:8080/hateoas-webservice/rs/conferences/\"\n        },\n        {\n          \"rel\": \"self\",\n          \"href\": \"http://localhost:8080/hateoas-webservice/rs/conferences/1\"\n        }\n      ],\n      \"name\": \"Take Off Conf 2013\",\n      \"startDate\": \"2013-01-17T00:00:00+01:00\",\n      \"endDate\": \"2013-01-18T00:00:00+01:00\",\n      \"talks\": [\n        {\n          \"id\": 1,\n          \"speakerName\": \"Jakob Mattsson\",\n          \"title\": \"You are not service oriented enough!\",\n          \"links\": [\n            {\n              \"rel\": \"self\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/1\"\n            },\n            {\n              \"rel\": \"list\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/\"\n            }\n          ]\n        },\n        {\n          \"id\": 2,\n          \"speakerName\": \"Olivier Lacan\",\n          \"title\": \"Science-based development\",\n          \"links\": [\n            {\n              \"rel\": \"self\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/2\"\n            },\n            {\n              \"rel\": \"list\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/\"\n            }\n          ]\n        },\n        {\n          \"id\": 3,\n          \"speakerName\": \"Xavier Coulon\",\n          \"title\": \"Build your website with awestruct and publish...\",\n          \"links\": [\n            {\n              \"rel\": \"self\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/3\"\n            },\n            {\n              \"rel\": \"list\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/\"\n            }\n          ]\n        },\n        {\n          \"id\": 4,\n          \"speakerName\": \"Rémi Parmentier\",\n          \"title\": \"Design for developers\",\n          \"links\": [\n            {\n              \"rel\": \"self\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/4\"\n            },\n            {\n              \"rel\": \"list\",\n              \"href\": \"http://localhost:8080/hateoas-webservice/rs/talks/\"\n            }\n          ]\n        }\n      ]\n    }\n  },{\n  ...\n  }\n]\n</code></pre>\n<p>Dans cette trame, tu auras remarqué les objets dans les tableaux nommés &quot;links&quot;,\nce sont les liens disponibles pour chacun des objets renvoyés ! On peut imaginer\nqu'en fonction des droits de l'utilisateur courant, il y ait plus ou moins de\nliens.</p>\n<h2>Est-ce que c'est standard ?</h2>\n<p>Eh bien non ! Il n'y a pas vraiment de convention pour l'écriture des liens dans\nles trames renvoyées. Cela dépend du format renvoyé dans un premier temps.\nComment formaliser un standard si on renvoie en JSON, XML et YML en fonction des\nen-têtes HTTP du client ?</p>\n<p>De la même manière, tu auras remarqué que l'on ne précise pas le verbe HTTP à\nutiliser sur les URL. C'est la raison pour laquelle il faut implémenter un\nretour cohérent pour tous les verbes HTTP courants !</p>\n<p>Et pour finir, comment connaître le format du document JSON accepté avec les\nrequêtes POST par exemple ? Il n'y a pas non plus de règle ! On pourrait\nimaginer par exemple un document &quot;type&quot; qui serait renvoyé après une requête\n&quot;OPTION&quot; sur l'URL.</p>\n<p>Il y a toutefois quelques expérimentations comme\n<a href=\"http://en.wikipedia.org/wiki/Hypertext_Application_Language\">HAL</a> ou encore\n<a href=\"http://jsonapi.org/\">JSON API</a> qui tentent de normaliser un peu ce flou\nartistique.</p>\n<p>Tu fais ta petite popote ! Tu fais comme tu veux ! Ça a du bon aussi !</p>\n<h2>&quot;Bon ok, je fais comment pour le mettre en place maintenant ?&quot;</h2>\n<p>Tu remontes tes manches et tu te démerdes !</p>\n<p>Il y a quelques frameworks qui vont te donner un coup de main. Dans le monde\nJava par exemple, il existe\n<a href=\"http://docs.jboss.org/resteasy/docs/2.0.0.GA/userguide/html/LinkHeader.html\">Resteasy-links</a>\n(avec un exemple d'utilisation\n<a href=\"https://github.com/awillemant/hateoas-example\">sur mon repo GitHub</a>), ou encore\n<a href=\"http://projects.spring.io/spring-hateoas/\">Spring HATEOAS</a></p>\n<p>Pour les <em>Nodistes</em>, une simple recherche sur\n<a href=\"https://www.npmjs.com/search?q=hateoas\">npmjs</a> renverra un tas d'outils !</p>\n<h2>Références</h2>\n<p>Oui, parce qu'il y a des gens bien plus brillants que moi pour vous convaincre\nsur l'Hypermedia !</p>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/HATEOAS\">Wikipédia</a></li>\n<li><a href=\"http://martinfowler.com/articles/richardsonMaturityModel.html\">Blog de Martin Fowler</a></li>\n<li>Les travaux de Steve Klabnik, Rubyiste reconnu (ex :\n<a href=\"https://www.youtube.com/watch?v=g4sqydY3hHU\">Designing Hypermedia APIs</a>)</li>\n<li>Ori Pekelman :\n<a href=\"https://www.youtube.com/watch?v=ZZxOaCP8vyg\">son talk à la Take Off Conf 2014</a></li>\n<li><a href=\"http://blog.xebia.fr/2014/03/17/post-vs-put-la-confusion/\">Un excellent article de Xebia sur la bonne utilisation de POST et PUT</a></li>\n</ul>\n"}