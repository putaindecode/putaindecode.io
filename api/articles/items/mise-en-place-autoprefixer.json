{"slug":"mise-en-place-autoprefixer","filename":"2014-03-04-mise-en-place-autoprefixer","title":"Mise en place d’autoprefixer","date":"Tue, 04 Mar 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-03-04T00:00:00.000Z","title":"Mise en place d’autoprefixer","author":"MoOx","oldSlug":"css/autoprefixer/mise-en-place","slug":"mise-en-place-autoprefixer"},"body":"<p>Suite à mon précédent article\n<a href=\"/fr/articles/css/autoprefixer/\">Comment en finir avec les préfixes CSS</a>,\ncertains sont restés sur leur faim. Voici donc de rapides exemples de mise en\nplace de cette solution.</p>\n<h2>Installation d’autoprefixer</h2>\n<p>Il vous faudra <a href=\"http://nodejs.org/\">Node.js</a> (qui embarque maintenant\n<a href=\"https://www.npmjs.org/\">Npm</a>) afin de pouvoir installer ce nouveau joujou.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> on install autoprefixer via npm en global</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install --global autoprefixer</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ou pour les fainéants</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm i -g autoprefixer</span>\n</code></pre>\n<p>Une fois ceci fait, vous devriez avoir la commande <code>autoprefixer</code> disponible. On\nvérifie de suite avec <code>autoprefixer -v</code>.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> autoprefixer -v</span>\nautoprefixer 1.0.20140203\n</code></pre>\n<p>Vous remarquerez que le numéro de version est un peu spécial : il contient une\ndate en place d’un numéro de patch. Cette date correspond à la dernière mise à\njour de la base de données de <em>Can I Use</em>.</p>\n<h2>Utilisation d’autoprefixer</h2>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> autoprefixer *.css</span>\n</code></pre>\n<p>C’est aussi simple que ça.</p>\n<p>En fait non je plaisante, c’est un tout petit peu plus long car par défaut,\ncomme beaucoup de commandes, vous allez avoir la sortie crachée en plein visage.</p>\n<p>Pour voir les options, comme d’habitude <code>--help</code> ou <code>-h</code> :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> autoprefixer -h</span>\n</code></pre>\n<p>On y apprend l’existance des options suivantes :</p>\n<pre><code>Options:\n  -b, --browsers BROWSERS  add prefixes for selected browsers\n  -o, --output FILE        set output file\n  -d, --dir DIR            set output dir\n  -m, --map                generate source map\n  -i, --info               show selected browsers and properties\n  -h, --help               show help text\n  -v, --version            print program version\n</code></pre>\n<p>Du coup si on veut faire un coup de commande bien personnalisée on pourra faire\n:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> autoprefixer -b <span class=\"hljs-string\">&quot;last 2 versions, &gt; 1%, Explorer 7, Android 2&quot;</span> -o prefixed.css index.css</span>\n</code></pre>\n<p>Il va par contre nous falloir un fichier css pour tester :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> on met un peu de CSS dans index.css manière de tester le bouzin</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;* { box-sizing:border-box}&quot;</span> &gt; index.css</span>\n</code></pre>\n<p>On peut donc essayer notre commande plus haut qui va remplir le fichier\n<code>prefixed.css</code></p>\n<p>Pour vérifier :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cat prefixed.css</span>\n* { -webkit-box-sizing:border-box; -moz-box-sizing:border-box; box-sizing:border-box}\n</code></pre>\n<p>On a bien eu des préfixes ajoutés en fonction de notre demande (bon rien pour IE\nqui n’est pas passé par une version préfixé)</p>\n<p>Par défaut, <em>autoprefixer</em> utilise\n<code>&gt; 1%, last 2 versions, Firefox ESR, Opera 12.1</code> pour les navigateurs. Je pense\nque pour la plupart d’entre vous voudront ajouter &quot;Explorer 8&quot; à la liste, mais\nça n’est en théorie pas nécessaire vu le permier argument qui demande de\npréfixer tous les navigateurs dont l’usage global est supérieur à 1%. Peut-être\nExplorer 7 pour certains ? Faites un tour sur la\n<a href=\"http://caniuse.com/usage_table.php\">page dédié aux statistiques globales sur CanIUse.com</a>\npour avoir une idée.</p>\n<p>Sinon, pour du petit one shot, un plugin dans votre éditeur suffira:</p>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/atom-autoprefixer\">plugin autoprefixer pour Atom</a></li>\n<li><a href=\"https://github.com/sindresorhus/sublime-autoprefixer\">plugin autoprefixer pour Sublime Text</a></li>\n<li><a href=\"https://github.com/mikaeljorhult/brackets-autoprefixer\">plugin autoprefixer pour Brackets</a></li>\n</ul>\n<figure>\n  <img src=\"/public/images/articles/2014-03-04-mise-en-place-autoprefixer/autoprefixer.gif\" alt=\"sublime text autoprefixer preview\" />\n  <figcaption>Intégration dans Sublime Text</figcaption>\n</figure>\n<h2>Automatisation d’autoprefixer (autoception)</h2>\n<p>Bien entendu on va pas se taper la commande à la main tout le temps hein... Il\nnous faut automatiser nos processus. Sans quoi on perd du temps, et\n<a href=\"http://deboutlesgens.com/blog/jai-pas-le-temps-la-pire-excuse-qui-soit/\">le temps... C’est du temps !</a></p>\n<p>Donc, comme je l’ai dit précédemment, on peut utiliser <em>autoprefixer</em> avec les\nsolutions suivantes:</p>\n<ul>\n<li>via <a href=\"https://github.com/ai/autoprefixer#nodejs\">Node.js</a> directement,</li>\n<li>en plugin <a href=\"https://www.npmjs.org/package/gulp-autoprefixer\">Gulp</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#grunt\">Grunt</a>,</li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#compass\">Compass</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#stylus\">Stylus</a>,</li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#ruby-on-rails\">RoR</a> ou\n<a href=\"https://github.com/ai/autoprefixer#ruby\">Ruby</a>,</li>\n<li>avec l’application <a href=\"https://github.com/ai/autoprefixer#prepros\">Prepros</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#mincer\">Mincer</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#middleman\">Middleman</a></li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#php\">PHP</a> (vous avez bien lu)</li>\n</ul>\n<p>Si vous avez besoin, je pense que vous trouverez sans trop de problème d’autres\nimplémentations.</p>\n<p>Cela dit, je vais vous montrer quelques cas d’utilisations:</p>\n<h3>Make</h3>\n<p>Là c’est facile, tout bon développeur doit avoir <code>make</code> sur sa machine (sinon\nc’est que t’es pas développeur, je sais pas trop ce que tu fais ici du coup).</p>\n<p>On peut tout simplement créer un fichier <code>Makefile</code> avec la commande précédente:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> création d’un dossier pour notre popote (puis on va dedans...)</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir autoprefixer-test &amp;&amp; <span class=\"hljs-built_in\">cd</span> autoprefixer-test</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On créer un makefile avec une tâche `css` (création/écrasement via &gt;)</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;css:&quot;</span> &gt; Makefile</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On vérifie qu’on a bien rempli le fichier</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cat Makefile</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"><span class=\"hljs-comment\"># On ajoute notre commande au fichier (ajout au fichier existant via &gt;&gt;)</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\tautoprefixer index.css -b \\&quot;last 2 versions, &gt; 1%, Explorer 7, Android 2\\&quot; -o prefixed.css&quot;</span> &gt;&gt; Makefile</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> On vérifie qu’on a bien rempli le fichier</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cat Makefile</span>\n</code></pre>\n<p>Voilà votre Makefile doit être bien rempli. Pour tester la commande <code>css</code>:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make css</span>\n</code></pre>\n<p>Vous remarquerez que la commande <em>autoprefixer</em> s’affiche, si ça vous embête,\nrajoutez <code>@</code> devant. Vous pouvez modifier votre Makefile dans ce sens:</p>\n<pre><code>css:\n    echo \"❯ Autoprefixage magique.\"\n    @autoprefixer index.css -b \"last 2 versions, > 1%, Explorer 7, Android 2\" -o prefixed.css\n</code></pre>\n<p><em>Attention : Les Makefiles utilisent des tabulations uniquement ! Sans quoi cela\nne va pas marcher comme prévu.</em></p>\n<p>Vous avez donc maintenant un exemple assez simpliste qui peut être utilisé si\nvous n’avez pas encore\n<a href=\"http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/\">automatisé votre workflow</a>\nvia des outils comme <a href=\"http://gulpjs.com/\">Gulp</a> ou <a href=\"http://gruntjs.com/\">Grunt</a>.</p>\n<p>Passons justement à ces solutions plus sérieuses.</p>\n<h3>Autoprefixer avec Gulp</h3>\n<p>Je ne vais pas trop rentrer dans les détails de Gulp (ce n’est pas le sujet\nici). Voici cependant une exemple assez bref et compréhensible pour commencer,\navec une seule écriture sur le système de fichier (contrairement à la solution\nGrunt).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// gulp stuff</span>\n<span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp&quot;</span>);\n<span class=\"hljs-keyword\">var</span> gutil = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-util&quot;</span>);\n<span class=\"hljs-comment\">// le plombier ajuste les fuites des tuyaux (erreur de pipe)</span>\n<span class=\"hljs-comment\">// ceci est conseillé pour éviter que chaque erreur &quot;casse&quot; tout le process</span>\n<span class=\"hljs-comment\">// dès qu’une erreur est remonté par un plugin</span>\n<span class=\"hljs-keyword\">var</span> plumber = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-plumber&quot;</span>);\n\n<span class=\"hljs-comment\">// css stuff</span>\n<span class=\"hljs-keyword\">var</span> sass = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-ruby-sass&quot;</span>);\n<span class=\"hljs-keyword\">var</span> autoprefixer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-autoprefixer&quot;</span>);\n<span class=\"hljs-keyword\">var</span> csso = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-csso&quot;</span>);\n\n<span class=\"hljs-comment\">// css task: sass, autoprefixer et csso si --production</span>\ngulp.task(<span class=\"hljs-string\">&quot;styles&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp\n    .src(<span class=\"hljs-string\">&quot;./src/css/*.scss&quot;</span>)\n    <span class=\"hljs-comment\">// it’s me, Mario</span>\n    .pipe(plumber())\n\n    .pipe(sass({ <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&quot;expanded&quot;</span> }))\n\n    <span class=\"hljs-comment\">// Autoprefixer \\\\</span>\n    <span class=\"hljs-comment\">// vous remarquerez que ici chaque option est un paramètre</span>\n    <span class=\"hljs-comment\">// pas comme pour l’appel en ligne de commande.</span>\n    .pipe(autoprefixer(<span class=\"hljs-string\">&quot;last 2 versions&quot;</span>, <span class=\"hljs-string\">&quot;&gt; 1%&quot;</span>, <span class=\"hljs-string\">&quot;Explorer 7&quot;</span>, <span class=\"hljs-string\">&quot;Android 2&quot;</span>))\n\n    <span class=\"hljs-comment\">// optimisation CSS pour la prod uniquement</span>\n    .pipe(gulp.env.production ? csso() : gutil.noop())\n\n    <span class=\"hljs-comment\">// unique écriture sur disque</span>\n    .pipe(gulp.dest(<span class=\"hljs-string\">&quot;./dist/css/&quot;</span>));\n  <span class=\"hljs-comment\">// je passe sur cette partie à configurer, mais ici on peut imaginer un</span>\n  <span class=\"hljs-comment\">// livereload en plus, il faudra définir livereload et livereloadServer</span>\n  <span class=\"hljs-comment\">// cette partie dépend un peu de votre serveur durant le dév.</span>\n  <span class=\"hljs-comment\">// ca fera l’objet d’un post tiens...</span>\n  <span class=\"hljs-comment\">//.pipe(livereload(livereloadServer))</span>\n});\n\ngulp.task(<span class=\"hljs-string\">&quot;dev&quot;</span>, [<span class=\"hljs-string\">&quot;styles&quot;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.watch(<span class=\"hljs-string\">&quot;./src/css/**/*&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n    gulp.run(<span class=\"hljs-string\">&quot;styles&quot;</span>);\n  });\n});\n\n<span class=\"hljs-comment\">// Tâches disponibles :</span>\n\n<span class=\"hljs-comment\">// - pour générer les feuilles de styles</span>\n<span class=\"hljs-comment\">//   (pour optimiser pour la prod, utiliser l’option)</span>\n<span class=\"hljs-comment\">// $ gulp styles [--production]</span>\n\n<span class=\"hljs-comment\">// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire</span>\n<span class=\"hljs-comment\">// $ gulp dev</span>\n</code></pre>\n<h3>Autoprefixer avec Grunt</h3>\n<p>Voici un petit Gruntfile avec la même configuration que ci dessus</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grunt</span>) </span>{\n<span class=\"hljs-meta\">  &quot;use strict&quot;</span>;\n\n  grunt.loadNpmTasks(<span class=\"hljs-string\">&quot;grunt-contrib-sass&quot;</span>);\n  grunt.loadNpmTasks(<span class=\"hljs-string\">&quot;grunt-autoprefixer&quot;</span>);\n  grunt.loadNpmTasks(<span class=\"hljs-string\">&quot;grunt-csso&quot;</span>);\n  grunt.loadNpmTasks(<span class=\"hljs-string\">&quot;grunt-contrib-watch&quot;</span>);\n\n  grunt.initConfig({\n    <span class=\"hljs-attr\">sass</span>: {\n      <span class=\"hljs-attr\">dist</span>: {\n        <span class=\"hljs-attr\">options</span>: {\n          <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&quot;expanded&quot;</span>,\n        },\n        <span class=\"hljs-attr\">files</span>: [\n          {\n            <span class=\"hljs-attr\">expand</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">flatten</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">cwd</span>: <span class=\"hljs-string\">&quot;./src/css&quot;</span>,\n            <span class=\"hljs-attr\">src</span>: [<span class=\"hljs-string\">&quot;*.scss&quot;</span>],\n            <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">&quot;./dist/css&quot;</span>,\n            <span class=\"hljs-attr\">ext</span>: <span class=\"hljs-string\">&quot;.css&quot;</span>,\n          },\n        ],\n      },\n    },\n    <span class=\"hljs-attr\">autoprefixer</span>: {\n      <span class=\"hljs-attr\">options</span>: {\n        <span class=\"hljs-attr\">browsers</span>: [<span class=\"hljs-string\">&quot;last 2 versions&quot;</span>, <span class=\"hljs-string\">&quot;&gt; 1%&quot;</span>, <span class=\"hljs-string\">&quot;Explorer 7&quot;</span>, <span class=\"hljs-string\">&quot;Android 2&quot;</span>],\n      },\n      <span class=\"hljs-attr\">dist</span>: {\n        <span class=\"hljs-attr\">expand</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">flatten</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">cwd</span>: <span class=\"hljs-string\">&quot;./dist/css&quot;</span>,\n        <span class=\"hljs-attr\">src</span>: [<span class=\"hljs-string\">&quot;*.css&quot;</span>],\n        <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">&quot;./dist/css/&quot;</span>,\n      },\n    },\n    <span class=\"hljs-attr\">csso</span>: {\n      <span class=\"hljs-attr\">dist</span>: {\n        <span class=\"hljs-attr\">expand</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">flatten</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">cwd</span>: <span class=\"hljs-string\">&quot;./dist/css/&quot;</span>,\n        <span class=\"hljs-attr\">src</span>: [<span class=\"hljs-string\">&quot;*.css&quot;</span>],\n        <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">&quot;./dist/css/&quot;</span>,\n      },\n    },\n    <span class=\"hljs-attr\">watch</span>: {\n      <span class=\"hljs-attr\">styles</span>: {\n        <span class=\"hljs-attr\">files</span>: [<span class=\"hljs-string\">&quot;./src/css/**/*.scss&quot;</span>],\n        <span class=\"hljs-attr\">tasks</span>: [<span class=\"hljs-string\">&quot;styles&quot;</span>],\n      },\n    },\n  });\n\n  grunt.registerTask(<span class=\"hljs-string\">&quot;styles&quot;</span>, [<span class=\"hljs-string\">&quot;sass&quot;</span>, <span class=\"hljs-string\">&quot;autoprefixer&quot;</span>]);\n  grunt.registerTask(<span class=\"hljs-string\">&quot;styles:production&quot;</span>, [<span class=\"hljs-string\">&quot;sass&quot;</span>, <span class=\"hljs-string\">&quot;autoprefixer&quot;</span>, <span class=\"hljs-string\">&quot;csso&quot;</span>]);\n  grunt.registerTask(<span class=\"hljs-string\">&quot;dev&quot;</span>, [<span class=\"hljs-string\">&quot;sass&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>]);\n};\n\n<span class=\"hljs-comment\">// Tâches disponibles :</span>\n\n<span class=\"hljs-comment\">// - pour générer les feuilles de styles</span>\n<span class=\"hljs-comment\">// $ grunt styles</span>\n\n<span class=\"hljs-comment\">// - pareil, mais optimiser pour la prod</span>\n<span class=\"hljs-comment\">// $ grunt styles:production</span>\n\n<span class=\"hljs-comment\">// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire</span>\n<span class=\"hljs-comment\">// $ grunt watch</span>\n</code></pre>\n<p>Comme vous pouvez le voir, la version Grunt est un peu plus volumineuse (bien\nqu’espacée). Personnellement j’aime la concision de gulp. De plus la version\nGrunt sera plus longue car nous aurons 3 lectures / écritures sur le disque.</p>\n<p><em>Notez que bien entendu dans notre exemple précédent, nous pouvons remplacer\nSass par un autre pré / post-processeur.</em></p>\n<h3>Autoprefixer avec Stylus</h3>\n<p>Dans les exemples précédents, j’ai montré une solution classique avec Sass. Mais\nvoici complètement autre chose: <em>autoprefixer</em> peut s’utiliser en &quot;plugin&quot;\nStylus.</p>\n<p>C’est assez simple il suffit d’utiliser l’option <code>use</code> (<code>-u</code> en cli). Voilà ce\nqu’on aurait en cli :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install -g stylus autoprefixer-stylus</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> stylus -u autoprefixer-stylus -o index.css index.styl</span>\n</code></pre>\n<h4>Avec Grunt</h4>\n<p>Il suffira d’utiliser donc l’option <code>use</code> dans votre configuration.</p>\n<h4><del>Avec Gulp</del></h4>\n<p>La façon de faire de gulp, via des streams pour éviter la lecture / écriture\nmultiple fait que le plugin <em>autoprefixer-stylus</em> est vide de sens. Vous pouvez\ndonc utiliser <em>autoprefixer</em> normalement, après l’appel du pré-processeur.</p>\n<hr />\n<p>Voilà j’espère que cette fois-ci vous êtes rassasié(e) afin de ne plus avoir\nenvie de manger des préfixes CSS !</p>\n"}