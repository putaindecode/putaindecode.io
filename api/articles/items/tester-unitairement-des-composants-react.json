{"slug":"tester-unitairement-des-composants-react","filename":"2015-11-24-tester-unitairement-des-composants-react","title":"Tester unitairement des composants React","date":"Tue, 24 Nov 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-11-24T00:00:00.000Z","title":"Tester unitairement des composants React","author":"MoOx","oldSlug":"js/react/test-unitaires","slug":"tester-unitairement-des-composants-react"},"body":"<p>L'équipe de React a implémenté une fonctionnalité appelée\n<a href=\"http://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow rendering</a>\n(rendu peu profond), qui permet de rendre un composant avec un seul niveau de\nprofondeur de rendu.</p>\n<p>Cela permet du coup de vérifier ce que le rendu retourne sans avoir à se soucier\ndu comportement des composants enfants, qui ne sont pas instanciés ni rendus.\nCela ne nécessite pas de DOM.</p>\n<p>Intéressant, n'est-ce pas ? Et d'ailleurs, le <em>shallow rendering</em> est\nactuellement\n<a href=\"https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26\">la méthode recommandée pour tester vos composants React</a>.</p>\n<p>Comme vous pourrez le voir dans un article listé à la fin de celui-ci, le code\npermettant de tester des composants avec cette technique n'est pas forcément\ntrès concis, contrairement à ce qu'on pourrait attendre.</p>\n<p>Heureusement, <a href=\"https://github.com/vvo\">quelqu'un</a> a codé un truc plutôt cool :\n<a href=\"https://github.com/algolia/react-element-to-jsx-string\">react-element-to-jsx-string</a>.\nComme le nom l'indique, cette librairie permet de rendre un composant React en\ntant que chaîne JSX.</p>\n<p>C'est maintenant les choses deviennent intéressantes : avec ces concepts en tête\n(le shallow render et le rendu de composant en strings JSX), on peut facilement\najouter de simple tests unitaires sur ses composants.</p>\n<p><em>Il y a d'autres techniques pour tester des composants React, et la plupart\nimplique le DOM. Vous devrez donc éxecuter vos tests dans un navigateur (ou en\nutilisant jsdom) : vos tests seront plus lents que la technique qui va suivre\n(qui pour le coup est plus du vrai test unitaire, dans le sens où vous utilisez\nmoins de code et ne nécessitez pas un gros environnement).</em></p>\n<h2>Tester facilement des composants React (sans DOM)</h2>\n<p>On va partir avec ce simple composant :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> Component = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ img, title, Loader, Title }</span>) =&gt;</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    {(!img || !img.src) &amp;&amp; Loader &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loader</span> /&gt;</span>}\n    {img &amp;&amp; img.src &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{img.src}</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">{img.alt}</span> /&gt;</span>}\n    {title &amp;&amp; Title &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Title</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{title}</span> /&gt;</span>}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n);\n\nComponent.propTypes = {\n  <span class=\"hljs-attr\">img</span>: PropTypes.object,\n  <span class=\"hljs-attr\">title</span>: PropTypes.string,\n  <span class=\"hljs-attr\">Loader</span>: PropTypes.func.isRequired,\n  <span class=\"hljs-attr\">Title</span>: PropTypes.func.isRequired,\n};\n\nComponent.displayName = <span class=\"hljs-string\">&quot;Picture&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Component;\n</code></pre>\n<p>Ce composant affiche une image avec un composant pour le titre. Si les données\nde l'image ne sont pas prêtes, on peut afficher un composant pour indiquer le\nchargement.</p>\n<p>Écrivons maintenant un petit test. Pour notre exemple, on va utiliser\n<a href=\"https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\">tape</a>\ncouplé avec <a href=\"https://github.com/atabel/tape-jsx-equals\">tape-jsx-equals</a>, mais\nvous n'aurez pas de mal à trouver un paquet à\n<a href=\"https://www.npmjs.com/search?q=expect+jsx\">votre sauce sur npm</a>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/__tests__/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> tape <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;tape&quot;</span>;\n<span class=\"hljs-keyword\">import</span> addAssertions <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;extend-tape&quot;</span>;\n<span class=\"hljs-keyword\">import</span> jsxEquals <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;tape-jsx-equals&quot;</span>;\n<span class=\"hljs-keyword\">const</span> test = addAssertions(tape, { jsxEquals });\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { createRenderer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-addons-test-utils&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> Picture <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;..&quot;</span>;\n\n<span class=\"hljs-comment\">// fixtures (empty and stateless react components)</span>\n<span class=\"hljs-keyword\">const</span> Loader = <span class=\"hljs-function\">() =&gt;</span> {};\n<span class=\"hljs-keyword\">const</span> Title = <span class=\"hljs-function\">() =&gt;</span> {};\n\ntest(<span class=\"hljs-string\">&quot;PageContainer is properly rendered&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">t</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> renderer = createRenderer();\n\n  renderer.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Picture</span> <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">{Loader}</span> <span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">{Title}</span> /&gt;</span></span>);\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loader</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n    <span class=\"hljs-string\">&quot;can render a Loader component if no image data are passed&quot;</span>,\n  );\n\n  renderer.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Picture</span>\n      <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">{Loader}</span>\n      <span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">{Title}</span>\n      <span class=\"hljs-attr\">img</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">src:</span> &quot;<span class=\"hljs-attr\">SRC</span>&quot;,\n        <span class=\"hljs-attr\">alt:</span> &quot;<span class=\"hljs-attr\">ALT</span>&quot;,\n      }}\n    /&gt;</span></span>,\n  );\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;SRC&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;ALT&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n    <span class=\"hljs-string\">&quot;should render an image if data are passed&quot;</span>,\n  );\n\n  renderer.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Picture</span>\n      <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">{Loader}</span>\n      <span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">{Title}</span>\n      <span class=\"hljs-attr\">img</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">src:</span> &quot;<span class=\"hljs-attr\">SRC</span>&quot;,\n        <span class=\"hljs-attr\">alt:</span> &quot;<span class=\"hljs-attr\">ALT</span>&quot;,\n      }}\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{</span>&quot;<span class=\"hljs-attr\">TITLE</span>&quot;}\n    /&gt;</span></span>,\n  );\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;SRC&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;ALT&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Title</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;TITLE&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n    <span class=\"hljs-string\">&quot;can render a Title if data are passed&quot;</span>,\n  );\n\n  t.end();\n});\n</code></pre>\n<p>Ces tests sont une couverture minimale pour vous assurer que vous ne cassez rien\nlorsque vous travaillez sur votre composant.</p>\n<p>Comme vous pouvez le constater, les tests sont assez simples à écrire et vont\ndroit au but. <strong>Ce qui est intéressant ici, c'est que nous ne comparons pas à\nl'aide de simples chaînes. Nous utilisons directement des composants React.</strong></p>\n<p>Vous pouvez tranquillement exécuter l'exemple complet et le récupérer depuis le\nrepository :</p>\n<p><a href=\"https://github.com/MoOx/react-component-unit-testing-example\">github.com/MoOx/react-component-unit-testing-example</a></p>\n<p>Cet exemple contient les commandes et dépendances (définies dans le\n<code>package.json</code>) dont vous aurez besoin.</p>\n<h1>Et comment tester les évènements comme <code>onClick</code> ?</h1>\n<p>Vous n'avez pas à reproduire le clic complètement.</p>\n<p><strong>Vos tests n'ont pas besoin de vérifier que la prop <code>onClick</code> va bien être\nexécutée lorsque vous cliquerez sur un élément du DOM.</strong> <em>React couvre\nprobablement cela dans sa suite de tests.</em></p>\n<p>Ce que vous avez besoin de tester, c'est que la valeur que vous passez au\n<code>onClick</code> fait bien ce que vous voulez. En gros, si vous avez un bout de code\nqui ressemble à <code>onClick={ yourCallback }</code>, vous n'avez tout simplement qu'à\nappeler directement <code>yourCallback()</code> dans vos tests juste avant votre\ncomparaison. C'est bien assez !</p>\n<p>Si vous voulez aller un peu plus loin, vous pouvez continuer par lire :</p>\n<ul>\n<li><a href=\"http://simonsmith.io/unit-testing-react-components-without-a-dom/\"><em>Unit testing React components without a DOM</em></a>,\npar Simon Smith, qui couvre le même sujet, sans la simplicité de la\ncomparaison JSX,</li>\n<li><a href=\"https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/\"><em>How we unit test React components using expect-jsx</em></a>\nsur le blog d'Algolia, qui explique pourquoi ils ont choisi et créé les outils\npour cette approche.</li>\n</ul>\n<p>Avec ces exemples, nous espérons vraiment que vous n'aurez plus peur de tester\nvotre code et que vous n'hésiterez plus à couvrir tous vos composants React de\ntests 😍.</p>\n"}