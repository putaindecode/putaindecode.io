{"slug":"votre-premiere-app-react-native","filename":"2016-10-04-votre-premiere-app-react-native","title":"Votre première app React Native","date":"Tue, 04 Oct 2016 00:00:00 GMT","draft":false,"meta":{"date":"2016-10-04T00:00:00.000Z","title":"Votre première app React Native","author":"zoontek","oldSlug":"js/react/native/introduction","slug":"votre-premiere-app-react-native"},"body":"<p>Cela fait déjà plus d'un an que Facebook a publié la première version de React\nNative. Longtemps considéré comme une expérimentation sympathique (après tout,\nil est né lors d'un hackathon), un cycle de release soutenu d'une version\nmajeure toutes les 2 semaines a fait qu'aujourd'hui l'écosystème est\nsuffisamment riche et stable pour déployer une app iOS et Android en production.</p>\n<h2>Quels problèmes avec les solutions hybrides ?</h2>\n<p>Des solutions pour développer une application mobile multiplateforme en JS\nexistent déjà : je pense notamment à <a href=\"https://cordova.apache.org/\">Cordova</a> ou à\nson superset <a href=\"http://ionicframework.com/\">Ionic</a>. Conçu autour d'une webview\nsystème (un navigateur embedded - Safari sur iOS, Chrome sur Android) affichée\nen plein écran, vous utilisez des technologies web classiques : HTML, CSS et JS.\nIl est possible d'installer des plugins afin d'enrichir le moteur JavaScript\navec de nouvelles APIs en plus des APIs navigateur. Ainsi,\n<code>cordova-plugin-contacts</code> permet d'accéder au carnet d'adresses du smartphone,\n<code>cordova-plugin-vibration</code> permet de faire vibrer celui-ci, etc.</p>\n<p>Le problème, c'est que si l'utilisation de plugins permet de faire le pont avec\nle code natif (un message est envoyé de la partie JS à la partie Objective-C /\nJava, qui l'exécute de son côté et renvoie le résultat au JS), l'UI de\nl'application n'utilise elle pas du tout le layout natif des OS mobiles. Les\nperformances et le look'n'feel de celle-ci seront donc équivalente à une app\nweb, et non une app mobile.</p>\n<p>Avec React Native, point de navigateur embedded, de HTML ou de CSS : vous devez\ncomposer vos interfaces à l'aide de composants React qui font appel au layout\nnatif de la plateforme. Un exemple simple : <code>&lt;View&gt;</code> (qui est l'équivalent d'une\n<code>&lt;div&gt;</code> HTML) communique via un pont JS &lt;-&gt; Objective-C / Java pour contrôler\nune UIView (sur iOS) ou une android.view. Les performances de l'UI sont donc\nquasi similaires aux performances natives.</p>\n<h2>Découverte de l'environnement de dev</h2>\n<p>Fatigués par JavaScript et son tooling un peu trop fourni ? Rassurez-vous : vous\nn'avez strictement rien à configurer pour commencer à utiliser React Native.\nVous disposez out-of-the-box d'un packager Babel et d'un\n<a href=\"https://github.com/facebook/react-native/tree/master/babel-preset\">preset custom</a>\nqui intègre les fonctionnalités de ES2015, mais également le support de React /\nJSX (encore heureux), de <a href=\"https://flowtype.org/\">Flow</a> et d'autres helpers\nbienvenus tels que <code>async / await</code>.</p>\n<p>En bons passionnés de bière, nous allons réaliser ensemble une app qui requête\nla <a href=\"https://punkapi.com/\">PunkAPI</a> (faites la demande d'une clé API via le\nformulaire prévu à cet effet).</p>\n<p>Je vous renvoie à la\n<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">documentation officielle</a>\npour ce qui est de l'installation des dépendances (celles-ci variant selon votre\nOS et l'OS cible). Xcode / Android Studio, node et watchman étant installés,\nouvrez un terminal et initiez le projet :</p>\n<pre><code>npm install -g react-native-cli\nreact-native init PutainDeBiere\n</code></pre>\n<p>Une fois le projet initialisé, le CLI vous informe de la façon dont lancer votre\napplication : faites-le dans la foulée. En ce qui me concerne, je développe pour\niOS.</p>\n<pre><code class=\"hljs language-bash\">react-native run-ios\n</code></pre>\n<p>Selon votre plateforme cible, ouvrez <code>index.ios.js</code> ou <code>index.android.js</code> dans\nvotre éditeur préféré. Modifiez quelque peu le texte et rafraichissez votre app\nvia <code>Command⌘ + R</code>, deux pressions sur la touche <code>R</code> (émulateur Android).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">/* @flow */</span>\n\n<span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { AppRegistry, StyleSheet, Text, View } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-native&quot;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.container}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.welcome}</span>&gt;</span>Welcome to PutainDeBiere!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Text</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> styles = StyleSheet.create({\n  <span class=\"hljs-attr\">container</span>: {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">justifyContent</span>: <span class=\"hljs-string\">&quot;center&quot;</span>,\n    <span class=\"hljs-attr\">alignItems</span>: <span class=\"hljs-string\">&quot;center&quot;</span>,\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&quot;#F5FCFF&quot;</span>,\n  },\n  <span class=\"hljs-attr\">welcome</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">20</span>,\n    <span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-string\">&quot;center&quot;</span>,\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">10</span>,\n  },\n});\n\nAppRegistry.registerComponent(<span class=\"hljs-string\">&quot;PutainDeBiere&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> App);\n</code></pre>\n<figure>\n  <img src=\"/public/images/articles/2016-10-04-votre-premiere-app-react-native/welcome.png\" alt=\"welcome PutainDeBiere preview\" />\n  <figcaption>Une bien jolie première étape</figcaption>\n</figure>\n<h2>Récupération des données</h2>\n<p>Afin de requêter notre API, React Native nous offre plusieurs plusieurs\nsolutions: <code>fetch()</code> ou <code>XMLHttpRequest</code>. Tenez vous en <strong>uniquement</strong> à\nl'utilisation de la première, la deuxième n'étant présente que pour assurer une\ncompatibilité avec des librairies tierces.</p>\n<p><em>/!\\ Notre clé API doit être encodée en base64. La function <code>btoa()</code> n'étant pas\ndisponible en React Native, il est nécessaire d'installer une dépendance.</em></p>\n<pre><code class=\"hljs language-bash\">npm install --save base-64\n</code></pre>\n<p>Histoire de séparer notre logique API de nos composants React, nous allons créer\nun fichier nommé <code>punkapi.js</code> à la racine de notre projet.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> base64 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;base-64&quot;</span>; <span class=\"hljs-comment\">// importez la dépendance tout juste installée</span>\n\n<span class=\"hljs-keyword\">const</span> rootEndpoint = <span class=\"hljs-string\">&quot;https://punkapi.com/api/v1&quot;</span>;\n<span class=\"hljs-comment\">// pour simplifier la compréhension de ce tuto, nous renseignons la clé API &quot;en dur&quot;</span>\n<span class=\"hljs-comment\">// ne faites jamais cela au sein de vos projets (voir http://12factor.net/fr/config)</span>\n<span class=\"hljs-keyword\">const</span> punkApiKey = <span class=\"hljs-string\">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>;\n<span class=\"hljs-keyword\">const</span> password = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// la punk API n&#x27;utilise aucun mot de passe</span>\n<span class=\"hljs-keyword\">const</span> authBase64 = base64.encode(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${punkApiKey}</span>:<span class=\"hljs-subst\">${password}</span>`</span>);\n\n<span class=\"hljs-keyword\">const</span> headers = {\n  <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n  <span class=\"hljs-attr\">Accept</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n  <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">`Basic <span class=\"hljs-subst\">${authBase64}</span>`</span>, <span class=\"hljs-comment\">// HTTP basic auth</span>\n};\n\n<span class=\"hljs-comment\">// retourne une recette de bière au hasard</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getRandomBrewdog = <span class=\"hljs-function\">() =&gt;</span>\n  fetch(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${rootEndpoint}</span>/beers/random`</span>, { headers }).then(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{ status, json }</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (status !== <span class=\"hljs-number\">200</span>)\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`API answered with status code <span class=\"hljs-subst\">${status}</span>`</span>);\n      <span class=\"hljs-comment\">// gestion du status code HTTP</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> json(); <span class=\"hljs-comment\">// on parse la réponse en JSON</span>\n    },\n  );\n</code></pre>\n<p>Nous allons maintenant modifier notre composant <code>&lt;App&gt;</code> afin de faire une\nrequête simple d'une bière au hasard juste avant le montage de celui-ci.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { getRandomBrewdog } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./punkapi&#x27;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillMount</span>(<span class=\"hljs-params\"></span>)</span> {\n    getRandomBrewdog() <span class=\"hljs-comment\">// fetch() retourne une Promise</span>\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(json))\n      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(error))\n  }\n\n  …\n}\n</code></pre>\n<p>Vous apercevez la présence d'un appel à <code>console.log()</code>. Pour y accéder, rien de\nplus simple: pressez <code>Command⌘ + D</code> au sein de l'émulateur iOS, ou appuyez sur\nle bouton <code>Menu</code> de l'émulateur Android. Celui-ci contient de multiples choses\navec lesquelles je vous laisserai expérimenter par la suite; ce qui nous\nintéresse ici c'est le bouton <code>Debug JS Remotely</code>, qui va ouvrir un nouvel\nonglet dans Chrome où sera exécuté notre code JS.</p>\n<p>Il devient donc possible d'ouvrir les Chrome Devtools (dont la console) afin de\ndébuguer notre app.</p>\n<figure>\n  <img src=\"/public/images/articles/2016-10-04-votre-premiere-app-react-native/devmenu.png\" alt=\"devmenu + chrome devtools\" />\n  <figcaption>Jusqu'ici tout va bien</figcaption>\n</figure>\n<h2>Présentation des données</h2>\n<p>Afin d'afficher les informations que nous venons de récupérer, nous allons avoir\nbesoin de plusieurs éléments (heureusement fournis), à savoir de quoi encapsuler\nd'autres composants (une <code>&lt;View&gt;</code> ~= une <code>&lt;div&gt;</code> HTML), de quoi rendre du texte\n(<code>&lt;Text&gt;</code> ~= <code>&lt;span&gt;</code>), un bouton (nous allons utiliser <code>&lt;TouchableOpacity&gt;</code>,\nune zone dont l'opacité est modifiée lors d'un <code>onTouch</code>) et enfin d'un spinner\npour indiquer qu'une requête est en cours (<code>&lt;ActivityIndicator&gt;</code>).</p>\n<p>Nous allons également rendre notre unique composant stateful afin de stocker\nquelques informations retournées par l'API.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> {\n  AppRegistry,\n  StyleSheet,\n  ActivityIndicator, <span class=\"hljs-comment\">// import des composants</span>\n  TouchableOpacity,\n  Text,\n  View,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-native&#x27;</span>\n\n<span class=\"hljs-keyword\">import</span> { getRandomBrewdog } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./punkapi&#x27;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n    <span class=\"hljs-built_in\">super</span>(props)\n\n    <span class=\"hljs-comment\">// la state de notre composant est utilisé pour</span>\n    <span class=\"hljs-comment\">// stocker quelques infos renvoyées par l&#x27;API</span>\n    <span class=\"hljs-built_in\">this</span>.state = {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-comment\">// nom de la bière</span>\n      <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-comment\">// sa description</span>\n      <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// la requête API est-elle en cours ?</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">// nous externalisons cette fonction afin de</span>\n  <span class=\"hljs-comment\">// pouvoir l&#x27;appeler lorsqu&#x27;on le souhaite</span>\n  _getRandomBrewdogWithFeedback = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-built_in\">this</span>.setState({ <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">true</span> })\n\n    getRandomBrewdog()\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =&gt;</span> <span class=\"hljs-built_in\">this</span>.setState({\n        <span class=\"hljs-attr\">name</span>: json.name,\n        <span class=\"hljs-attr\">description</span>: json.description,\n        <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// la requête est terminée</span>\n      }))\n      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(error))\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillMount</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>._getRandomBrewdogWithFeedback()\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-built_in\">this</span>.state.isLoading\n      ? <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActivityIndicator</span> /&gt;</span></span> <span class=\"hljs-comment\">// si requête en cours, on affiche un spinner</span>\n      : <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.welcome}</span>&gt;</span>\n          Welcome to PutainDeBiere!\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Text</span>&gt;</span></span>\n\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.container}</span>&gt;</span>\n        {content}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span></span>\n    )\n  }\n}\n\n…\n</code></pre>\n<p>Votre application affiche dorénavant un spinner quelques secondes avant de\nrendre le fameux &quot;Welcome to PutainDeBiere!&quot; le temps que la requête à la\npunkAPI se fasse. Continuons de customiser ce render afin d'afficher les\ninformations retournées (et maintenant présentes dans le state de notre app).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  …\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-built_in\">this</span>.state.isLoading\n      ? <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActivityIndicator</span> /&gt;</span></span> <span class=\"hljs-comment\">// si requête en cours, on affiche un spinner</span>\n      : <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.infosContainer}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.name}</span>&gt;</span>\n            {this.state.name} // sinon on affiche le nom de la bière\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Text</span>&gt;</span>\n\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.description}</span>&gt;</span>\n            {this.state.description} // sa description\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Text</span>&gt;</span>\n\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TouchableOpacity</span> // <span class=\"hljs-attr\">on</span> <span class=\"hljs-attr\">ajoute</span> <span class=\"hljs-attr\">un</span> &quot;<span class=\"hljs-attr\">bouton</span>&quot; <span class=\"hljs-attr\">qui</span> <span class=\"hljs-attr\">requ</span>ê<span class=\"hljs-attr\">te</span> <span class=\"hljs-attr\">une</span> <span class=\"hljs-attr\">autre</span> <span class=\"hljs-attr\">bi</span>è<span class=\"hljs-attr\">re</span> <span class=\"hljs-attr\">al</span>é<span class=\"hljs-attr\">atoire</span>\n            <span class=\"hljs-attr\">onPress</span>=<span class=\"hljs-string\">{this._getRandomBrewdogWithFeedback}</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.button}</span>\n          &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span>&gt;</span>Grab a new beer!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Text</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TouchableOpacity</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span></span>\n\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.container}</span>&gt;</span>\n        {content}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span></span>\n    )\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> styles = StyleSheet.create({\n  <span class=\"hljs-attr\">container</span>: {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">justifyContent</span>: <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n    <span class=\"hljs-attr\">alignItems</span>: <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&#x27;#F5FCFF&#x27;</span>,\n  },\n  <span class=\"hljs-comment\">// ajout de styles divers</span>\n  <span class=\"hljs-attr\">infosContainer</span>: {\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">30</span>,\n  },\n  <span class=\"hljs-attr\">name</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">18</span>,\n    <span class=\"hljs-attr\">fontWeight</span>: <span class=\"hljs-string\">&#x27;700&#x27;</span>,\n    <span class=\"hljs-attr\">marginBottom</span>: <span class=\"hljs-number\">10</span>,\n  },\n  <span class=\"hljs-attr\">description</span>: {\n    <span class=\"hljs-attr\">marginBottom</span>: <span class=\"hljs-number\">10</span>,\n  },\n  <span class=\"hljs-attr\">button</span>: {\n    <span class=\"hljs-attr\">borderWidth</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">borderColor</span>: <span class=\"hljs-string\">&#x27;#000&#x27;</span>,\n    <span class=\"hljs-attr\">borderRadius</span>: <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">justifyContent</span>: <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n    <span class=\"hljs-attr\">alignItems</span>: <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n  }\n})\n</code></pre>\n<figure>\n  <img src=\"/public/images/articles/2016-10-04-votre-premiere-app-react-native/final_result.png\" alt=\"devmenu + chrome devtools\" />\n  <figcaption>Le rendu \"final\"</figcaption>\n</figure>\n<h2>Et maintenant ?</h2>\n<p>Si vous connaissez déjà React, vous pouvez:</p>\n<ul>\n<li>améliorer le code de l'app avec l'ajout de redux (par exemple) afin de\nsupprimer le state de notre composant</li>\n<li>créer un composant stateless &quot;&lt;Button&gt;&quot;</li>\n<li>styliser davantage l'app à l'aide\nd'<a href=\"https://facebook.github.io/react-native/docs/image.html\">images</a> ou\nd'<a href=\"https://facebook.github.io/react-native/docs/animations.html\">animations</a></li>\n<li>désactiver et modifier le style du bouton lors d'une requête API</li>\n<li>gérer les erreurs de requêtage de façon un poil plus élégante que de balancer\nune erreur à la tête de l'utilisateur</li>\n</ul>\n<p>Si ce n'est pas le cas, n'hésitez pas à lire ces deux articles pour vous\nfamiliariser avec ces librairies avant de continuer sur votre lancée:</p>\n<ul>\n<li><a href=\"/fr/articles/js/react/\">Introduction à React</a></li>\n<li><a href=\"/fr/articles/js/redux/\">Redux, comment ça marche ?</a></li>\n</ul>\n<p>Bonne découverte !</p>\n"}