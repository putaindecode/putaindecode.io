{"slug":"hello-swift","filename":"2016-03-01-hello-swift","title":"Hello Swift","date":"Tue, 01 Mar 2016 00:00:00 GMT","draft":false,"meta":{"date":"2016-03-01T00:00:00.000Z","title":"Hello Swift","author":"leolelego","oldSlug":"swift/hello","slug":"hello-swift"},"body":"<blockquote>\n<p>Le <strong>Swift</strong> est un langage de programmation pr√©sent√© en <strong>2014</strong> par\n<strong>Apple</strong>. Il a √©t√© cr√©√© pour simplifier le d√©veloppement d'applications pour\nles environnements d'Apple (iOS, OS X, tvOS, watchOS), car les nouveaux\nd√©veloppeurs, non habitu√©s √† <code>Objective C</code>, trouvent souvent celui-ci trop dur\n√† appr√©hender. En 2015, Apple pr√©sente <strong>Swift 2.0</strong>, une version finalis√©e et\nstable du langage. <strong>Swift</strong> est <strong>open-source</strong> depuis novembre 2015.</p>\n</blockquote>\n<h2>Le playground</h2>\n<p>Avec Swift, Apple a introduit un nouveau moyen de s'amuser avec du code : le\n<strong>playground</strong>. C'est √† mi-chemin entre le script <code>python</code> et le <code>main de C</code>.\nVous pouvez y √©crire des <code>fonctions</code>, y d√©finir des <code>classes</code>, mais aussi y\nex√©cuter du code en direct. Tout ceci est vraiment pratique pour <strong>tester des\nalgorithmes</strong>, des animations ou plus simplement <strong>apprendre √† maitriser le\nlangage</strong>. Les <code>playgrounds</code> servent √† prototyper plus qu‚Äô√† √©crire de vrais\noutils.</p>\n<p>Gr√¢ce √† un partenariat entre Apple et IBM, vous pouvez faire du <strong>Swift sur\nvotre navigateur</strong> avec Bluemix. La plate-forme de cloud coding d'IBM\n<a href=\"https://swiftlang.ng.bluemix.net\">swiftlang.ng.bluemix.net</a> offre ainsi un\n<strong><code>playground</code> en ligne</strong> pour apprendre et vous entrainer en <strong>Swift</strong>. Donc\nplus de limitation due √† l'OS pour apprendre !</p>\n<p>Sur OS X vous pouvez utiliser les <code>playground</code> avec Xcode, l'IDE d'Apple. Pour\ncr√©er un <strong><code>playground</code></strong>, vous ouvrez Xcode et <code>File‚ÜíNew‚ÜíPlayground</code>(ou\n<kbd>‚å•</kbd> + <kbd>‚áß</kbd> + <kbd>‚åò</kbd> + <kbd>N</kbd>). Vous nommez votre\n<code>playground</code> et choisissez une plate-forme pour utiliser des frameworks\nsp√©cifiques pour chaque environnement (iOS ou OS X).</p>\n<p><img src=\"/public/images/articles/2016-03-01-hello-swift/playground.jpg\" alt=\"Playground\" /></p>\n<p>Enfin, Swift peut √™tre utilis√© comme langage de script, en cr√©ant un fichier\n<code>.swift</code>, √† ex√©cuter dans le terminal avec <code>swift [file].swift</code>. Cette m√©thode\noffre peu de confort, car m√™me en ouvrant le fichier sur Xcode vous n'aurez pas\nl'autocompl√©tion. Mais si vous √™tes un mordu de <strong>Linux</strong>, sachez qu'il existe\nun compilateur Swift Linux fourni par Apple sur la\n<a href=\"https://swift.org/download/#linux\">page d√©di√©e sur swift.org</a>.</p>\n<h2>Les variables</h2>\n<p>Les variables peuvent √™tre constantes ou non. Le pr√©compilateur d'Xcode est\nassez strict avec la notion de constante. Si vous d√©clarez une variable non\nconstante mais que vous ne la modifiez nulle part, il vous proposera toujours de\nla passer en constante.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// Exemple de variables/constantes</span>\n<span class=\"hljs-keyword\">var</span> aVariable:<span class=\"hljs-type\">Type</span> = something <span class=\"hljs-comment\">// variable (mutable)</span>\n<span class=\"hljs-keyword\">let</span> aConstant:<span class=\"hljs-type\">Type</span> = somethingElse <span class=\"hljs-comment\">// constante</span>\n</code></pre>\n<p>Swift est un langage typ√©, mais le type peut √™tre implicite lors de la\nd√©claration. Swift typera alors la variable automatiquement.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">let</span> explicitString:<span class=\"hljs-type\">String</span> = <span class=\"hljs-string\">&quot;Mario&quot;</span>\n<span class=\"hljs-keyword\">let</span> implicitString = <span class=\"hljs-string\">&quot;Luigi&quot;</span> <span class=\"hljs-comment\">// This is a string too</span>\n</code></pre>\n<p>Par d√©faut, les variables ne peuvent pas √™tre nulles. Pour qu'une variable soit\ndite <em>optionelle</em>, il faut d√©clarer une variable explicite en ajoutant un <code>?</code> √†\nson type.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// Ce code ne compile pas :</span>\n<span class=\"hljs-keyword\">var</span> implicitString = <span class=\"hljs-string\">&quot;Luigi&quot;</span>\nimplicitString = <span class=\"hljs-literal\">nil</span> <span class=\"hljs-comment\">// Error : Nil cannot be assigned to type &#x27;String&#x27;</span>\n\n<span class=\"hljs-comment\">// Mais celui-ci, si</span>\n<span class=\"hljs-keyword\">let</span> explicitOptionalString:<span class=\"hljs-type\">String?</span> = <span class=\"hljs-string\">&quot;Mario&quot;</span>\nexplicitOptionalString = <span class=\"hljs-literal\">nil</span> <span class=\"hljs-comment\">// Ol√© üíÉ</span>\n</code></pre>\n<h2>Affichage</h2>\n<p>La fonction <code>print()</code> sert √† afficher une cha√Æne de caract√®res dans la console\npour un script ou une application. Pour afficher des variables dans des cha√Ænes\nde caract√®res, on utilise cette syntaxe <code>\\(maVariable)</code>. Exemple :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">let</span> age:<span class=\"hljs-type\">Int</span> = <span class=\"hljs-number\">32</span>\n<span class=\"hljs-keyword\">let</span> name:<span class=\"hljs-type\">String</span> = <span class=\"hljs-string\">&quot;Luigi&quot;</span>\n<span class=\"hljs-keyword\">let</span> point:<span class=\"hljs-type\">Float</span> = <span class=\"hljs-number\">43.4</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\(name) have \\(age) and \\(point) points&quot;</span>)\n\n<span class=\"hljs-comment\">// Ou</span>\n<span class=\"hljs-keyword\">let</span> toPrint:<span class=\"hljs-type\">String</span> = <span class=\"hljs-string\">&quot;\\(name) have \\(age) and \\(point) points&quot;</span>\n<span class=\"hljs-built_in\">print</span>(toPrint)\n</code></pre>\n<h2>Conditions &amp; boucles</h2>\n<p>Un langage sans condition √ßa sert pas √† grand-chose, donc voici la syntaxe :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">if</span> (a &gt; x) || (a &lt; y) { <span class=\"hljs-comment\">// Si a est plus grand que x ou plus petit que y</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a &gt; x OR a &lt; y &quot;</span>) <span class=\"hljs-comment\">// j&#x27;affiche</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> a &lt; z { <span class=\"hljs-comment\">// Sinon si ...</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a &lt; z&quot;</span>)\n} <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// Sinon</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;y &lt;= a &lt;= x&quot;</span>)\n}\n</code></pre>\n<p>Quelques exemples de boucles <code>while</code> et <code>for</code> :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// While</span>\n<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-number\">10</span> { <span class=\"hljs-comment\">// Tant que i &lt; 10 j&#x27;affiche</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;i = \\(i)&quot;</span>)\n    i+=<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// incr√©mente i de 1</span>\n}\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>...<span class=\"hljs-number\">10</span>) { <span class=\"hljs-comment\">// pour i de 0 √† 10</span>\n    <span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>...<span class=\"hljs-number\">10</span>).reversed() { <span class=\"hljs-comment\">// pour i de 1 √† 10 en moonwalk</span>\n    <span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">stride</span>(from: <span class=\"hljs-number\">0</span>, to: <span class=\"hljs-number\">10</span>, by: <span class=\"hljs-number\">2</span>) { <span class=\"hljs-comment\">// pour i de 0 √† 10 par saut de 2 (10 non compris)</span>\n    <span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-comment\">// autre notation de For utilisant des Ranges</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..&lt;<span class=\"hljs-number\">3</span>{\n    <span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-comment\">// For-In : Pour mes √©l√©ments d&#x27;un Array</span>\n<span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> myCollection {\n    element.doSomething()\n}\n\n<span class=\"hljs-comment\">// For-In : en enumurant la boucle</span>\n<span class=\"hljs-keyword\">for</span> (index,valeur) <span class=\"hljs-keyword\">in</span> myCollection.<span class=\"hljs-built_in\">enumerate</span>(){\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;valeur √† l&#x27;index [\\(index)] -&gt; \\(valeur)&quot;</span>)\n}\n</code></pre>\n<blockquote>\n<p>Depuis Swift 2.2, les notations <code>--</code> et <code>++</code> sont d√©pr√©ci√©es, donc plus de i++\ndans les boucles üò©. Ce qui explique aussi que les boucles For C-Style sont\naussi d√©pr√©ci√©es. Ex:<code>for var i = 0; i &lt; 3; i++</code>. Pour ce genre de boucle il\nfaut utiliser la notation <code>(0...3)</code>.</p>\n</blockquote>\n<h2>Fonctions</h2>\n<p>Un script sans fonction c'est comme une raclette sans Saint-Nectaire. Beaucoup\nde d√©butants le font mais une fois qu'on y a gout√©, il est impossible s'en\npasser !</p>\n<p>Donc voici la syntaxe <del>d'un Saint-Nectaire</del>... d'une fonction :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myFunctionName</span><span class=\"hljs-params\">(myStringInput:String,myIntInput:Int)</span></span>-&gt;<span class=\"hljs-type\">Int</span>{\n\n    <span class=\"hljs-comment\">// Votre code</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">// Retour</span>\n}\n</code></pre>\n<p>En r√©alit√©, les fonctions sont un cas particulier d'utilisation d'une notion\nintroduite par Swift qu'ils appellent les <em>closures</em>. Pour les amateurs de\n<em>Block</em> (Objective C, C<ins>14) et <strong>Lambdas</strong> (C</ins>, Java,...), les closures seront\nd√©taill√©es dans un prochain article.</p>\n<h2>Le mot de la fin</h2>\n<p>Avec tout √ßa vous devriez d√©j√† vous amuser un peu ! Pour information, les\nscripts Swift peuvent <strong>utiliser\n<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/\">Foundation</a></strong>\nsur Linux ou OS X , le framework de base des OS d'Apple bien connu des\nd√©veloppeurs OS X/iOS. Il permet le traitement des fichiers, des <code>String</code> et\n<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/\">bien plus</a>.</p>\n"}