{"slug":"vagrant-enlarge-your-vm","filename":"2013-11-08-vagrant-enlarge-your-vm","title":"Vagrant, enlarge your VM","date":"Fri, 08 Nov 2013 00:00:00 GMT","draft":false,"meta":{"date":"2013-11-08T00:00:00.000Z","title":"Vagrant, enlarge your VM","author":"lionelB","oldSlug":"vagrant","slug":"vagrant-enlarge-your-vm"},"body":"<p>Vagrant, au cas où tu ne connaîtrais pas encore, permet de fournir des\nenvironnements de développements reproductibles, facilement configurables et qui\nse partagent entre les membres de l’équipe. En gros, tu vas pouvoir décrire et\nconfigurer des machines virtuelles (VM) depuis un seul fichier texte, le\n<code>Vagrantfile</code>. Plutôt pratique pour avoir un environnement de dev équivalent à\ncelui de la prod. Et tout cela avec un processus simplifié à l'extrême.</p>\n<h1>Et c’est pour qui le beau joujou ?</h1>\n<p>Vagrant s’adresse principalement à toi, mais aussi à un public de\n<strong>développeurs</strong> qui souhaitent pouvoir mettre en place rapidement un\nenvironnement de dev avec une machine virtuelle (genre Apache-PHP-SQL) sans y\npasser trop de temps. Vagrant, c’est aussi pour des <strong>devops</strong> qui voudraient\ntester la mise en place et le <em>provisioning</em> de leur infra. Dans la doc, ils\ndisent même que ça s’adresse aux designers (pour dire si c’est simple) mais faut\npas déconner non plus, on n'a jamais vu un designer dégainer une console :)</p>\n<p>Globalement le workflow Vagrant se résume à 2-3 commandes :</p>\n<ol>\n<li><code>vagrant init</code> au début du projet, puis ;</li>\n<li><code>vagrant up</code> pour lancer la VM, et ;</li>\n<li><code>vagrant halt</code>pour l’arrêter.</li>\n</ol>\n<h1>Étape 1 - <code>vagrant init</code></h1>\n<p>Vagrant fournit un support pour les principales plates-formes de virtualisation,\nappelées <em>Provider</em> dans la langue de Justin Bieber et avec par défaut celui\npour VirtualBox. Et cerise sur le clafoutis, tu as aussi la possibilité de\nconfigurer / provisionner tes box avec des scripts Chef ou Puppet (ou juste un\nscript shell si t’es old-school \\o/ ).</p>\n<p>Bon, je suppose que c’est encore un peu flou, alors voilà comment ça se\nprésente. Une fois installé (<a href=\"http://downloads.vagrantup.com/\">http://downloads.vagrantup.com/</a>), tu devrais avoir\nune nouvelle commande de dispo. Alors, dégaine ton terminal et envoie un\n<code>vagrant init</code>. Ça devrait créer un fichier <code>Vagrantfile</code> qui va décrire ta\nmachine virtuelle (ne t’inquiète pas, c’est juste écrit en Ruby). En gros, de\nquelle box de base tu pars, comment tu la configures (réseaux, dossier partagé\nentre la VM et le host, ta machine réelle) et comment tu la provisionnes (via un\nshell, avec un script Puppet...).</p>\n<h2>La config de la box</h2>\n<p>Ensuite, voilà les quelques points à paramétrer :</p>\n<ul>\n<li><code>config.vm.box = &quot;base&quot;</code> pour spécifier le nom d’une box préalablement\ntéléchargée.</li>\n<li><code>config.vm.box_url = &quot;http://domain.com/path/to/above.box&quot;</code>. Tu remplaces par\nl’URL de la box de tes rêves. Tu peux trouver une liste assez complète de box\nplus ou moins configurées sur le site <a href=\"http://www.vagrantbox.es/\">http://www.vagrantbox.es/</a> (ProTip™:\nchoisis bien le <em>provider</em> correspondant à ton gestionnaire de VM)</li>\n<li><code>config.vm.network :forwarded_port, guest: 80, host: 8080</code>. Pratique pour\naccéder au serveur qui tourne sur la VM. Après, tu retrouves un peu les mêmes\noptions de config réseau qu’avec VirtualBox (réseaux privés, connexion par\npont, etc.)</li>\n<li><code># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</code>. Avec ça, tu vas\npouvoir ajouter un répertoire qui sera partagé avec ta machine virtuelle. Par\ndéfaut, Vagrant te permet d’accéder au répertoire courant depuis\n<code>/home/vagrant</code> dans la VM.</li>\n</ul>\n<h2>Le provisioning de box</h2>\n<p>Alors attention, c'est un des trucs cools avec Vagrant. Avant, quand tu voulais\nte monter une VM pour travailler, il fallait aussi la configurer, installer les\nbonnes versions de chaque brique que le projet utilise. Ça pouvait être pénible\net surtout prendre du temps. Avec Vagrant, tu peux automatiser cette partie,\nsoit en utilisant simplement un script, soit avec un moyen moderne comme Chef ou\nPuppet. Et si jamais t'as besoin d'un truc particulier, une config que tu\nutilises souvent, tu peux toujours packager la box que t'as configuré avec amour\npour pouvoir la réutiliser dès que l'occasion se présente. Sinon tu peux déjà\ntrouver pas mal de box déjà prêtes à l'emploi, avec ou sans support pour Puppet,\nChef...</p>\n<p>La suite du fichier contient des exemples de type de provisioning (Puppet, Chef\nSolo ou Chef Server). Et si jamais tu souhaites lancer un script de provisioning\n:</p>\n<pre><code class=\"hljs language-ruby\">Vagrant.configure(<span class=\"hljs-string\">&quot;2&quot;</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|config|</span>\n  config.vm.provision <span class=\"hljs-string\">&quot;shell&quot;</span>, <span class=\"hljs-symbol\">path:</span> <span class=\"hljs-string\">&quot;provision.sh&quot;</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<blockquote>\n<p>Vagrant te permet aussi de créer tes propres box déjà provisionnées via la\ncommande <code>vagrant package</code>. C’est assez pratique quand tu dois\ntélécharger-compiler-installer tout l’Internet.</p>\n</blockquote>\n<h1>Étape 2 - <code>vagrant up</code></h1>\n<p>Bon, la première fois risque de prendre du temps, parce que Vagrant va\ntélécharger ta box, puis lancer le provisioning. Profites-en pour faire un tour\nsur <a href=\"http://vim-adventures.com/\">http://vim-adventures.com/</a> et jouer un peu en attendant.</p>\n<p>Une fois terminé, tu as maintenant une box dispo avec laquelle travailler.</p>\n<h1>Étape 3 - Joie \\o/.</h1>\n<p>Je pensais faire une troisième partie sur comment arrêter la VM mais ça présente\npas vraiment d’intérêt car ça tient en une ligne de commande.</p>\n<p>Bref, le point important de tout ça, c’est que les autres relous de ton équipe\nne pourront plus dire que pourtant ça marche bien chez eux, et qu’ils\ncomprennent pas, c’est vraiment étrange... enfin sauf s'ils sont de mauvaise foi\n:)</p>\n<ul>\n<li>L’intégrateur n’aura plus à se taper 14 installations de trucs en ligne de\ncommande qu’il ne retient jamais, pour rajouter un bout de CSS ou de JS.\n(ProTip™: là, ça rentre sur un post-it !)</li>\n<li>Le dev backend n’aura plus à pleurer quand on lui demande de remettre le nez\ndans un projet vieux de 2 ans avec que des versions de PHP / Ruby ou MySQL\ndépassées qui vont casser la superbe config qu’il a mis 1 semaine à fignoler\navec les dernières techno à la mode.</li>\n<li>L’admin sys pourra packager les box de chaque projet, provisionnées et\nconfigurées pour éviter d’avoir à configurer les postes des autres dev à\nchaque changement de projet.</li>\n</ul>\n<h1>Quelques commandes pratiques</h1>\n<blockquote>\n<p><code>vagrant ssh</code> te permet de te connecter en mode terminal <code>vagrant status</code> pour\nles têtes <del>à claques</del> en l’air</p>\n</blockquote>\n<h1>Quelques liens</h1>\n<ul>\n<li><a href=\"http://docs.vagrantup.com/v2/\">La documentation officielle de <del>viagra</del> Vagrant</a></li>\n<li><a href=\"http://jolicode.com/blog/cuisinez-vos-serveurs-comme-un-chef-premiere-partie\">Cuisinez vos serveurs comme un Chef – Première partie</a></li>\n</ul>\n"}