{"slug":"html-hache-the-aime-elle-vous-dites","filename":"2013-11-07-html-hache-the-aime-elle-vous-dites","title":"HTML ? Hache-Thé-Aime-Elle vous dites ?","date":"Thu, 07 Nov 2013 00:00:00 GMT","draft":false,"meta":{"date":"2013-11-07T00:00:00.000Z","title":"HTML ? Hache-Thé-Aime-Elle vous dites ?","author":"MoOx","oldSlug":"html","slug":"html-hache-the-aime-elle-vous-dites"},"body":"<p>Ahh, le HTML. LE <a href=\"http://fr.wikipedia.org/wiki/HTML\">H.T.M.L</a>. Sacré langage\nhein ?</p>\n<p>On le connait tous ce fameux truc qu'on retrouve dans pas mal d'URL : <code>.html</code>.\nOui, d'accord, par le passé on avait l'extension de radin <code>.htm</code>, mais elle n'a\nclairement pas duré.</p>\n<p>Vous vous demandez déjà ce qu'il y a à raconter sur l'HTML peut-être ? Et bien,\nje ne suis pas là pour vous apprendre toutes les balises, leurs enfants,\nparents, les cousins cousines, patati patata… Ah ça non, j'ai autre chose à\nfaire, et vous aussi. Et si c'est ce que vous cherchez, vous trouverez ce qu'il\nvous faut sur <a href=\"http://docs.webplatform.org/wiki/html/elements\">tout</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">un</a>\n<a href=\"http://www.w3.org/html/wg/drafts/html/CR/dom.html#elements\">tas</a>\n<a href=\"http://en.wikipedia.org/wiki/HTML_element\">d'autres</a>\n<a href=\"http://www.vectorskin.com/referentiels-standards-w3c/balises-html5/\">sites</a>.</p>\n<p>Ce que je vais faire par contre, c'est tenter de partager un document sérieux\n(dans le fond hein) avec tout pleins de conseils super pertinents pour que vous\nécriviez de l'HTML comme personne. Non, je déconne. En fait, ça va être la\ngrosse marrade avec les trucs les plus nazes que je peux vous raconter. C'est\nparti mon jQuéri.</p>\n<h2>L'ancien testament</h2>\n<p>Si vous avez ouvert ne serait-ce que quelques documents HTML dans votre vie,\nvous avez dû croiser ce qu'on appelle un\n<a href=\"http://fr.wikipedia.org/wiki/Doctype\">doctype</a> qui ressemble à ça :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class=\"hljs-meta-string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span>\n</code></pre>\n<p>Vous pourrez remarquer dans ce <del>petit</del> gros bout de code bien relou qu'il y a\nune <a href=\"http://fr.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a> : c'est tout\nsimplement la DTD (doctype) du langage en question. Avec les spécifications pour\nla validation, toussa toussa… Si vous avez 2 minutes, allez jeter un coup d'œil.</p>\n<p>Je ne vais pas vous le cacher, et même si en théorie, par héritage de SGML/XML\nça part d'une bonne intention, dans la pratique ça sert juste à se toucher la\nnouille sur la validation. Car aujourd'hui HTML (5) n'est clairement plus du\nXML.</p>\n<p>Oui bon ok, moi-même à une époque j'ai eu ma passe où je collais ce petit badge\npartout dans mes footers :</p>\n<figure>\n  <a href=\"http://validator.w3.org/check?uri=referer\">\n    <img src=\"https://www.w3.org/Icons/valid-xhtml10\"\n        alt=\"Valid XHTML 1.0 Transitional\" height=\"31\" width=\"88\" />\n  </a>\n  <figcaption>Ça pète la classe hein ?</figcaption>\n</figure>\n<p>Mais bon les conneries, ça va un moment. Pour info, j'ai dû valider le code\nsuivant pour obtenir ce logo :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class=\"hljs-meta-string\">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Ben dites donc, c'est propre tout ça. Un petit document tout vide mais déjà bien\nrempli. Mais attendez, en 2013 on peut pas faire mieux ? Oh si !</p>\n<h2>Le nouveau testament</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n</code></pre>\n<p>Il faut savoir qu'un simple document <em>valide</em>, peut se résumer à ça. Oui oui mes\ncocos, ce document est parfaitement valide. Voilà, j'voulais vous le dire.\nArrêtez d'utiliser des doctypes dans tous les sens, ça ne sert à rien. Sachant\nla qualité du code qu'on trouve sur les internets, les navigateurs s'arrêtent au\nparsing lorsqu'ils voient ça <code>&lt;!doctype html</code> (c'est\n<a href=\"http://paulrouget.com/\">Paul Rouget</a> qui me l'a dit, je le crois donc sur\nparole). Et après ma petite parenthèse ci-dessous, je vais vous expliquer\npourquoi.</p>\n<p>Car je sais ce que certains vont me rétorquer.</p>\n<blockquote>\n<p>Oui mais moi monsieur, je valide en <strong>XHTML 1.1 Strict Turbo X Prime\nUltra</strong><br /> Puis ton document valide là, il sera valide quand HTML5 sera\nfinalisé…</p>\n</blockquote>\n<p>Dans un sens ils n'auraient pas tort. Mais dans la pratique, les navigateurs\ns'en contrebranlent de savoir quel type d'HTML vous utilisez <small>(à moins que\nvous aimiez jouer avec la mort et que vous utilisez le prologue XML lorsque vous\nservez de l'XHTML…)</small>. Car quand bien même vous utilisez un doctype à\nrallonge, il est tout à fait possible que vous vous chiiez, et que vous laissiez\ndes erreurs. Oui, l'erreur est humaine… Puis HTML 5 est déjà bien implémenté\ndans les grandes lignes. Et ça car il est presque rétrocompatible. Vous devriez\nle comprendre d'ici la fin de cet écrit. Ou pas. Mais je vous le dis, il a été\npensé dans ce sens.</p>\n<p>Revenons à la validation. Du coup, à quoi ça sert de valider ? On va voir ça par\nun exemple digne des plus grands diplômes.</p>\n<h2>Ce <code>&lt;p&gt;</code> fout la merde</h2>\n<p>Prenons le code suivant :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Putain de page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">2em</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10em</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Ma première putain de page html<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n  Ouais mec t&#x27;as vu ce code de ouf ?\n  Il est trop bien parce que:\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Il est<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">del</span>&gt;</span>valide<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">del</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Il est beau<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre>\n<p>Certains d'entre vous ont dû remarquer la coquille. Celle-là, mes élèves qui\ndécouvrent le HTML me la font à chaque fois lorsqu'ils codent leur super CV\n(super exercice tavu, ils apprécient particulièrement le titre).</p>\n<p>Toi là au fond, t'as pas repéré le souci encore ?</p>\n<p>Regarde plutôt le rendu :</p>\n<p><iframe\n  class=\"putainde-Post-iframe\"\n  height=\"350\"\n  src=\"/public/misc/articles/2013-11-07-html-hache-the-aime-elle-vous-dites/notvalid.html\"></p>\n</iframe>\n<blockquote>\n<p>WAT ? ET MON MARGIN BOTTOM KESSIFÉLÀ EN DEUBEULE ?</p>\n</blockquote>\n<p>Le rapport avec la validation me direz-vous ? Et bien plutôt que de perdre du\ntemps à comprendre le pourquoi du comment, en validant le code ci-dessus,\nl'erreur vous est implicitement expliquée (oui, ce code n'a qu'une seule erreur\nà la validation).</p>\n<blockquote>\n<p>Line 17, Column 4: <strong>No p element in scope but a p end tag seen.</strong></p>\n</blockquote>\n<p>Typiquement, il faut savoir comprendre un message d'erreur et savoir lire entre\nles lignes. Pas faire &quot;mais monsieur, j'comprends pas là&quot; (d'ailleurs mes élèves\nvalident tous leur code, pour apprendre sur le tas, c'est une bonne façon).</p>\n<p>Celui-là nous dit en gros : <em>je ne vois pas d'élement <strong>p</strong> à fermer dans le\ncoin</em>. Ça veut dire que… Ça veut dire que mon <strong>p</strong> ouvert n'est pas reconnu ?\nMais attends, qu'est-ce que c'est que cette histoire ?!</p>\n<p>Si vous prenez 10 secondes pour inspecter ce code, vous allez vite vous\naperçevoir qu'il est parsé ainsi :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>…<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  …\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre>\n<p><em>Mais qu'est-ce que… ? Hein ? Mais ? Quoi ? Comment ?</em></p>\n<p>Oui, vous avez bien vu. L'HTML est parsé n'importe comment. Enfin non, il est\nparsé comme il peut, au mieux. Je pense que là vous commencez à comprendre ?</p>\n<p>Ce que j'essaye de vous montrer par là, c'est qu'il faut toujours faire\nattention à ce qu'on écrit et ce qu'on pense avoir comme résultat, même avec du\n<em>simple</em> HTML.</p>\n<p><strong>Bon après j'espère qu'en 2013, vous avez tous le réflexe d'inspecter l'HTML\ndès que vous avez un truc bizarre en CSS ou en JavaScript… Si c'est pas encore\nle cas, prenez l'habitude.</strong></p>\n<h2>Mais du coup le navigateur il fait n'importe quoi ?</h2>\n<p>Le navigateur essaye clairement de faire au mieux. Si vous inspectez l'exemple\nprécédent, vous vous apercevrez aussi que je n'ai mis aucune balise <code>&lt;html&gt;</code>,\n<code>&lt;head&gt;</code> ou <code>&lt;body&gt;</code>. Pourquoi ? Ben car le parseur le fait à ma place. Mais\npourquoi il fait ça ? Tout simplement car on oublie (très - trop ?) souvent de\nbien écrire. Comme quand j'écris en.</p>\n<p>La balise\n<a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/tbody\"><code>&lt;tbody&gt;</code></a> est un\nbon exemple. Si vous inspectez vos tableaux HTML, vous verrez vite fait que\ncette balise, que quasiment personne ne connait/utilise, est pourtant\nnécessaire/utile. Mais du coup, si je me fais une petite requête JavaScript\n<code>document.querySelectorAll('table &gt; tr')</code>, il est fort possible que je n'aie pas\nce que je souhaite. <a href=\"http://codepen.io/MoOx/pen/esFjx\">La preuve</a>.</p>\n<p>Voyons un autre exemple : mettons-nous à la place d'un navigateur si, alors que\nje suis en XHTML 1.1 Strict, je lui glisse une balise <code>&lt;center&gt;</code>.</p>\n<ul>\n<li><p><strong>Cas 1.</strong> Je n'ai pas fait attention au doctype et je veux vraiment une\nbalise <code>&lt;center&gt;</code> : bah là, rien à dire à part &quot;<em>Merci</em>&quot;. Le navigateur essaye\nclairement de faire au mieux, et dans un cas comme celui-là, on ne peut que le\nremercier.</p></li>\n<li><p><strong>Cas 2.</strong> Je sais exactement dans quel doctype je suis, j'ai conscience de ce\nque je fais : je joue au con, tant pis pour ma gueule !</p></li>\n</ul>\n<p>Dans tous les cas, le navigateur va laisser passer cette balise au cas où que.\nPuis bon, faut avouer que c'est super pratique cette balise hein ? Comme\n<code>&lt;blink&gt;</code> et <code>&lt;marquee&gt;</code> quoi. ❤</p>\n<figure>\n  <img src=\"/public/images/articles/2013-11-07-html-hache-the-aime-elle-vous-dites/canthandlemyswag.gif\" alt=\"Can't handle my swag\" />\n  <figcaption><marquee>Marquee for the win.</marquee></figcaption>\n</figure>\n<h2>Note de service</h2>\n<p>S'il vous plaît mesdames, messieurs, lorsque vous faites du CSS inline, ou que\nvous incorporez un JavaScript, arrêtez-vous à des choses simples, qui\nfonctionnent :</p>\n<ul>\n<li><p><code>&lt;style&gt;</code> suffit. Pas besoin de mettre un type, un langage etc. Et ça vous\névitera des <a href=\"http://codepen.io/MoOx/pen/sEzuJ\">prises de têtes à la con</a>.\nPuis, vous avez déjà utilisé autre chose que du CSS vous ?!</p></li>\n<li><p><code>&lt;script&gt;</code>, idem, même sur IE 6. Pareil que précédemment, pas besoin de mettre\nun hideux <code>&lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript 1.1&quot;&gt;</code>. La\nmoindre faute de frappe ne pardonne pas. Aucun intêret à se fatiguer, sauf si\nvotre\n<a href=\"https://code.google.com/p/ruby-in-browser/\">script n'est pas du JavaScript</a>.</p></li>\n</ul>\n<h2>Le mot de la fin</h2>\n<p>Ne soyez jamais sûr de vous, que ce soit pour écrire de l'HTML ou faire une mise\nen prod' un vendredi soir à <a href=\"http://www.miximum.fr/le-bug-de-17h30.html\">17h30</a>.\nFaites pas les malins. Ne sous-estimez pas HTML. Si ça merde quelque part,\nvérifiez plus loin que le bout de votre nez, que votre règle CSS qui marche pas,\nou votre morceau de JavaScript buggé.</p>\n<h2><a href=\"https://www.youtube.com/watch?v=BCYLQUdsN5g&amp;t=39s\">Aller plus loiiin, allez plus haaauuut… !</a></h2>\n<ul>\n<li><a href=\"https://github.com/necolas/idiomatic-html\" lang=\"en\">idiomatic-html</a>\n(<a href=\"http://fr.wikipedia.org/wiki/Idiomatique\">ceci n'est pas une contraction d'<em>idiot</em> et d'<em>automatique</em></a>).</li>\n<li><a href=\"https://github.com/necolas/idiomatic-css\" lang=\"en\">idiomatic-css</a>\n(traduction incluse)</li>\n<li>Validation automatique dans un workflow Grunt:\n<ul>\n<li><a href=\"https://github.com/praveenvijayan/grunt-html-validation\">praveenvijayan/grunt-html-validation</a></li>\n<li><a href=\"https://github.com/jzaefferer/grunt-html\">jzaefferer/grunt-html</a> (basé sur\nvalidator.nu)</li>\n</ul></li>\n</ul>\n"}