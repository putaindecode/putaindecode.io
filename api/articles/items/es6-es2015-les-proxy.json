{"slug":"es6-es2015-les-proxy","filename":"2015-12-18-es6-es2015-les-proxy","title":"ES6, ES2015 : les Proxy","date":"Fri, 18 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-18T00:00:00.000Z","title":"ES6, ES2015 : les Proxy","author":"DavidBruant","oldSlug":"js/es2015/proxy","slug":"es6-es2015-les-proxy"},"body":"<h2>Proxies Origin</h2>\n<h3>What the DOM?</h3>\n<p>ES5 avait laissé un petit trou nommé\n<em><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.8\">&quot;host objects&quot;</a></em>\nafin de donner un &quot;cadre légal&quot; aux trucs bizarres qui peuvent arriver dans le\nDOM. Par exemple, certaines collections sont dites\n<a href=\"https://dom.spec.whatwg.org/#concept-collection-live\">&quot;live&quot;</a> et même si on ne\ntouche pas l'objet directement, on se rend compte que la collection a été\nmodifiée.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> childNodes = <span class=\"hljs-built_in\">document</span>.body.childNodes;\n<span class=\"hljs-built_in\">console</span>.log(childNodes.length); <span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-built_in\">document</span>.body.appendChild(<span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&quot;div&quot;</span>));\n<span class=\"hljs-comment\">// Personne n&#x27;a touché explicitement l&#x27;objet dans la variable divs, pourtant :</span>\n<span class=\"hljs-built_in\">console</span>.log(childNodes.length); <span class=\"hljs-comment\">// 1, wat!</span>\n</code></pre>\n<p>Ce genre de comportement n'est pas explicable par la sémantique d'ES5 (à moins\nd'accepter des gros problèmes de performances qui consisteraient à ce que le DOM\ngarde une référence vers toutes les collections live et les mette à jour\nrégulièrement, ou des getter partout, etc.). La\n<a href=\"https://heycam.github.io/webidl/\">spec WebIDL</a> qui fait le lien entre les\nobjets décrits dans les spec W3C et la sémantique ECMAScript se contentait d'un\n&quot;c'est un <em>host object</em>, allé, salut les gars les filles !&quot; (en fait, c'était\npire que ça :\n<a href=\"http://www.w3.org/TR/DOM-Level-2-Core/ecma-script-binding.html\">la spec de l'époque</a>\nétait absurde tant elle manquait de détails, mais je vous fais la version de\nNoël).</p>\n<p>Mais ce genre d'explication n'est pas vraiment acceptable. Et si un navigateur a\nun bug, comment je polyfille le comportement correct, hein ?</p>\n<p>Les proxies peuvent aider.</p>\n<h3>Qu'est-il arrivé à mon objet ?</h3>\n<p>Avant que la planète JS ne s'amourache des\n<a href=\"https://facebook.github.io/immutable-js/\">structures des données immutables</a>,\non créait des objets et des fois, on les passait à du code qui les modifiait et\non se demandait bien quand/comment l'objet en question en était arrivé dans cet\nétat. Depuis ES5, on peut logger dans des <em>getters</em> et <em>setters</em>, mais on ne\npeut pas savoir quand on s'est pris un <code>delete</code> ou un\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze</a> ;\non peut constater le résultat, mais c'est dur de remonter à la source.</p>\n<p>Les proxies peuvent aider.</p>\n<h3>Laisse mon objet tranquille !</h3>\n<p>La sémantique des objets tel qu'on les utilise permet à différents scripts\nd'agir sur les mêmes objets, mais d'une manière qui ne permet pas forcément\ntoujours un contrôle fin. Par exemple, si je donne accès à la référence d'un\nobjet à quelqu'un, il possède cette référence pour toujours et dans la foulée\ntous les droits associés (donc modifier l'objet arbitrairement souvent) ; il\nn'est pas possible de <strong>révoquer</strong> l'accès dans le temps. Ce script a aussi\naccès à toutes les propriétés de l'objet, même si on voudrait n'en partager que\ncertaines ; il n'est pas facile <strong>d'atténuer</strong> les droits à un objet (sans créer\nde nouveaux objets et de se lancer dans des synchronisations coûteuses).</p>\n<h2>Les proxies, comment ça marche</h2>\n<p>Un <strong>proxy</strong> est un nouvel objet (on ne peut pas transformer un objet en un\nproxy) qui &quot;emballe&quot; (<em>wrap</em>) un objet existant, la <strong>target</strong> et décrit le\ncomportement du proxy via un objet appelé le <strong>handler</strong> qui définit les <em>traps</em>\ndu proxy.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> target = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> };\n\n<span class=\"hljs-keyword\">const</span> handler = {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">target, prop</span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;It&#x27;s a (get) trap!&quot;</span>, prop, target[prop]);\n    <span class=\"hljs-keyword\">return</span> target[prop] + <span class=\"hljs-number\">1</span>;\n  },\n};\n\n<span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(target, handler);\n<span class=\"hljs-built_in\">console</span>.log(proxy.a);\n</code></pre>\n<p>console output:</p>\n<pre><code>It's a (get) trap! a 1 // inside the trap\n2 // new value modified by the trap\n</code></pre>\n<h3>Liste des traps</h3>\n<p>L'exemple ci-dessus montre la trap <code>get</code>. Voici la liste des traps\ndisponible :</p>\n<ul>\n<li>getPrototypeOf\n<ul>\n<li>pour <code>Object.getPrototypeOf</code></li>\n</ul></li>\n<li>setPrototypeOf\n<ul>\n<li>pour <code>Object.setPrototypeOf</code></li>\n</ul></li>\n<li>isExtensible\n<ul>\n<li>pour <code>Object.isExtensible</code></li>\n</ul></li>\n<li>preventExtensions\n<ul>\n<li>pour <code>Object.preventExtensions</code></li>\n</ul></li>\n<li>getOwnPropertyDescriptor\n<ul>\n<li>pour <code>Object.getOwnPropertyDescriptor</code></li>\n</ul></li>\n<li>defineProperty\n<ul>\n<li>pour <code>Object.defineProperty</code></li>\n</ul></li>\n<li>has\n<ul>\n<li>pour l'opérateur <code>in</code></li>\n</ul></li>\n<li>get\n<ul>\n<li>pour <em>getter</em> une propriété</li>\n</ul></li>\n<li>set\n<ul>\n<li>pour <em>setter</em> une propriété</li>\n</ul></li>\n<li>deleteProperty\n<ul>\n<li>pour l'opérateur <code>delete</code></li>\n</ul></li>\n<li>enumerate\n<ul>\n<li>pour les <code>for...in</code> et <code>Object.keys</code></li>\n</ul></li>\n<li>ownKeys\n<ul>\n<li>pour <code>Object.getOwnPropertyNames</code></li>\n</ul></li>\n<li>apply\n<ul>\n<li>pour quand on appelle le proxy comme une fonction.</li>\n</ul></li>\n<li>construct\n<ul>\n<li>pour quand on appelle le proxy comme un constructeur (avec <code>new</code>).</li>\n</ul></li>\n</ul>\n<p>Le lecteur attentif aura remarqué que cette liste (et les signatures des\nfonctions) correspondent à l'API</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect#Methods\">Reflect</a></p>\n<h2>Solutions aux problèmes précédents</h2>\n<h3>Logger les opérations</h3>\n<p>Vous voulez savoir quand on objet se prend un <code>delete</code> ? Rien de plus\nfacile !</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(\n  { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> },\n  {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">deleteProperty</span>(<span class=\"hljs-params\">target, prop</span>)</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Wow, someone just deleted&quot;</span>, prop);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.deleteProperty(target, prop);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">freeze</span>(<span class=\"hljs-params\">target</span>)</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Wow, someone just froze the object&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.freeze(target);\n    },\n  },\n);\n\n<span class=\"hljs-keyword\">delete</span> p.b;\n<span class=\"hljs-built_in\">Object</span>.freeze(p);\n</code></pre>\n<h3>Implémenter des NodeList live</h3>\n<p>Ici, on prétend réimplémenter une collection DOM <em>live</em>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getChildNodesLiveCollection</span>(<span class=\"hljs-params\">parent</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(\n    {},\n    {\n      <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, prop</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (prop === <span class=\"hljs-string\">&quot;length&quot;</span>) {\n          <span class=\"hljs-comment\">// l&#x27;astuce qui n&#x27;est pas de la triche , c&#x27;est qu&#x27;on va</span>\n          <span class=\"hljs-comment\">// chercher la valeur au moment de l&#x27;appel</span>\n          <span class=\"hljs-keyword\">return</span> parent.childNodes.length;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> target[prop];\n      },\n    },\n  );\n}\n\n<span class=\"hljs-keyword\">var</span> liveChildNodes = getChildNodesLiveCollection(<span class=\"hljs-built_in\">document</span>.body);\n<span class=\"hljs-built_in\">console</span>.log(liveChildNodes.length); <span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-built_in\">document</span>.body.appendChild(<span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&quot;div&quot;</span>));\n<span class=\"hljs-built_in\">console</span>.log(liveChildNodes.length); <span class=\"hljs-comment\">// 1, magie magie !</span>\n</code></pre>\n<h3>Atténuation</h3>\n<p>J'ai un objet avec plein de propriété et je veux en partager une version\natténuée à une bibliothèque en laquelle je n'ai qu'une confiance partielle.</p>\n<pre><code class=\"hljs language-js\">// On va se faire MitM avec ce HTTP sans &#x27;S&#x27; !\nimport dubiousLib from &#x27;http://dubious-lib.com/main.js&#x27;;\n\nconst myImportantObject = {\n    jfkKillerName: &#x27;...&#x27;,\n    elvisGeoloc: {\n        long: &#x27;...&#x27;,\n        lat: &#x27;...&#x27;\n    },\n    name: &quot;David Bruant&quot;,\n    xmasPresentList: [\n        &quot;Raspberry Pi B&quot;,\n        &quot;Nouveau téléphone (mais pas FirefoxOS, parce qu&#x27;ils arrêtent les\ntéls)&quot;,\n        &quot;Une boîte de Tic Tac&quot;\n    ]\n}\n\nfunction makeWhitelistProxy(t, whitelist){\n    return new Proxy(t, {\n        get(target, prop){\n            if(!whitelist.has(prop))\n                throw new Error(&#x27;Attempt to access forbidden property&#x27;)\n\n            return Reflect.get(target, prop);\n        },\n        set(target, prop, value){\n            if(!whitelist.has(prop))\n                throw new Error(&#x27;Attempt to access forbidden property&#x27;)\n\n            return Reflect.set(target, prop, value);\n        },\n        getOwnPropertyDescriptor(target, prop){\n            if(!whitelist.has(prop))\n                throw new Error(&#x27;Attempt to access forbidden property&#x27;)\n\n            return Reflect.getOwnPropertyDescriptor(target, prop);\n        },\n        deleteProperty(target, prop){\n            if(!whitelist.has(prop))\n                throw new Error(&#x27;Attempt to access forbidden property&#x27;)\n\n            return Reflect.deleteProperty(target, prop);\n        },\n        defineProperty(target, prop, desc){\n            if(!whitelist.has(prop))\n                throw new Error(&#x27;Attempt to access forbidden property&#x27;)\n\n            return Reflect.defineProperty(target, prop, desc);\n        },\n        has(target, prop){\n            if(!whitelist.has(prop))\n                throw new Error(&#x27;Attempt to access forbidden property&#x27;)\n\n            return Reflect.has(target, prop);\n        }\n    })\n}\n\nconst attenatedObject = makeWhitelistProxy(\n    myImportantObject,\n    new Set([&quot;name&quot;, &quot;xmasPresentList&quot;])\n);\n\nconsole.log(myImportantObject.name === attenatedObject.name);\nconsole.log(myImportantObject.jfkKillerName); // &quot;...&quot;\nconsole.log(attenatedObject.jfkKillerName);\n// error thrown! &#x27;Error: Attempt to access forbidden property&#x27;\n\ndubiousLib(attenatedObject);\n</code></pre>\n<p>On peut imaginer d'autres formes d'atténuation, comme ne donner accès qu'en\nlecture à l'objet alors que l'on garde soi-même un accès en écriture (ce qui est\nimpossible avec <code>Object.freeze</code>).</p>\n<h3>Révocation</h3>\n<p>On peut révoquer l'accès à un objet en implémentant le <em>pattern</em> &quot;caretaker&quot;</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeCaretaker</span>(<span class=\"hljs-params\">t</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">revoke</span>(<span class=\"hljs-params\"></span>)</span> {\n      t = <span class=\"hljs-literal\">undefined</span>;\n    },\n    <span class=\"hljs-attr\">proxy</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(t, {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">target, prop</span>)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(target, prop);\n      },\n      <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">target, prop, value</span>)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(target, prop, value);\n      },\n      <span class=\"hljs-comment\">// flemme d&#x27;écrire et vous faire lire les autres traps,</span>\n      <span class=\"hljs-comment\">// mais faut toutes les faire ;-)</span>\n    }),\n  };\n}\n\n<span class=\"hljs-keyword\">const</span> o = {};\n<span class=\"hljs-keyword\">const</span> { revoke, proxy } = makeCaretaker(o);\n\nproxy.a = <span class=\"hljs-number\">12</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(o.a, proxy.a); <span class=\"hljs-comment\">// 12 12</span>\n\nproxy.b = <span class=\"hljs-number\">37</span>;\n<span class=\"hljs-keyword\">delete</span> proxy.a;\n\nrevoke();\n\nproxy.b; <span class=\"hljs-comment\">// BOOM! TypeError: target is not a non-null object</span>\n</code></pre>\n<h4>...via un meta-proxy</h4>\n<p>La petite astuce rigolote avec les proxy, vu que l'API est dite <em>stratifiée</em>,\nc'est que vu que le handler est un objet, on pourrait en faire un proxy pour\nimplémenter la révocation plus simplement.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeCaretaker</span>(<span class=\"hljs-params\">target</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> metaHandler = {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">handler, trapName</span>)</span> {\n      <span class=\"hljs-keyword\">if</span> (!target) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;Revoked object!&quot;</span>);\n      <span class=\"hljs-comment\">// Le miroir entre les traps et l&#x27;API Reflect vient de là ;-)</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>[trapName];\n    },\n  };\n\n  <span class=\"hljs-keyword\">const</span> handler = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>({}, metaHandler);\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">revoke</span>(<span class=\"hljs-params\"></span>)</span> {\n      target = <span class=\"hljs-literal\">undefined</span>;\n    },\n    <span class=\"hljs-attr\">proxy</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(target, handler),\n  };\n}\n\n<span class=\"hljs-keyword\">const</span> o = {};\n<span class=\"hljs-keyword\">const</span> { revoke, proxy } = makeCaretaker(o);\n\nproxy.a = <span class=\"hljs-number\">12</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(o.a, proxy.a); <span class=\"hljs-comment\">// 12 12</span>\n\nproxy.b = <span class=\"hljs-number\">37</span>;\n<span class=\"hljs-keyword\">delete</span> proxy.a;\n\nrevoke();\n\nproxy.b; <span class=\"hljs-comment\">// BOOM! TypeError: target is not a non-null object</span>\n</code></pre>\n<p>Il fait mal au crâne au début celui-là, mais après relecture, on se sent bien.</p>\n<p>Pour des raisons par très intéressantes, les proxy révocables sont fournis\ndirectement via</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable\">Proxy.revocable</a>,\ndonc, pas besoin de se fatiguer à le coder avec toutes les traps ou avec un meta\nhandler.</p>\n<h2>Conclusion</h2>\n<p>Les proxies sont un outil bas niveau et puissant. Avec de grands pouvoirs\nviennent de grandes responsabilités, alors comprenez bien cet outil avant de\nvouloir l'utiliser partout.</p>\n"}