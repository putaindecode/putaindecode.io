{"slug":"se-lancer-dans-le-tdd","filename":"2017-10-31-se-lancer-dans-le-tdd","title":"Se lancer dans le TDD","date":"Tue, 31 Oct 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-10-31T00:00:00.000Z","title":"Se lancer dans le TDD","author":"Freezystem","oldSlug":"tdd","slug":"se-lancer-dans-le-tdd"},"body":"<h2>Introduction</h2>\n<p>Tout commence en octobre 1999 lorsque\n<a href=\"https://fr.wikipedia.org/wiki/Kent_Beck\">Kent Beck</a> présente une nouvelle\nméthode de programmation agile : l'eXtreme Programmming abrégé <em>XP</em>.<br />\nl'<em>XP</em> définit des pratiques de développement optimisées qui améliorent la production\net la robustesse du code.<br />\nParmi les principes les plus connus de sa méthode on pourra citer\n<strong>l'intégration continue</strong> aussi appelée <em>CI</em> pour <em>Continuous Integration</em> et\n<strong>la programmation en binôme</strong> ou <em>pair programming</em> en anglais.</p>\n<p>L'aspect qui nous intéresse ici est un autre pilier de la méthode qui consiste à\npiloter le développement par les tests alias <em>TDD</em>.</p>\n<p>Le TDD est une pratique controversée car coûteuse à mettre en place. Popularisée\npar les développeurs elle peine à émerger.</p>\n<p>Avec la multiplication des environnements d'execution, la complexité des\napplications web et l'essor des projets Open-source, les développeurs se\nheurtent à des problèmes de compatibilités croisées et d'inconsistances.<br />\nAujourd’hui les standards sont de plus en plus permissifs et favorisent ainsi les\ncomportements à risque. La plupart du temps, les systèmes sont capables de corriger\nvos erreurs, des fois sans même vous en avertir.</p>\n<p>Dans ce contexte :</p>\n<ul>\n<li>Comment écrire un code multi-plateforme fonctionnel ?</li>\n<li>Comment être sûr que les ajouts ne cassent pas le code plus ancien ?</li>\n<li>Comment être sûr que le code se comporte comme voulu ?</li>\n</ul>\n<p>Commencer par vous imposer des pratiques de développement rigoureuses est\nimpératif mais les tests seront un complément indispensable à la qualité de\nvotre code.</p>\n<p>Heureusement, le TDD apporte alors une réponse élégante à l'ensemble de ces\nproblématiques.</p>\n<h2>TDD, vous avez dit TDD ?</h2>\n<p>Le Test Driven Development <em>(Développement Dirigé par les Tests)</em>, est une\ntechnique de développement qui impose l’écriture de tests avant même l’écriture\nde la première ligne de code.</p>\n<p>Dans la théorie, la méthode requiert l’intervention d’au moins deux intervenants\ndifférents, une personne écrit les tests, l’autre le code testé. Cela permet\nd’éviter les problèmes liés à la subjectivité.</p>\n<p>Dans la pratique les choses sont plus compliquées, parfois on développe seul ou\non écrit soi-même les tests qui garantissent l’intégrité d'une nouvelle\nfonctionnalité dans un projet collaboratif.</p>\n<blockquote>\n<p>Quoi qu’il arrive, un test peu efficace vaudra toujours mieux que pas de test\ndu tout. Le but étant de prendre l’habitude d’en écrire et d’être objectif\ndans leur rédaction.</p>\n</blockquote>\n<p>Le TDD tend à se démocratiser et requiert l’effort de chacun pour devenir un\nstandard. Tout développeur soucieux de son environnement et de son héritage doit\nse poser sérieusement la question.<br />\nLes frameworks de tests, les guides et les documentations sur le sujet fleurissent,\nvous pouvez donc vous lancer sans crainte.</p>\n<p>On peut découper le TDD en 5 étapes distinctes :</p>\n<ol>\n<li>Écrire un test,</li>\n<li>Vérifier qu’il échoue,</li>\n<li>Écrire le code <strong>suffisant</strong> pour que le test passe,</li>\n<li>Vérifier que le test passe,</li>\n<li>Optimiser le code et vérifier qu’il n’y ait pas de régression.</li>\n</ol>\n<p>Pour simplifier cette logique on peut regrouper ces cinq étapes en trois grandes\nidées :</p>\n<ul>\n<li><strong>Tester d’abord</strong>, qui correspond aux deux premières étapes.</li>\n<li><strong>Rendre fonctionnel</strong>, qui englobe les points 3 et 4.</li>\n<li><strong>Rendre meilleur</strong>, qui n’est autre que l’étape 5.</li>\n</ul>\n<p>Bill Wake définit ainsi la méthode\n<a href=\"http://xp123.com/articles/3a-arrange-act-assert/\">3A</a>, pour Arrange, Act,\nAssert <em>(Arranger, Agir, Affirmer)</em>.<br />\nIl insiste sur le fait que la méthode ne définit pas un ordre immuable, l’<em>affirmation</em>\npeut ainsi venir avant l’<em>action</em>, etc...</p>\n<ul>\n<li><strong>Arranger</strong> : Phase de préparation de l’environnement de test dans laquelle\non déclare les variables et les fonctions.</li>\n<li><strong>Agir</strong> : Phase qui met à l’épreuve notre environnement en lui faisant subir\ndes mutations.</li>\n<li><strong>Affirmer</strong> : On formule des attentes à propos de l'environnement (variables,\nfonctions, paramètres).</li>\n</ul>\n<h2>TDD : concepts de base</h2>\n<p>Pour la série de tests suivante on utilisera EcmaScript 6 et la méthode\n<a href=\"https://developer.mozilla.org/fr/docs/Web/API/Console/assert\"><code>.assert()</code></a> de\nla console navigateur: Vous pourrez ainsi reproduire ces tests vous-même.</p>\n<p>Objectif : Ecrire une fonction <code>countWords()</code> qui compte les mots d'une phrase.</p>\n<p><strong>ITERATION 1</strong> : écriture et échec du test initial</p>\n<p>On écrit tout d'abord une affirmation de base.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n</code></pre>\n<blockquote>\n<p><code>Uncaught ReferenceError: countWords is not defined</code></p>\n</blockquote>\n<p>Après exécution la console rejette le test. On doit d'abord définir\n<code>countWords()</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\">() =&gt;</span> {};\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n</code></pre>\n<blockquote>\n<p><code>Assertion failed: test 0: le texte ne contient aucun mot</code></p>\n</blockquote>\n<p><code>countWords()</code> est définie et le test échoue mais l'erreur a changé.<br />\nIl faut à présent définir la logique du cœur de notre fonction.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> text || <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n</code></pre>\n<blockquote>\n<p><code>undefined</code></p>\n</blockquote>\n<p>La console ne renvoie rien, le test est donc passé.</p>\n<blockquote>\n<p><code>countWords()</code> étant très simple nous omettrons les phases d'optimisation. On\npeut aussi considérer les itérations suivantes comme des optimisations.</p>\n</blockquote>\n<p><strong>ITERATION 2</strong> : test pour les phrases d'un seul mot</p>\n<p>Très bien. Essayons à présent une phrase d'un seul mot.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> text || <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>) === <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;test 1: le texte contient 1 mot&quot;</span>);\n</code></pre>\n<blockquote>\n<p><code>Assertion failed: test 1: le texte contient 1 mot</code></p>\n</blockquote>\n<p><code>countWords()</code> ne compte pas correctement, ajoutons le code suffisant pour\npasser le test.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> (text ? text.split(<span class=\"hljs-string\">&quot; &quot;</span>).length : <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>) === <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;test 1: le texte contient 1 mot&quot;</span>);\n</code></pre>\n<blockquote>\n<p><code>undefined</code></p>\n</blockquote>\n<p>Le test est passé, ajoutons un autre cas standard.</p>\n<p><strong>ITERATION 3</strong> : test pour les phrases de plusieurs mots</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> (text ? text.split(<span class=\"hljs-string\">&quot; &quot;</span>).length : <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>) === <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;test 1: le texte contient 1 mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot;tdd is so fun&quot;</span>) === <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-string\">&quot;test 2: le texte contient 4 mots&quot;</span>,\n);\n</code></pre>\n<blockquote>\n<p><code>undefined</code></p>\n</blockquote>\n<p>Le nouveau test passe sans modification, on peut continuer.</p>\n<p><strong>ITERATION 4</strong> : test pour les phrases contenant des espaces au début et à la\nfin</p>\n<p>Vérifions à présent la robustesse de la fonction.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> (text ? text.split(<span class=\"hljs-string\">&quot; &quot;</span>).length : <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>) === <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;test 1: le texte contient 1 mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot;tdd is so fun&quot;</span>) === <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-string\">&quot;test 2: le texte contient 4 mots&quot;</span>,\n);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot; so is skateboarding &quot;</span>) === <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-string\">&quot;test 3: le texte contient 3 mots&quot;</span>,\n);\n</code></pre>\n<blockquote>\n<p><code>Assertion failed: test 3: le texte contient 3 mots</code></p>\n</blockquote>\n<p>Aïe… notre fonction n'est pas assez solide. Corrigeons-la pour capter ce nouveau\ncas en supprimant les espaces inutiles avant et après le texte.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> (text ? text.trim().split(<span class=\"hljs-string\">&quot; &quot;</span>).length : <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>) === <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;test 1: le texte contient 1 mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot;tdd is so fun&quot;</span>) === <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-string\">&quot;test 2: le texte contient 4 mots&quot;</span>,\n);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot; so is skateboarding &quot;</span>) === <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-string\">&quot;test 3: le texte contient 3 mots&quot;</span>,\n);\n</code></pre>\n<blockquote>\n<p><code>undefined</code></p>\n</blockquote>\n<p>Parfait, La fonction est améliorée ! Ajoutons quand même un dernier test pour\nêtre sur.</p>\n<p><strong>ITERATION 5</strong> : test pour les phrases contenant un nombre inégal d'espaces\nentre les mots</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> (text ? text.trim().split(<span class=\"hljs-string\">&quot; &quot;</span>).length : <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>) === <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;test 1: le texte contient 1 mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot;tdd is so fun&quot;</span>) === <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-string\">&quot;test 2: le texte contient 4 mots&quot;</span>,\n);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot; so is skateboarding &quot;</span>) === <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-string\">&quot;test 3: le texte contient 3 mots&quot;</span>,\n);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">`  I&#x27;m 28, I love $#@! and    multi-spaces  `</span>) === <span class=\"hljs-number\">7</span>,\n  <span class=\"hljs-string\">&quot;test 4: le texte contient 7 mots&quot;</span>,\n);\n</code></pre>\n<blockquote>\n<p><code>Assertion failed: test 4: le texte contient 7 mots</code></p>\n</blockquote>\n<p>Et mince… Encore un cas particulier, modifions l'algorithme en conséquence. On\ndoit ici retirer les espaces inutiles entre les mots.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span>\n  text\n    ? text\n        .trim()\n        .replace(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">&quot; &quot;</span>)\n        .split(<span class=\"hljs-string\">&quot; &quot;</span>).length\n    : <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;test 0: le texte ne contient aucun mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>) === <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;test 1: le texte contient 1 mot&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot;tdd is so fun&quot;</span>) === <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-string\">&quot;test 2: le texte contient 4 mots&quot;</span>,\n);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">&quot; so is skateboarding &quot;</span>) === <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-string\">&quot;test 3: le texte contient 3 mots&quot;</span>,\n);\n<span class=\"hljs-built_in\">console</span>.assert(\n  countWords(<span class=\"hljs-string\">`  I&#x27;m 28, I love $#@! and    multi-spaces  `</span>) === <span class=\"hljs-number\">7</span>,\n  <span class=\"hljs-string\">&quot;test 4: le texte contient 7 mots&quot;</span>,\n);\n</code></pre>\n<blockquote>\n<p><code>undefined</code></p>\n</blockquote>\n<p>Le test final est passé sans que les précédents n'échouent.</p>\n<p>On notera que l'écriture de tests est un processus itératif.<br />\nLa phase d'optimisation implique l'écriture d'un nouveau test qui échoue et relance\ndonc une nouvelle itération.</p>\n<p>Evidemment <code>countWords()</code> est très largement sous-optimisée et ne couvre pas\ntous les cas spéciaux. On aurait pu ajouter une vérification sur le paramètre\n<code>text</code> et compter avec une expression régulière comme ceci :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span>\n  <span class=\"hljs-keyword\">typeof</span> text === <span class=\"hljs-string\">&quot;string&quot;</span> &amp;&amp; text.trim()\n    ? text.match(<span class=\"hljs-regexp\">/\\S+\\s{0,1}/g</span>).length\n    : <span class=\"hljs-number\">0</span>;\n</code></pre>\n<p>L'idée ici est que coder est un processus incrémental et que chaque nouveau\ncycle doit être initié par un besoin spécifique défini par un test dédié.</p>\n<p>L'écriture des tests est simple : on décompose notre script en une suite\nd'affirmations correspondant chacune à une fonctionnalité précise de notre\nalgorithme.</p>\n<p>Grâce à ce processus on évite :</p>\n<ul>\n<li><strong>les régressions</strong>: la suite valide de tests est la garantie que le code\nreste fonctionnel malgré les évolutions de l'algorithme.</li>\n<li><strong>le code mort</strong>: chaque morceau de code écrit est testé et a son utilité.</li>\n<li><strong>le code non documenté</strong>: chaque comportement est décrit de manière\nfonctionnelle.</li>\n</ul>\n<h2>BDD : Des tests pour tous</h2>\n<p>Une variante plus agnostique de la logique du développeur existe et permet à des\nintervenants externes de faire partie intégrante du processus créatif.</p>\n<p>le BDD, Behaviour Driven Development (Développement Dirigé par le Comportement),\npermet de définir de manière compréhensible pour tous les intervenants les\nspécifications d’une fonctionnalité. Cela permet aussi aux développeurs de\ncomprendre le comportement général sans évoquer les détails techniques. La\ndiscussion est donc facilitée entre les différents acteurs.</p>\n<p>Pour illustrer cette variante adaptons l'exemple précédent :</p>\n<blockquote>\n<p>Note : Pour exécuter ce type de code vous aurez besoin d'un <em>test-runner</em>\ncomme <a href=\"https://facebook.github.io/jest/\">Jest</a>, <a href=\"https://mochajs.org\">Mocha</a>\nou <a href=\"https://karma-runner.github.io\">Karma</a>.</p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> countWords = <span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span>\n  text\n    ? text\n        .trim()\n        .replace(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">&quot; &quot;</span>)\n        .split(<span class=\"hljs-string\">&quot; &quot;</span>).length\n    : <span class=\"hljs-number\">0</span>;\n\ndescribe(<span class=\"hljs-string\">&quot;countWords()&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  it(<span class=\"hljs-string\">&quot;doit traiter un texte vide&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    expect(countWords(<span class=\"hljs-string\">&quot;&quot;</span>)).toBe(<span class=\"hljs-number\">0</span>);\n  });\n\n  it(<span class=\"hljs-string\">&quot;doit traiter un texte d&#x27;un seul mot&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    expect(countWords(<span class=\"hljs-string\">&quot;nope&quot;</span>)).toBe(<span class=\"hljs-number\">1</span>);\n  });\n\n  it(<span class=\"hljs-string\">&quot;doit traiter un texte de n mots&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    expect(countWords(<span class=\"hljs-string\">&quot;tdd is so fun&quot;</span>)).toBe(<span class=\"hljs-number\">4</span>);\n  });\n\n  it(<span class=\"hljs-string\">&quot;doit traiter un texte avec des espaces aux extrémités&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    expect(countWords(<span class=\"hljs-string\">&quot; so is skateboarding &quot;</span>)).toBe(<span class=\"hljs-number\">3</span>);\n  });\n\n  it(<span class=\"hljs-string\">&quot;doit traiter un texte avec des espaces inégaux entre les mots&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    expect(countWords(<span class=\"hljs-string\">`  I&#x27;m 28, I love $#@! and    multi-spaces  `</span>)).toBe(<span class=\"hljs-number\">7</span>);\n  });\n});\n</code></pre>\n<p>Voici le résultat du run :</p>\n<p><img src=\"/public/images/articles/2017-10-31-se-lancer-dans-le-tdd/testrunner.png\" alt=\"résultat du run de tests\" /></p>\n<p>La relecture est simplifiée pour tous les participants non techniques.</p>\n<h2>Conclusion</h2>\n<p>Le TDD est destiné à être incorporé à un processus\nd'<a href=\"http://putaindecode.io/fr/articles/ci/\">Intégration Continue</a> pour s'assurer\ndu bon fonctionnement de l'application sur tous les environnements de production\naprès chaque nouveau <code>commit</code>.</p>\n<p>J'espère vous avez apprécié la démo et que ça vous a donné envie de tester le\nTDD pour apporter équilibre et harmonie à votre code.</p>\n<p>Dans tous les cas, je peux vous certifier que les autres codeurs vous en seront\nreconnaissants, croyez-moi.</p>\n"}