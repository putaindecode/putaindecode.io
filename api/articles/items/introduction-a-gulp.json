{"slug":"introduction-a-gulp","filename":"2014-04-29-introduction-a-gulp","title":"Introduction à Gulp","date":"Tue, 29 Apr 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-04-29T00:00:00.000Z","title":"Introduction à Gulp","author":"MoOx","oldSlug":"js/gulp","slug":"introduction-a-gulp"},"body":"<p>Vous commencez tous à connaitre les <em>tasks runners</em>, ces outils qui permettent\nd'automatiser les tâches de développement récurrentes. Personnellement\n<a href=\"http://moox.io/slides/2013/grunt-before-after/\">je n'ai</a>\n<a href=\"http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/\">pas arrêté</a>\n<a href=\"http://moox.io/slides/2014/introduction-gulp/\">d'en parler</a> depuis que\n<a href=\"/fr/articles/js/grunt/\">Grunt</a> à déterré cette vielle problématique, assez\nrécente pour le développement Web côté front end.</p>\n<p>Il faut avouer que de par l'évolution du développement Web, côté front end, on\nvoit beaucoup de personnes qui n'ont pas de vraies bases de développeur. Je veux\ndire par là non pas que ces personnes sont incompétentes, mais plutôt qu'il\nmanque parfois la bonne flemme du développeur, celle qui le pousse à\n<strong>développer</strong> des solutions techniques pour mieux développer des produits. Il\nmanque un peu <a href=\"http://fr.wiktionary.org/wiki/algorithmie\">d'algorithmie</a> dans\nles veines, de curiosité et d'amour du risque. Ce n'est pas en restant dans sa\nzone de confort qu'on va de l'avant. Enfin si vous avez des exemples contraires,\nje suis preneur. Mais tout cela doit provenir du fait que pas mal de métiers\ndans le web sont nouveaux, dont celui de « développeur Web front end » et que du\ncoup, peu de personnes ont initialement suivi des formations appropriés (pour ma\npart je proviens d'une formation <em>d'analyste-programmeur</em>, conception et\ndéveloppement software quoi). Je remarque que niveau back end il y a beaucoup\nmoins de lacunes, du fait que les problématiques gérées de ce côté sont (il me\nsemble) moins nouvelles.</p>\n<p>Bref. Je ne vais pas m'éterniser sur une intro du pourquoi on met en place un\ntask runner, ni faire une comparaison entre Make, Rake, Cake, Jake, Grunt,\nBrunch et Broccoli. Rentrons dans le vif. Parlons Gulp.</p>\n<h1>Pourquoi Gulp</h1>\n<p>Je vais faire court. Pour faire simple, son point fort réside dans le fait qu'il\nutilise des <a href=\"http://dailyjs.com/2012/09/10/streams/\">streams</a> (tl;dr: un flux de\ndonnées - en mémoire) et qu'il limite au maximum l'utilisation de fichiers. Au\npoint qu'il existe une\n<a href=\"https://github.com/godaddy/gulp-header/issues/4#issuecomment-32111457\">police Gulp</a>\npour vous dire. Si vous voulez en savoir plus sur les streams, n'hésitez pas à\nlire l'article de Nicolas Froidure\n<a href=\"http://insertafter.com/fr/blog/gulp_vs_grunt.html\">Gulp remplacera-t-il Grunt ?</a>\nqui contient une partie explicative sur les streams.</p>\n<p>Dans la pratique cela évite d'avoir un gruntfile qui, si on imagine une task\nsass -&gt; autoprefixer -&gt; csso, passe\n<a href=\"/fr/articles/css/autoprefixer/mise-en-place/#autoprefixer-avec-grunt\">3 fois par des lectures/écritures sur le système de fichiers</a>.</p>\n<figure>\n  <img src=\"https://jaysoo.ca/images/grunt-flow-2.png\" alt=\"\" />\n  <figcaption>Sans stream</figcaption>\n</figure>\n<p>Et du coup au lieu d'avoir un fichier de conf d'une soixantaine de lignes, on\narrive à avoir\n<a href=\"/fr/articles/css/autoprefixer/mise-en-place/#autoprefixer-avec-gulp\">quelque chose de concis</a>\n(une vingtaine de ligne seulement).</p>\n<figure>\n  <img src=\"https://jaysoo.ca/images/gulp-flow.png\" alt=\"\" />\n  <figcaption>Avec stream</figcaption>\n</figure>\n<h2>Installation</h2>\n<p>Pour avoir la commande globale sur le système (comme grunt-cli) :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm i -g gulp</span>\n</code></pre>\n<p>Ensuite dans votre projet :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm i -D gulp gulp-util gulp-plumber gulp-WHATEVER</span>\n</code></pre>\n<p><em>Note : <code>npm i -D</code> == <code>npm install --save-dev</code>, c'est cadeau.</em></p>\n<p>Bon dans mon exemple j'ai mis un peu n'importe quoi, donc on va faire un mini\nworkflow de hipster hacker.</p>\n<h2>Utilisation</h2>\n<p>On part avec une tâche très simple : transpiler <a href=\"http://cssnext.io\">cssnext</a>.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir putaindegulp &amp;&amp; <span class=\"hljs-built_in\">cd</span> putaindegulp</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm init</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm i -D gulp gulp-util gulp-plumber gulp-cssnext gulp-csso minimist</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp&quot;</span>);\n<span class=\"hljs-keyword\">var</span> gutil = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-util&quot;</span>);\n<span class=\"hljs-keyword\">var</span> plumber = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-plumber&quot;</span>);\n<span class=\"hljs-keyword\">var</span> cssnext = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-cssnext&quot;</span>);\n<span class=\"hljs-keyword\">var</span> csso = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-csso&quot;</span>);\n<span class=\"hljs-keyword\">var</span> options = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;minimist&quot;</span>)(process.argv.slice(<span class=\"hljs-number\">2</span>));\n\ngulp.task(<span class=\"hljs-string\">&quot;styles&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp\n    .src(<span class=\"hljs-string\">&quot;./src/css/*.css&quot;</span>)\n    .pipe(!options.production ? plumber() : gutil.noop())\n    .pipe(cssnext({ <span class=\"hljs-attr\">sourcemap</span>: !options.production }))\n    .pipe(options.production ? csso() : gutil.noop())\n    .pipe(gulp.dest(<span class=\"hljs-string\">&quot;./dist/css/&quot;</span>));\n});\n\ngulp.task(<span class=\"hljs-string\">&quot;default&quot;</span>, [<span class=\"hljs-string\">&quot;styles&quot;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.watch(<span class=\"hljs-string\">&quot;./src/css/**/*&quot;</span>, [<span class=\"hljs-string\">&quot;styles&quot;</span>]);\n});\n</code></pre>\n<p>Voilà c'est tout. Et heureusement.</p>\n<p>Bon, on se refait l'exemple commenté :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// bah là ok, on est obligé d&#x27;y passer pour avoir l&#x27;API Gulp</span>\n<span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp&quot;</span>);\n\n<span class=\"hljs-comment\">// Ça c&#x27;est optionnel, c&#x27;est pour avoir (entre autres la méthode noop())</span>\n<span class=\"hljs-comment\">// je reviens dessus après</span>\n<span class=\"hljs-comment\">// https://github.com/gulpjs/gulp-util</span>\n<span class=\"hljs-keyword\">var</span> gutil = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-util&quot;</span>);\n\n<span class=\"hljs-comment\">// Là on a Mario le plombier qui fixe la tuyauterie foireuse.</span>\n<span class=\"hljs-comment\">// Ce plugin patch le problème de stream avec node.js qui fait que tout le process</span>\n<span class=\"hljs-comment\">// explose à la moindre erreur (pas pratique en cas de watch par exemple)</span>\n<span class=\"hljs-comment\">// en gros, il remplace la méthode pipe et attrape les erreurs pour les ressortir gentiment</span>\n<span class=\"hljs-comment\">// https://gist.github.com/floatdrop/8269868</span>\n<span class=\"hljs-keyword\">var</span> plumber = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-plumber&quot;</span>);\n\n<span class=\"hljs-comment\">// Ici, rien de magique, du plugin en veux-tu en voilà</span>\n<span class=\"hljs-keyword\">var</span> cssnext = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-cssnext&quot;</span>);\n<span class=\"hljs-keyword\">var</span> csso = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-csso&quot;</span>);\n\n<span class=\"hljs-comment\">// ici on chope les options de la ligne de commande</span>\n<span class=\"hljs-comment\">// exemple: pour avoir options.production à true,</span>\n<span class=\"hljs-comment\">// il suffit de faire `gulp --production`</span>\n<span class=\"hljs-keyword\">var</span> options = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;minimist&quot;</span>)(process.argv.slice(<span class=\"hljs-number\">2</span>));\n\n<span class=\"hljs-comment\">// Définition d&#x27;une tâche, un nom et une fonction.</span>\n<span class=\"hljs-comment\">// Ce qui est pratique c&#x27;est le fait de pouvoir mettre ce qu&#x27;on veut</span>\n<span class=\"hljs-comment\">// y compris un console.log() ^^</span>\n<span class=\"hljs-comment\">// un autre paramètre peut être ajouté avant la fonction, qui permet de préciser</span>\n<span class=\"hljs-comment\">// les dépendances (cf task dev plus bas par exemple)</span>\ngulp.task(<span class=\"hljs-string\">&quot;styles&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Ici on attrape les fichiers (glob classique)</span>\n  <span class=\"hljs-comment\">// à la racine (on va considérer que nos fichiers finaux ne seront pas dans</span>\n  <span class=\"hljs-comment\">// des sous dossiers, réservés aux partials &amp; co)</span>\n  gulp\n    .src(<span class=\"hljs-string\">&quot;./src/css/*.css&quot;</span>)\n\n    <span class=\"hljs-comment\">// On utilise plumber que si on build en dev, sinon faut que ça pête, qu&#x27;on</span>\n    <span class=\"hljs-comment\">// soit prévenu lors d&#x27;un build pour la prod</span>\n    .pipe(!options.production ? plumber() : gutil.noop())\n\n    <span class=\"hljs-comment\">// Et là on pipe nos plugins</span>\n    <span class=\"hljs-comment\">// toujours en jouant avec les options si besoin</span>\n    .pipe(\n      cssnext({\n        <span class=\"hljs-attr\">compress</span>: options.production,\n        <span class=\"hljs-attr\">sourcemap</span>: !options.production,\n      }),\n    )\n\n    <span class=\"hljs-comment\">// Super important, on convertit nos streams en fichiers</span>\n    .pipe(gulp.dest(<span class=\"hljs-string\">&quot;./dist/css/&quot;</span>));\n});\n\n<span class=\"hljs-comment\">// Ici on a une tâche de dev qui lance un watch APRES avoir exécuté `styles` une fois</span>\ngulp.task(<span class=\"hljs-string\">&quot;default&quot;</span>, [<span class=\"hljs-string\">&quot;styles&quot;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// gulp.watch est natif (pas comme avec grunt)</span>\n  <span class=\"hljs-comment\">// vous noterez qu&#x27;ici par exemple on va surveiller tous les fichiers</span>\n  <span class=\"hljs-comment\">// et non pas ceux juste à la racine par exemple</span>\n  gulp.watch(<span class=\"hljs-string\">&quot;./src/css/**/*&quot;</span>, [<span class=\"hljs-string\">&quot;styles&quot;</span>]);\n});\n\n<span class=\"hljs-comment\">// Comme grunt, `gulp` sans argument lancera la tâche `default`.</span>\n</code></pre>\n<p>Bien entendu, vous avez déjà compris que si vous voulez remplacer cssnext par\nSass, c'est l'histoire de 4 secondes.</p>\n<p>Chez <em>Putain de code !</em> on a aimé Gulp. Il faut bien avouer que\n<a href=\"https://twitter.com/putaindecode/status/460868992396460032\">ça va vite</a> (encore\nplus appréciable lorsque l'on n'a pas de SSD) et que c'est plaisant à écrire\ncomparé à Grunt. Pas de configurations pas spécialement verbeuse et trop\nespacée. Avec Gulp on se sent plus libre, moins contraint. Du coup, on avait\ncarrément refait notre site avec Gulp (puis au passage un petit refresh\ngraphique tant qu'à faire).</p>\n<p><strong>Mise à jour: depuis nous avons encore simplifié notre process et nous nous\nsommes passé de Gulp.</strong></p>\n<p>Pour aller plus loin, vous n'avez qu'à ouvrir notre ancien\n<a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/gulpfile.js\">Gulpfile</a>\net regarder nos\n<a href=\"https://github.com/putaindecode/putaindecode.io/tree/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks\">tasks</a>\nde l'époque qui vont de\n<a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/clean.js\">la plus simple</a>\nà\n<a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/contributors.js\">la plus compliqué</a>.</p>\n<p>Pour voir des tâches plus « real world example » je vous invite à regarder les\ntasks suivantes :</p>\n<ul>\n<li><a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/server.js\">server</a>,\nle server de dev local avec livereload dedans ;</li>\n<li><a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/watch.js\">watch</a>,\nle classique et si simple watcher ;</li>\n<li><a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/deploy.js\">deploy</a>,\nla tâche pour publier le dossier <code>dist/</code> sur les\n<a href=\"https://pages.github.com/\">gh-pages</a> ;</li>\n<li><a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/icons.js\">icons</a>,\nqui transforme des SVG en fontes d'icones avec le bout de CSS qui va bien ;</li>\n<li><a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/scripts-linting.js\">scripts-linting</a>,\nqui vérifie la qualité du code ;</li>\n<li><a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/scripts.js\">scripts</a>,\ndu <a href=\"/fr/articles/js/browserify/\">browserify</a> pour nos JS côté client ;</li>\n<li><a href=\"https://github.com/putaindecode/putaindecode.io/blob/6702dffed608cf6d03141f1dcdbb096a66ff7d8f/tasks/stylesheets.js\">stylesheets</a>,\nnotre tâche pour coder des css du futur ;</li>\n</ul>\n<h2>Vous reprendrez bien un peu de… Gulp* ! Pardon.</h2>\n<p>Si vous avez encore envie de détails je vous renvoie sur l'article anglais\n<a href=\"http://markgoodyear.com/2014/01/getting-started-with-gulp/\">Getting started with gulp</a>\nqui détaille tellement bien chaque point que même un anglophobe comprendrait.</p>\n<p>Vous avez aussi\n<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/README.md\">une documentation</a>\ntrès bien faite, qui comporte carrément\n<a href=\"https://github.com/gulpjs/gulp/tree/master/docs/recipes\">des exemples <em>officiels</em> tout prêts</a>.</p>\n<p>Comme je vous disais plus tôt, les auteurs de Gulp sont assez carrés et valident\n(ou plutôt <em>invalident</em>)\n<a href=\"https://www.npmjs.org/search?q=gulpplugin\">les plugins</a> qui ne respectent pas\nles\n<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md\">règles</a>.\nJe trouve que c'est gage de qualité.</p>\n<p>Pour finir quelques liens pour ceux qui en veulent toujours plus :</p>\n<ul>\n<li><a href=\"http://insertafter.com/fr/blog/retour_experience_gulp.html\">Gulp : Retour d'expérience</a></li>\n<li><a href=\"https://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/\">Grunt vs. Gulp, au-delà des chiffres</a>\n(anglais)</li>\n</ul>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> gulp bisous</span>\n❯ ♡ 😘\n</code></pre>\n"}