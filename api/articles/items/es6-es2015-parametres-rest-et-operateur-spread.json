{"slug":"es6-es2015-parametres-rest-et-operateur-spread","filename":"2015-12-12-es6-es2015-parametres-rest-et-operateur-spread","title":"ES6, ES2015 : paramètres rest et opérateur spread","date":"Sat, 12 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-12T00:00:00.000Z","title":"ES6, ES2015 : paramètres rest et opérateur spread","author":"zoontek","oldSlug":"js/es2015/rest-spread","slug":"es6-es2015-parametres-rest-et-operateur-spread"},"body":"<p>Identiques en apparence et en syntaxe, ils permettent d'effectuer plus\nsimplement des opérations complexes sur les tableaux, ou tout autre objet\nitérable.</p>\n<h2>Les paramètres rest</h2>\n<p>Avez-vous déjà eu l'occasion d'utiliser l'horrible variable magique <code>arguments</code>\n? Disponible au sein de chaque fonction, elle permet d'en récupérer, comme son\nnom l'indique, les arguments. Si l'objet récupéré est similaire à un <code>Array</code>, il\nne dispose d'aucune des propriétés ou des méthodes de celui-ci, à l'exception de\n<code>length</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunction</span>(<span class=\"hljs-params\">separator</span>) </span>{\n  <span class=\"hljs-comment\">// conversion nécessaire en objet de type Array</span>\n  <span class=\"hljs-keyword\">var</span> words = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>, <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> words.join(separator);\n}\n\nmyFunction(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>); <span class=\"hljs-comment\">// &quot;foo-bar&quot;</span>\n</code></pre>\n<p>Les paramètres rest vous permettent de récupérer un véritable <code>Array</code> à l'aide\ndu simple préfixe <code>...</code> appliqué sur le <strong>dernier</strong> argument de votre fonction.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunction</span>(<span class=\"hljs-params\">separator, ...words</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> words.join(separator);\n}\n\nmyFunction(<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>); <span class=\"hljs-comment\">// &quot;foo-bar&quot;</span>\n</code></pre>\n<p>Il vous sera en revanche impossible de lui attribuer une\n<a href=\"/fr/articles/js/es2015/defaults/\">valeur par défaut</a>.</p>\n<h2>L'opérateur spread</h2>\n<p>Aussi appelé opérateur de décomposition, il permet de développer un objet\nitérable (comme un <code>Array</code>) lorsqu'on a besoin de plusieurs arguments.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> myArray = [<span class=\"hljs-number\">1991</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>]\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(...myArray) <span class=\"hljs-comment\">// object Date - équivaut à: new Date(1991, 8, 1)</span>\n\n<span class=\"hljs-keyword\">const</span> myString = <span class=\"hljs-string\">&quot;foo bar&quot;</span>\n<span class=\"hljs-comment\">// les objets String étant itérables</span>\n[...myString] <span class=\"hljs-comment\">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;, &quot; &quot;, &quot;b&quot;, &quot;a&quot;, &quot;r&quot;]</span>\n</code></pre>\n<p>À noter que contrairement aux paramètres rest, l'opérateur spread peut être\nmélangé aux autres arguments d'une fonction.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> myArray = [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">1991</span>, ...myArray, <span class=\"hljs-number\">12</span>); <span class=\"hljs-comment\">// object Date - équivaut à: new Date(1991, 8, 1, 12)</span>\n</code></pre>\n<p>Les possibilités offertes par cette nouveauté sont très nombreuses. Voici\nquelques usages un peu plus avancés pour stimuler votre inspiration :</p>\n<h4>Éviter l'utilisation de .apply()</h4>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-built_in\">console</span>.log.apply(<span class=\"hljs-built_in\">console</span>, [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>]);\n\n<span class=\"hljs-comment\">// ES6 / ES2015</span>\n<span class=\"hljs-built_in\">console</span>.log(...[<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>]); <span class=\"hljs-comment\">// même résultat</span>\n</code></pre>\n<h4>Concaténer plusieurs itérables</h4>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> stronglyTyped = [<span class=\"hljs-string\">&quot;scala&quot;</span>, <span class=\"hljs-string\">&quot;haskell&quot;</span>]\n\n<span class=\"hljs-comment\">// ES5</span>\n[<span class=\"hljs-string\">&quot;go&quot;</span>, <span class=\"hljs-string\">&quot;rust&quot;</span>].concat(stronglyTyped) <span class=\"hljs-comment\">// [&quot;go&quot;, &quot;rust&quot;, &quot;scala&quot;, &quot;haskell&quot;]</span>\n\n<span class=\"hljs-comment\">// ES6 / ES2015</span>\n[<span class=\"hljs-string\">&quot;go&quot;</span>, <span class=\"hljs-string\">&quot;rust&quot;</span>, ...stronglyTyped] <span class=\"hljs-comment\">// [&quot;go&quot;, &quot;rust&quot;, &quot;scala&quot;, &quot;haskell&quot;]</span>\n</code></pre>\n<h4>Déstructurer dans un tableau</h4>\n<p>Si vous n'avez pas encore connaissance des possibilités offertes par le\ndestructuring, je vous invite à lire ce\n<a href=\"/fr/articles/js/es2015/destructuring/\">précédent article</a>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> words = [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>, <span class=\"hljs-string\">&quot;baz&quot;</span>];\n\n<span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">const</span> first = words[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// &quot;foo&quot;</span>\n<span class=\"hljs-keyword\">const</span> rest = words.slice(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// [&quot;bar&quot;, &quot;baz&quot;]</span>\n\n<span class=\"hljs-comment\">// ES6 / ES2015</span>\n<span class=\"hljs-keyword\">const</span> [first, ...rest] = words; <span class=\"hljs-comment\">// même résulat</span>\n</code></pre>\n<h4>Itérer sur le résultat d'un .querySelectorAll()</h4>\n<pre><code class=\"hljs language-js\">[...document.querySelectorAll(<span class=\"hljs-string\">&quot;div&quot;</span>)]; <span class=\"hljs-comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span>\n</code></pre>\n<h2>En résumé</h2>\n<p>Comme vous avez pu le constater par vous-même, les cas d'utilisation des\nparamètres rest et de l'opérateur spread sont légion.</p>\n<p><a href=\"http://kangax.github.io/compat-table/es6/#spread_(...)_operator\">Gérés</a>\ncorrectement par Babel et Traceur, ils vous permettront de rendre votre code\nplus concis en évitant bien souvent l'écriture de boucles inutiles.</p>\n"}