{"slug":"comment-en-finir-avec-prefixes-css","filename":"2014-02-25-comment-en-finir-avec-les-prefixes-css","title":"Comment en finir avec les préfixes CSS","date":"Tue, 25 Feb 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-02-25T00:00:00.000Z","title":"Comment en finir avec les préfixes CSS","author":"MoOx","oldSlug":"css/autoprefixer","slug":"comment-en-finir-avec-prefixes-css"},"body":"<p>En mettant de côté le débat trollesque <em>faut-il ou pas des préfixes CSS ?</em> (car\navouons-le, ils sont là, il faut faire avec), on ne va pas se le cacher, les\npréfixes CSS ça nous brise tous les... touches du clavier. Eh bien oui, sans\nautomatisation on est obligé de se taper des caractères en plus. Même avec un\nIDE correct, on peut faire ça rapidement, mais ça nécessite presque à chaque\nfois une action de notre part.</p>\n<h2>Préfixer via des outils en ligne</h2>\n<p>Les élèves au fond de la classe me montreront de suite des solutions comme\n<a href=\"http://prefixmycss.com/\">prefixmycss.com</a> ou l'ancien prefixr. Inopinément, un\nmoche &quot;Mourrez moi sile vou pler&quot; sort de mon corps. Non, sérieusement, ce n’est\npas une façon de faire ça. Aller sur une web app à chaque fois que je veux\npréfixer mes CSS ? Sérieusement ? Vous avez qu’à aussi faire un service postal\noù j’envoie mes fichiers CSS dans une clé USB et qu’on me renvoie sous 48h avec\nles préfixes ajoutés. Super pratique.</p>\n<h2>Préfixer via JavaScript</h2>\n<p>Une autre solution serait <a href=\"http://leaverou.github.io/prefixfree/\">prefix-free</a>,\nmais je ne vais même pas en parler tellement l’idée de dépendre de JavaScript\npour avoir un <code>border-radius</code> ou une <code>transition</code> CSS me donne une migraine. Je\nvous passe les détails niveau performance. Selon les cas, on pourrait même avoir\nun petit flash visuel sans les propriétés préfixées. Non mais flûte. On ne fait\npas ça. On n’alourdit pas une page web avec du JavaScript pour parser la feuille\nde style et réintégrer des préfixes quoi. Au secours.</p>\n<h2>Préfixer via les pré-processeurs CSS</h2>\n<p>Alors là, j’en entends déjà qui parle à voix haute au milieu de la classe :</p>\n<blockquote>\n<p>Bah lui c’est clair il’connait pas les pré-processeurs CSS le noube</p>\n</blockquote>\n<p>Sans rentrer dans un débat trollesque (encore un), à part peut-être avec\n<em>Stylus</em> et ces mixins transparent (coucou\n<em><a href=\"http://visionmedia.github.io/nib/\">Nib</a></em>), on est obligé de rajouter du code.\nAvec <em>Sass</em> il faudra (en scss) rajouter <code>@include</code> et un couple de parenthèse\n(et au passage avoir <em>Compass</em> si on ne veut pas coder les mixins à la main).\nAvec <em>Less</em> il faudra aussi une librairie <em>Less Hat</em> si on n’a pas envie de se\ntaper du mixin qui donne de la nausée comme on peut voir sur la\n<a href=\"http://lesscss.org/\">page d’accueil</a>.</p>\n<h2>Les préfixes, c’est comme le lait, ça tourne</h2>\n<p>D’ailleurs, parlons en vite fait de cette page d’accueil qui au jour où j’écris\nce post, comporte <b>en premier exemple</b> un mixin pour <code>box-shadow</code> (hashtag\nohlol).</p>\n<p>Certaines propriétés comme <code>box-shadow</code>, ou encore <code>border-radius</code>, sont\naujourd’hui préfixées à tort, car comme on peut le voir sur le site de\n<a href=\"http://caniuse.com/\">CanIUse.com</a>, elles n’ont plus vraiment besoin d’être\npréfixées, à moins que vous supportiez encore Firefox 3.6, Safari iOS 3 ou\nAndroid 2... Je vous renvoie rapidement sur ce (vieil) article de Chris Coyier\n<a href=\"http://css-tricks.com/do-we-need-box-shadow-prefixes/\">Do we need box-shadow or border-radius prefixes anymore?</a>\nen guise de mémo :)</p>\n<p>Sans être de mauvaise foi, on va vite avouer qu’on ne peut pas forcément tout\nsavoir. Donc on ne peut pas être au top pour connaître quand il faut ou quand il\nn’y a plus besoin de préfixer x ou y (oui bon x et y ne sont pas des propriétés\nCSS, c’est pour l’exemple). Qui sait qu’on peut enfin arrêter de préfixer\nbox-sizing dans Firefox depuis la 29 ? Ou la 30 je ne sais plus...</p>\n<p>Bon mais alors comment faire ? J’entends les fayots du premier rang parler\nd’auto... auto... AUTOPREFIXER ?!</p>\n<p>MAIS C’EST POSSIBLE ÇA ?</p>\n<p>Bon allons à l’essentiel, assez trollé.</p>\n<h1>Autoprefixer</h1>\n<p>Ce magnifique outil, basé sur une solide base de données (au hasard,\nCanIUse.com), permet de préfixer automatiquement vos CSS, et ce, de manière\nintelligente. Vous pouvez en effet configurer autoprefixer, afin de lui préciser\nquel navigateur vous voulez utiliser. Vous pouvez au choix lui demander de\nsupporter X versions en arrière, les versions qui ont un usage global &gt; à Y% de\ntrafic, ou encore une version minimale donnée.</p>\n<p>Voici quelques exemples de configuration.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Je supporte une version en arrière et les navigateurs qui ont plus de 1% de trafic ainsi qu&#x27;Internet Explorer 7</span>\nautoprefixer(<span class=\"hljs-string\">&quot;last 1 version&quot;</span>, <span class=\"hljs-string\">&quot;&gt; 1%&quot;</span>, <span class=\"hljs-string\">&quot;Explorer 7&quot;</span>).process(css).css;\n\n<span class=\"hljs-comment\">// Je supporte 2 versions en arrière, et minimum BlackBerry 10 et Android 4</span>\nautoprefixer(<span class=\"hljs-string\">&quot;last 2 version&quot;</span>, <span class=\"hljs-string\">&quot;BlackBerry 10&quot;</span>, <span class=\"hljs-string\">&quot;Android 4&quot;</span>).process(css).css;\n</code></pre>\n<p>Dans ces lignes de code JavaScript... Quoi attendez c’est en JavaScript ? Oh le\nfourbe, il nous recale sa techno de front-end de mes deux. Bon faites pas les\nrelous, que vous soyez front-end ou back-end, vous avez Node.js hein ?</p>\n<p>Donc aucune inquiétude, il existe une commande pour que vous puissiez faire ça\nrapidement :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> on install autoprefixer via npm en global</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install --global autoprefixer</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ou pour les fainéants</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> npm i -g autoprefixer</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> on prefixe !</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> autoprefixer *.css</span>\n</code></pre>\n<p>Là bon de suite, réflexe, vous me sautez dessus à la gorge en me criant:</p>\n<blockquote>\n<p>NON MAIS T’AS CRU QUE J’ALLAIS TAPER LA COMMANDE À CHAQUE FOIS TOCARD ?</p>\n</blockquote>\n<p>No problem, comme tout outil bien foutu, il y’a une multitudes de façon de\nl’utiliser :</p>\n<ul>\n<li>via <a href=\"https://github.com/ai/autoprefixer#nodejs\">Node.js</a> directement,</li>\n<li>en plugin <a href=\"https://www.npmjs.org/package/gulp-autoprefixer\">Gulp</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#grunt\">Grunt</a>,</li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#compass\">Compass</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#stylus\">Stylus</a>,</li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#ruby-on-rails\">RoR</a> ou\n<a href=\"https://github.com/ai/autoprefixer#ruby\">Ruby</a>,</li>\n<li>avec l’application <a href=\"https://github.com/ai/autoprefixer#prepros\">Prepros</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#mincer\">Mincer</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#middleman\">Middleman</a></li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#php\">PHP</a> (vous avez bien lu),</li>\n</ul>\n<p>Bien entendu, parfois, lorsqu’on fait un petit bout de CSS standalone, vous avez\naussi à dispo des plugins pour\n<a href=\"https://github.com/sindresorhus/sublime-autoprefixer\">Sublime Text</a> ou\n<a href=\"https://github.com/mikaeljorhult/brackets-autoprefixer\">Brackets</a> afin de ne\npas forcément avoir à utiliser les app ou process cités juste avant.</p>\n<figure>\n  <img src=\"/public/images/articles/2014-02-25-comment-en-finir-avec-les-prefixes-css/autoprefixer.gif\" alt=\"sublime text autoprefixer preview\" />\n  <figcaption>Intégration dans Sublime Text</figcaption>\n</figure>\n<p>Cet outil est maintenant basé sur <a href=\"https://github.com/ai/postcss\">PostCSS</a>, un\npost-processeur CSS. Vous pouvez donc l’utiliser en plugin pour ce\npost-procésseur.</p>\n<p>Attends attends, un WAT ? Un <strong>POST</strong>-processeur ? Oui tu as bien lu car les\npré-processeurs c’est so 2000. Regarde par là\n<a href=\"/fr/articles/css/preprocesseurs/\">Le point sur les pré-processeurs CSS</a> ;)</p>\n<p>Tout plein de -moz-bisous.</p>\n<hr />\n<p>PS: Convaincu par cette solution ? Tant mieux, elle est simple à mettre en\nplace. Tout ça est décrit dans la\n<a href=\"/fr/articles/css/autoprefixer/mise-en-place/\">mise en place d'autoprefixer</a>\navec des exemples concrets pour ajouter ça dans un workflow existant.</p>\n"}