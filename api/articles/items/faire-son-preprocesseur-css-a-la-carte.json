{"slug":"faire-son-preprocesseur-css-a-la-carte","filename":"2014-05-20-faire-son-preprocesseur-css-a-la-carte","title":"Faire son pr√©processeur CSS √† la carte","date":"Tue, 20 May 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-05-20T00:00:00.000Z","title":"Faire son pr√©processeur CSS √† la carte","author":"MoOx","oldSlug":"css/preprocesseurs/a-la-carte","slug":"faire-son-preprocesseur-css-a-la-carte"},"body":"<blockquote>\n<p>‚ö†Ô∏è Cet article est marqu√© comme obsol√®te</p>\n</blockquote>\n<p>Apr√®s vous avoir fait un petit\n<a href=\"/fr/articles/css/preprocesseurs/\">√©tat de l'art des pr√©processeurs CSS historiques</a>\net vous avoir parl√© <a href=\"/fr/articles/css/preprocesseurs/\">des postprocesseurs</a>, je\nme dois de vous montrer le chemin qui me semble le plus pertinent aujourd'hui,\nen 2014, maintenant que\n<a href=\"http://www.w3.org/standards/techs/css#cr\">les sp√©cifications CSS sont d√©coup√©es en modules</a>\nqui peuvent du coup avancer (plus rapidement) chacune de leur c√¥t√©.</p>\n<p>Bon apr√®s faut avouer que chez {p!} on fait genre on est des hipsters hackers,\ndu coup quand on voit que\n<a href=\"http://blog.kaelig.fr/post/85546040569/net-awards-sass-game-changer-of-the-year\">Sass est le game changer of the year</a>\net que tout le monde l'adopte, on se doit de rester hipster. Du coup on est\noblig√©s de passer √† autre chose.</p>\n<p><strong>Mise √† jour du 11 d√©cembre 2014:</strong> <em>depuis le temps o√π j'ai r√©dig√© cette\narticle, j'ai travaill√© sur un transpileur CSS future-proof, bas√© sur PostCSS.\nJe vous invite √† jeter au project <strong><a href=\"https://cssnext.github.io/\">cssnext</a></strong>.</em></p>\n<h2>Pr√© ou postprocesseurs ?</h2>\n<p>Je vais ici utiliser le mot pr√©processeur, alors que certains trouveront\npostprocesseurs plus pertinent, car pour moi le pr√©processing reste simplement\nune √©tape avant le <em>processing</em> de nos feuilles de styles par les navigateurs.</p>\n<p>Cela dit il faut bien distinguer les √©tapes :</p>\n<ol>\n<li>Preprocessing d'un langage sp√©cifique (Sass, Stylus*) ou superset du\nlangage CSS (Scss, Less);</li>\n<li>Preprocessing d'un fichier respectant la syntaxe CSS;</li>\n<li>Processing par le navigateur</li>\n</ol>\n<p>Revenons rapidement sur ces 3 points :</p>\n<h3>Preprocessing via langage d√©di√©</h3>\n<p>Ici je parle d'un langage, car superset ou pas, on a des √©l√©ments nouveaux,\nincompr√©hensibles par le navigateur (ex: <code>@if</code>, <code>@foreach</code>...).</p>\n<p>Note: Je case Stylus dans le langage sp√©cifique car il n'est pas vraiment\ncompatible, ne tol√©rant pas l'indentation :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Block</span> {\n  <span class=\"hljs-attribute\">prop</span>: value;\n}\n\n<span class=\"hljs-selector-class\">.Block-element</span> {\n  <span class=\"hljs-attribute\">prop</span>: value;\n}\n\n<span class=\"hljs-comment\">/* üí• BOOM ! CA PAS MARCHER EN STYLUS */</span>\n</code></pre>\n<h3>Pr√©processing futureproof/fallback</h3>\n<p>Ici on conserve la syntaxe CSS, le parsing est donc simple est connu. Mais\nattention on peut avoir un r√©sultat non compr√©hensible par certains navigateurs\n(ex: unit√© REM sur IE 8, variables CSS...).</p>\n<p>√Ä la diff√©rence de la solution du dessus, on reste ici avec un langage √† la\nsyntaxe simple et connue, avec des sp√©cifications (en brouillon ou pas).</p>\n<p>D√®s que c'est possible on va rendre le CSS encore plus compatible en ajoutant\ndes fallbacks (roues de secours) √† tout va. Ainsi par exemple pour assurer une\nutilisation de l'unit√© REM, on peut (en roue de secours) doubler nos valeurs en\n<code>px</code>. Autre exemple avec les variables CSS natives : on peut (pour une\nutilisation simpliste) faire un pr√©rendu et mettre des roues de secours l√† o√π\nc'est possible.</p>\n<h3>Processing par le navigateur</h3>\n<p>Ici on a blind√© notre feuille de fallback, on est (en th√©orie) sens√© avoir un\nsupport &quot;au mieux&quot;.</p>\n<h2>Cr√©er un pr√©processeur CSS</h2>\n<p>Allons √† l'essentiel : pour cr√©er votre pr√©processeur on va utiliser une\nbiblioth√®que. √Ä ce jour nous avons le choix entre\n<a href=\"https://github.com/reworkcss/rework\">Rework</a> ou\n<a href=\"https://github.com/ai/postcss\">PostCSS</a> qui permettent d'inspecter et de\nmanipuler nos CSS. Tout deux sont des biblioth√®ques √©crites en JavaScript\n(NodeJs).</p>\n<p>Pour la petite histoire, Autoprefixer est √† l'origine de PostCSS. En effet les\npremi√®res versions utilisaient Rework, mais √† cause de limitation dues √† l'API\nde Rework, l'auteur d'Autoprefixer a d√©cid√© de cr√©er son propre moteur, qui a\nune API presque plus sympa il faut le dire (il faudra voir comment √©volue\nRework).</p>\n<p>D'un autre c√¥t√© Rework √©tant plus ancien, il poss√®de un √©cosyst√®me plus fourni\net r√©pondra donc mieux √† nos besoins.</p>\n<p>Cela √©tant dit, avec l'approche futureproof nous pourrons switcher de Rework √†\nPostCSS sans probl√®me et surtout sans toucher √† nos feuilles de styles. Il\nsuffira de trouver un plugin √©quivalent (ex: rework-vars et postcss-vars font la\nm√™me chose).</p>\n<p>Pour des raisons d'√©cosyst√®me, je partirai sur Rework histoire de ne pas\nr√©inventer la roue.</p>\n<h2>Cr√©er un pr√©processeur CSS avec Rework</h2>\n<p>Rework prend une cha√Æne CSS en entr√©e, produit un AST (arbre de syntaxe abtrait)\nde notre CSS et nous fournis une API pour le manipuler.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> rework = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework&quot;</span>);\n<span class=\"hljs-keyword\">var</span> unPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-BIDULE&quot;</span>);\n<span class=\"hljs-comment\">// usage simple</span>\n<span class=\"hljs-keyword\">var</span> css = rework(<span class=\"hljs-string\">&quot;html { font-size: 2rem}&quot;</span>)\n  .use(unPlugin)\n  .toString();\n</code></pre>\n<h3>Plugin Rework</h3>\n<p>Un plugin Rework n'est rien d'autre qu'une fonction JavaScript. L'exemple\nsuivant remplacera toutes les couleurs de texte par du noir.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> monPlugin = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plugin</span>(<span class=\"hljs-params\">ast, reworkInstance</span>) </span>{\n  ast.rules.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rule</span>) </span>{\n    <span class=\"hljs-comment\">// dans notre cas on ne veut que travailler sur des r√®gles</span>\n    <span class=\"hljs-keyword\">if</span> (rule.type !== <span class=\"hljs-string\">&quot;rule&quot;</span>) <span class=\"hljs-keyword\">return</span>;\n\n    rule.declarations.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">declaration, index</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (declaration.property === <span class=\"hljs-string\">&quot;color&quot;</span>) {\n        declaration.value = <span class=\"hljs-string\">&quot;#000&quot;</span>;\n      }\n    });\n  });\n};\n</code></pre>\n<p>Il est certain que l'exemple ci-dessus ne doit pas vous exciter beaucoup. Moi\nnon plus. Je n'ai d'ailleurs pas du tout accroch√© lorsque Rework est apparu par\nmanque de compr√©hension. <strong>Ou plut√¥t par manque d'imagination</strong>.</p>\n<p>Pour un exemple plus costaud je vous invite √† regarder le code\n<a href=\"https://github.com/reworkcss/rework-vars/blob/master/index.js\">rework-vars</a>.</p>\n<h2>L'Ecosyst√®me Rework</h2>\n<p>Heureusement pour nous, nous avons un √©cosyst√®me. Donc pour un usage classique\n(√©crire du CSS futureproof ou ajouter quelques petites am√©liorations) il n'y\naura pas besoin d'√©crire de plugin, juste en utiliser fera l'affaire.</p>\n<h3>Plugins Rework natif</h3>\n<p>Rework embarque en natif quelques plugins. Il faudra tout de m√™me les activer\n(on voit comment juste apr√®s).</p>\n<ul>\n<li><a href=\"https://github.com/reworkcss/rework#extend\">extend</a>: Permet d'h√©riter d'un\ns√©lecteur (<code>@extend</code> quoi).</li>\n<li><a href=\"https://github.com/reworkcss/rework#ease\">ease</a>: Ajout un paquet de fonctions\nd'easing pour les animations et transitions.</li>\n<li><a href=\"https://github.com/reworkcss/rework#at2x\">at2x</a>: Gestion automatique des\nimages <code>@2x</code>.</li>\n<li><a href=\"https://github.com/reworkcss/rework#prefixselectorsstring\">prefixSelectors</a>:\nPermet de pr√©fixer vos s√©lecteurs.</li>\n<li><a href=\"https://github.com/reworkcss/rework#colors\">colors</a>: Explication par\nl'exemple : <code>rgba(#fc0, .5)</code>.</li>\n<li><a href=\"https://github.com/reworkcss/rework#mixinobject\">mixin</a>: Faire ses propres\nmixins via des fonctions JavaScript.</li>\n<li><a href=\"https://github.com/reworkcss/rework#functionobject\">function</a>: Ajouter ses\npropres fonctions CSS.</li>\n<li><a href=\"https://github.com/reworkcss/rework#references\">references</a>: Permet de faire\nr√©f√©rence √† des valeurs de propri√©t√©s (ex: <code>height: @width</code>)</li>\n<li><a href=\"https://github.com/reworkcss/rework#urlfn\">url</a>: R√©√©crire les <code>url()</code>s via\nune fonction JavaScript.</li>\n<li><a href=\"https://github.com/reworkcss/rework#inlinedir\">inline</a>: Inliner des\nressources via des datauri.</li>\n</ul>\n<h3>Plugins Rework NPM</h3>\n<p>On a d√©j√† plus d'une soixantaine de\n<a href=\"https://www.npmjs.org/search?q=rework\">plugins Rework disponible sur NPM</a> en\nplus des plugins natifs.</p>\n<h4>Ajouter des fallbacks</h4>\n<p>Si vous souhaitez √©crire des CSS sans pour autant vous limiter √† certaines\nimpl√©mentations, ces plugins devraient vous plaire.</p>\n<h5>rework-vars</h5>\n<p><a href=\"https://github.com/reworkcss/rework-vars\">rework-vars</a> permet un usage des\n<a href=\"http://www.w3.org/TR/css-variables/\">variables CSS</a>. Ce plugin est (pour\nl'instant) restreint aux d√©clarations √† la racine (<code>:root</code>). Cela permet\ntoutefois un usage classique de variables globales. Et de se s√©parer de Sass ou\nLess si on utilise pas beaucoup plus que des variables.</p>\n<h5>rework-calc</h5>\n<p><a href=\"https://github.com/reworkcss/rework-calc\">rework-calc</a> ajoute les r√©sultats des\nop√©rations <code>calc()</code> quand c'est possible (m√™me unit√©). Tr√®s pratique\nsp√©cialement coupl√© avec rework-vars pour ajouter un peu de math via vos\nvariables.</p>\n<h5>rework-npm</h5>\n<p><a href=\"https://github.com/conradz/rework-npm\">rework-npm</a> nous parse <code>@import</code> comme\non l'aime. Peut taper dans votre dossier de sources ou en plus dans\n<code>node_modules</code> (pratique pour utiliser\n<a href=\"https://www.npmjs.org/package/normalize.css\">normalize.css</a>\n<a href=\"/fr/articles/npm/frontend/\">via npm</a> par exemple). Il existe aussi\n<a href=\"https://github.com/simme/rework-importer\">rework-importer</a> qui am√®ne quelques\ndiff√©rences de syntaxe.</p>\n<h5><a href=\"https://github.com/ctalkington/rework-rem-fallback\">rework-rem-fallback</a></h5>\n<p><a href=\"https://github.com/ctalkington/rework-rem-fallback\">rework-rem-fallback</a> ajoute\nun fallback sur les unit√©s REM. Pratique si vous voulez utiliser REM mais que\nvous devez supporter IE 8.</p>\n<h5>rework-color-function</h5>\n<p><a href=\"https://github.com/ianstormtaylor/rework-color-function\">rework-color-function</a>\npermet de manipuler les couleurs via\n<a href=\"http://dev.w3.org/csswg/css-color/#modifying-colors\">les nouvelles fonctions en cours de sp√©cifications</a>\n(hue, saturation, lightness, whiteness, blackness, tint, shade, blend, blenda,\ncontrast).</p>\n<h5>rework-mixin-opacity</h5>\n<p><a href=\"https://github.com/reworkcss/rework-mixin-opacity\">rework-mixin-opacity</a> ajoute\nl'<code>opacity</code> pour IE 8.</p>\n<h4>Am√©liorer un peu vos feuilles de styles</h4>\n<p>Sans pour autant partir en vrille vers des <code>@if</code> ou <code>@each</code>, voici quelques\nplugins qui peuvent ajouter un peu de beurre dans les √©pinards :</p>\n<h5>rework-parent</h5>\n<p><a href=\"https://github.com/fgnass/rework-parent\">rework-parent</a> permet de r√©f√©rencer le\ns√©lecteur pr√©c√©dent via <code>&amp;</code>. Pratique dans pour les media-queries ou pour les\n√©tats (:hover etc).</p>\n<h5>rework-breakpoints</h5>\n<p><a href=\"https://github.com/reworkcss/rework-breakpoints\">rework-breakpoints</a> permet de\nsp√©cifier des media-queries via des breakpoints pr√©d√©finis. Pratique en\nattendant un plugin g√©rant les\n<a href=\"http://dev.w3.org/csswg/mediaqueries4/#custom-mq\"><code>@custom-media</code></a>.</p>\n<h5>rework-hex-alpha</h5>\n<p><a href=\"https://github.com/ianstormtaylor/rework-hex-alpha\">rework-hex-alpha</a> permet de\nsp√©cifier des couleurs avec alpha sous la forme #rrggbbaa.</p>\n<h5>rework-clearfix</h5>\n<p><a href=\"https://github.com/fgnass/rework-clearfix\">rework-clearfix</a> permet d'utiliser\n<code>clear: fix</code> via l'insertion automatique du\n<a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">micro clearfix de @necolas</a>.</p>\n<h5>rework-assets</h5>\n<p><a href=\"https://github.com/conradz/rework-assets\">rework-assets</a> permet de copier les\nassets r√©f√©renc√©s. Pratique avec rework-npm et des modules externes.</p>\n<h5>rework-namespace-css</h5>\n<p><a href=\"https://github.com/geordiemhall/rework-namespace-css\">rework-namespace-css</a>\npermet de namespacer vos CSS par une classe sur <code>&lt;html&gt;</code>.</p>\n<h5>rework-namespace</h5>\n<p><a href=\"https://github.com/kristoferjoseph/rework-namespace\">rework-namespace</a> permet\nde namespacer vos CSS par un pr√©fixe. Pratique avec <a href=\"/fr/articles/css/bem/\">BEM</a>\nlorsque vous pr√©fixez par votre <code>.org-</code>.</p>\n<h5>rework-classmap</h5>\n<p><a href=\"https://github.com/andreypopp/rework-classmap\">rework-classmap</a> permet de\nrenommer des classes via du mapping. Avec √ßa on pourrait presque avoir un code\nBootstrap propre.</p>\n<h5>rework-palette</h5>\n<p><a href=\"https://github.com/fgnass/rework-palette\">rework-palette</a> permet d'ajouter une\npalette de couleur personnalis√©e (via des noms de couleurs).</p>\n<h5>rework-deduplicate</h5>\n<p><a href=\"https://github.com/kristoferjoseph/rework-deduplicate\">rework-deduplicate</a>\npermet de supprimer les r√®gles dupliqu√©es.</p>\n<h5>rework-split-media</h5>\n<p><a href=\"https://github.com/reworkcss/split-media\">rework-split-media</a> permet de couper\nles contenus des media queries dans d'autres fichiers.</p>\n<h5>rework-move-media</h5>\n<p><a href=\"https://github.com/reworkcss/rework-move-media\">rework-move-media</a> permet de\nregrouper les contenus des media queries. Pas tr√®s utile car gzip fera aussi\nbien.</p>\n<h4>Au del√† du pr√©processing</h4>\n<p>En utilisant le parser Rework, on peut faire plus que des ajustements ou du\nremplacement: on peut balancer des erreurs.</p>\n<ul>\n<li><a href=\"https://github.com/reworkcss/rework-ie-limits\">rework-ie-limits</a>: pr√©vient si\nvos CSS d√©passent la limite de 4095 selectors (limite pour IE &lt; 10).</li>\n<li><a href=\"https://github.com/suitcss/rework-suit-conformance\">rework-suit-conformance</a>:\npermet de v√©rifier que votre code suit bien les\n<a href=\"https://github.com/suitcss/suit/tree/master/doc\">conventions SUIT</a> (pour peu\nque vous les suiviez).</li>\n</ul>\n<p>En partant dans d'autres directions on pourrait r√©aliser des statistiques sur\nnos CSS (nombre de s√©lecteurs, de couleurs utilis√©es etc) comme le fait\n<a href=\"http://www.cssstats.com/\">CSS Stats</a>.</p>\n<p>Retrouvrez en plus de la recherche via npm (qui sera la plus √† jour),\n<a href=\"https://github.com/reworkcss/rework/wiki/Plugins-and-Utilities\">une liste des plugins et utilitaires sur le wiki de Rework</a>.</p>\n<h2>Mise en place de Rework pour faire votre pr√©processeur en moins de 5 min</h2>\n<p>Maintenant que nous avons vu comment utiliser Rework et quels sont les plugins\nles plus sympas, on se faire un petit fichier pour automatiser tout ce process.</p>\n<p>Plut√¥t que de r√©inventer la roue comme l'a fait <a href=\"http://pleeease.io/\">Pleeease</a>\n(en g√©rant un watcher et tout le tralala), on va plut√¥t partir comme\n<a href=\"http://myth.io/\">Myth.io</a> ou <a href=\"https://github.com/visionmedia/styl\">Styl</a>\n(successeur spirituel de Stylus) qui se concentrent sur le rendu et non le\nworkflow pour g√©n√©rer ce rendu.</p>\n<p>Nous allons donc faire simple et efficace avec une task\n<a href=\"/fr/articles/js/gulp/\">gulp</a>. Ceci pourrait bien entendu √™tre aussi bien fait\navec grunt ou m√™me make et <a href=\"https://github.com/facebook/watchman\">watchman</a>.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir monrework &amp;&amp; <span class=\"hljs-built_in\">cd</span> monrework</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> on cr√©e un package.json pour sauvegarder les r√©f√©rences des paquets qu<span class=\"hljs-string\">&#x27;on va utiliser</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-string\"> npm init</span></span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"><span class=\"hljs-string\"> on install gulp, autoprefixer et rework &amp; co en les sauvegardants dans la partie &quot;devDependencies&quot;</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-string\"> npm i -D minimist gulp gulp-util gulp-plumber gulp-autoprefixer gulp-rework rework-npm rework-vars rework-calc rework-color-function rework-rem-fallback rework-parent rework-ie-limits</span></span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"><span class=\"hljs-string\"> on cr√©√© notre fichier vide</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"><span class=\"hljs-string\"> mkdir src &amp;&amp; mkdir src/styles &amp;&amp; touch src/styles/index.css</span></span>\n</code></pre>\n<p>Ensuite il nous reste √† faire notre petit <code>Gulpfile.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> options = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;minimist&quot;</span>)(process.argv.slice(<span class=\"hljs-number\">2</span>));\n<span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp&quot;</span>);\n<span class=\"hljs-keyword\">var</span> util = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-util&quot;</span>);\n<span class=\"hljs-keyword\">var</span> plumber = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-plumber&quot;</span>);\n<span class=\"hljs-keyword\">var</span> rework = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-rework&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> reworkPlugins = {\n  <span class=\"hljs-attr\">atimport</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-npm&quot;</span>),\n  <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-parent&quot;</span>),\n  <span class=\"hljs-attr\">vars</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-vars&quot;</span>),\n  <span class=\"hljs-attr\">calc</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-calc&quot;</span>),\n  <span class=\"hljs-attr\">colorFn</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-color-function&quot;</span>),\n  <span class=\"hljs-attr\">remFallback</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-rem-fallback&quot;</span>),\n  <span class=\"hljs-attr\">ieLimits</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;rework-ie-limits&quot;</span>),\n};\n<span class=\"hljs-keyword\">var</span> autoprefixer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;gulp-autoprefixer&quot;</span>);\n\ngulp.task(<span class=\"hljs-string\">&quot;styles&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// ici on prend toutes les CSS √† la racine</span>\n  <span class=\"hljs-comment\">// on consid√®re que celles dans des sous dossiers sont √† importer</span>\n  <span class=\"hljs-keyword\">return</span> gulp\n    .src(<span class=\"hljs-string\">&quot;./src/styles/*.css&quot;</span>)\n    .pipe(opts.production ? plumber() : util.noop())\n    .pipe(\n      rework(\n        reworkPlugins.atimport({ <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-string\">&quot;./src/styles/&quot;</span> }),\n        rework.colors(),\n        rework.references(),\n        rework.ease(),\n        rework.inline,\n        reworkPlugins.parent,\n        reworkPlugins.vars(), <span class=\"hljs-comment\">// notez que certains plugins n√©cessitent d&#x27;√™tre √©xecut√©s (retournant une fonction dynamique)</span>\n        reworkPlugins.calc,\n        reworkPlugins.colorFn,\n        reworkPlugins.remFallback(),\n        reworkPlugins.ieLimits,\n      ),\n    )\n    .pipe(autoprefixer())\n    .pipe(gulp.dest(<span class=\"hljs-string\">&quot;./dist/styles&quot;</span>));\n});\n\ngulp.task(<span class=\"hljs-string\">&quot;default&quot;</span>, [<span class=\"hljs-string\">&quot;styles&quot;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.watch(<span class=\"hljs-string\">&quot;./src/css/**/*&quot;</span>, [<span class=\"hljs-string\">&quot;styles&quot;</span>]);\n});\n</code></pre>\n<p>Ensuite il ne reste plus qu'√† lancer Gulp au besoin qui s'occupera d'√©xecuter le\npreprocessing au d√©marrage et lors des changements de fichiers. Il ne reste plus\ngrand chose √† faire si ce n'est ajouter livereload en plus pour avoir le petit\nprocess aux petits oignons.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> gulp</span>\n[gulp] Using gulpfile ~/Development/monrework/Gulpfile.js\n[gulp] Starting &#x27;styles&#x27;...\n[gulp] Finished &#x27;styles&#x27; after 49 ms\n[gulp] Starting &#x27;default&#x27;...\n[gulp] Finished &#x27;default&#x27; after 4.16 ms\n</code></pre>\n<p>Le watch est lanc√©, on peut remplir notre fichier CSS</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--fontSize</span>: <span class=\"hljs-number\">1rem</span>;\n  <span class=\"hljs-attribute\">--lineHeight</span>: <span class=\"hljs-number\">1.5rem</span>;\n  <span class=\"hljs-attribute\">--color-highlight</span>: <span class=\"hljs-built_in\">rgba</span>(#f00, <span class=\"hljs-number\">0.8</span>);\n}\n\n<span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">height</span>: @width;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">var</span>(--fontSize);\n}\n\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-built_in\">calc</span>(var(--lineHeight) / <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--color-highlight);\n  <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">500ms</span> ease-out-back;\n}\n\n&amp;<span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">color</span>(var(--color-highlight) <span class=\"hljs-built_in\">lightness</span>(-<span class=\"hljs-number\">10%</span>));\n  <span class=\"hljs-attribute\">trasnform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">1deg</span>);\n}\n</code></pre>\n<p>Et on obtiendra</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1rem</span>;\n}\n\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">12px</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0.75rem</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.8</span>);\n  <span class=\"hljs-attribute\">-webkit-transition</span>: all <span class=\"hljs-number\">500ms</span> <span class=\"hljs-built_in\">cubic-bezier</span>(<span class=\"hljs-number\">0.175</span>, <span class=\"hljs-number\">0.885</span>, <span class=\"hljs-number\">0.32</span>, <span class=\"hljs-number\">1.275</span>);\n  <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">500ms</span> <span class=\"hljs-built_in\">cubic-bezier</span>(<span class=\"hljs-number\">0.175</span>, <span class=\"hljs-number\">0.885</span>, <span class=\"hljs-number\">0.32</span>, <span class=\"hljs-number\">1.275</span>);\n}\n\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.8</span>);\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">1deg</span>);\n}\n</code></pre>\n<p>Gardez bien en t√™te qu'avec le code CSS d'origine, vous avez (en majeur partie)\nun code futureproof. D'ici quelques temps on pourra supprimer une grande partie\ndes plugins et les navigateurs prendront le relais üòâ.</p>\n<p><strong>Bon alors, on Less tomber Sass ?</strong></p>\n"}