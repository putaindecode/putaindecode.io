{"slug":"introduction-au-testing-js-front","filename":"2014-05-01-introduction-au-testing-js-front","title":"Introduction au testing JS front","date":"Thu, 01 May 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-05-01T00:00:00.000Z","title":"Introduction au testing JS front","author":"bloodyowl","oldSlug":"js/tests/frontend","slug":"introduction-au-testing-js-front"},"body":"<p>Les tests automatisés en front-end ont longtemps été ignorés, et le sont encore\ntrop.</p>\n<p>Écrire des tests peut paraître chiant, mais le temps qu'ils rapportent compense\nlargement celui que l'on passe à les écrire.</p>\n<h2>Écrire du js testable</h2>\n<p>Prenons un exemple simple et moche :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">//app.js</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> cart = $(<span class=\"hljs-string\">&quot;#cart&quot;</span>);\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addToCart</span>(<span class=\"hljs-params\">id</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> element = $(<span class=\"hljs-string\">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);\n    element.html(catalog[id]);\n    cart.append(element);\n  }\n\n  $(<span class=\"hljs-string\">&quot;.js-updateCart&quot;</span>).on(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventObject</span>) </span>{\n    addToCart($(<span class=\"hljs-built_in\">this</span>).data(<span class=\"hljs-string\">&quot;id&quot;</span>));\n  });\n})();\n</code></pre>\n<p>Tester ce code est particulièrement lourd, pour plusieurs raisons :</p>\n<ul>\n<li>les functions à tester ne sont pas accessibles</li>\n<li>on doit simuler un <code>click</code> pour tester un comportement logique.</li>\n<li>on doit créer un element et modifier son <code>data-id</code> à chaque cas souhaité.</li>\n<li>pour tester <code>addToCart</code> on doit aller regarder dans le DOM.</li>\n</ul>\n<h3>1. Rendez accessibles vos méthodes au test runner</h3>\n<p>Vous pouvez utiliser un namespace adéquat.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> app = (<span class=\"hljs-built_in\">window</span>.app = {});\napp.cart = {};\napp.cart.addToCart = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">/* … */</span>\n};\n</code></pre>\n<p>Mais ne souhaitez probablement pas rendre vos méthodes accessibles à la console.</p>\n<p>Utilisez un module-system : <a href=\"http://browserify.org\">browserify</a> ou\n<a href=\"http://requirejs.org\">requirejs</a> (si vous n'avez pas besoin de chargement\nconditionnel et souhaitez créer un bundle par build, utilisez browserify qui\npossède une syntaxe beaucoup plus sympathique et une codebase réduite, vous\npourrez même <code>require</code> depuis un module npm\n<a href=\"/fr/articles/js/browserify/\">comme on vous l'explique dans un article dédié</a>).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> $ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;jquery&quot;</span>); <span class=\"hljs-comment\">// oh, un module npm</span>\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">element</span>: $(<span class=\"hljs-string\">&quot;#cart&quot;</span>),\n  <span class=\"hljs-attr\">addToCart</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/* … */</span>\n  },\n};\n</code></pre>\n<p>Vous pourrez ainsi séparer proprement votre application en modules et les tester\nindividuellement.</p>\n<h3>2. Oui, mais les modules interdépendants alors ?</h3>\n<p>Là, ça devient un peu plus tricky. Ce que je conseille à titre personnel c'est\nd'utiliser des events pour faire communiquer les différentes parties de\nl'application.</p>\n<p>Cela permet d'éviter d'utiliser des mocks d'autres parties de l'application\npartout.</p>\n<p>Par exemple, si je souhaite tester le fait qu'un click sur <code>.js-updateCart</code>\ndéclanchera bien <code>updateCart</code> :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">//view.js</span>\n\n<span class=\"hljs-comment\">// view est une petite class qui route les events</span>\n<span class=\"hljs-comment\">// en rendant les listeners accessibles aux tests</span>\n<span class=\"hljs-comment\">// vous pouvez très facilement en concevoir une</span>\n<span class=\"hljs-comment\">// à votre goût en quelques lignes de code</span>\n<span class=\"hljs-keyword\">var</span> view = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../lib/view&quot;</span>);\n\n<span class=\"hljs-comment\">// eventbus est l&#x27;event bus de l&#x27;application, il orchestre</span>\n<span class=\"hljs-comment\">// la communication entre les différents modules</span>\n<span class=\"hljs-keyword\">var</span> eventbus = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../eventbus&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> $ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;jquery&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = view.extend({\n  <span class=\"hljs-attr\">element</span>: <span class=\"hljs-built_in\">document</span>.body,\n  <span class=\"hljs-attr\">events</span>: [\n    {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;click&quot;</span>,\n      <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&quot;.js-addToCart&quot;</span>,\n      <span class=\"hljs-attr\">listener</span>: <span class=\"hljs-string\">&quot;addToCart&quot;</span>,\n    },\n  ],\n  <span class=\"hljs-attr\">addToCart</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventObject</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> target = eventObject.currentTarget;\n    <span class=\"hljs-keyword\">var</span> id = $(target).data(<span class=\"hljs-string\">&quot;id&quot;</span>);\n    eventbus.fire(<span class=\"hljs-string\">&quot;addToCart&quot;</span>, {\n      <span class=\"hljs-attr\">id</span>: id,\n    });\n  },\n});\n</code></pre>\n<p>et je n'aurais qu'à écouter cet event depuis <code>cart</code> :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// cart.js</span>\n<span class=\"hljs-keyword\">var</span> eventbus = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../eventbus&quot;</span>);\n<span class=\"hljs-keyword\">var</span> catalog = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../catalog&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">initialize</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>._addToCart = <span class=\"hljs-built_in\">this</span>.addToCart.bind(<span class=\"hljs-built_in\">this</span>);\n    eventbus.listen(<span class=\"hljs-string\">&quot;addToCart&quot;</span>, <span class=\"hljs-built_in\">this</span>._addToCart);\n  },\n  <span class=\"hljs-attr\">release</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    eventbus.stopListening(<span class=\"hljs-string\">&quot;addToCart&quot;</span>, <span class=\"hljs-built_in\">this</span>._addToCart);\n  },\n  <span class=\"hljs-attr\">addToCart</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventObject</span>) </span>{\n    <span class=\"hljs-comment\">// et on a eventObject.id</span>\n    <span class=\"hljs-built_in\">this</span>.products.push(catalog[eventObject.currentTarget.data(<span class=\"hljs-string\">&quot;id&quot;</span>)]);\n  },\n};\n</code></pre>\n<p>Grâce à cette architecture, je vais pouvoir tester individuellement les deux\nmodules.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// view.test.js</span>\n\n<span class=\"hljs-keyword\">var</span> tape = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;tape&quot;</span>);\n<span class=\"hljs-keyword\">var</span> view = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../app/view&quot;</span>);\n<span class=\"hljs-keyword\">var</span> eventbus = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../eventbus&quot;</span>);\n<span class=\"hljs-keyword\">var</span> $ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;jquery&quot;</span>);\n\ntape(<span class=\"hljs-string\">&quot;view&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">test</span>) </span>{\n  test.plan(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">var</span> element = $(<span class=\"hljs-string\">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>);\n  element.data(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// on teste facilement l&#x27;envoi</span>\n  eventbus.listen(<span class=\"hljs-string\">&quot;addToCart&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventObject</span>) </span>{\n    test.equal(eventObject.id, <span class=\"hljs-number\">1</span>);\n  });\n  view.addToCart({\n    <span class=\"hljs-attr\">currentTarget</span>: element,\n  });\n});\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// cart.test.js</span>\n\n<span class=\"hljs-keyword\">var</span> tape = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;tape&quot;</span>);\n<span class=\"hljs-keyword\">var</span> cart = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../app/cart&quot;</span>);\n<span class=\"hljs-keyword\">var</span> eventbus = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../eventbus&quot;</span>);\n<span class=\"hljs-keyword\">var</span> catalog = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../catalog&quot;</span>);\n\ntape(<span class=\"hljs-string\">&quot;cart&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">test</span>) </span>{\n  cart.initialize();\n  eventbus.fireSync(<span class=\"hljs-string\">&quot;addToCart&quot;</span>, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> });\n  test.deepEqual(cart[<span class=\"hljs-number\">0</span>], catalog[<span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">&quot;receives addToCart event&quot;</span>);\n  test.end();\n});\n</code></pre>\n<h2>Tester tous les cas possibles</h2>\n<p>Ce sont souvent les edge-cases qui nous font nous arracher les cheveux. Pour\npallier ces soucis, tester en profondeur est essentiel.</p>\n<p>Prenons un exemple, une méthode qui teste si la valeur qu'on lui passe est une\n<code>string</code>.</p>\n<p>On serait tenté de simplement tester les résultats positifs de cette façon :</p>\n<pre><code class=\"hljs language-javascript\">tape(<span class=\"hljs-string\">&quot;type.isString on strings&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">test</span>) </span>{\n  test.equal(type.isString(<span class=\"hljs-string\">&quot;&quot;</span>), <span class=\"hljs-literal\">true</span>);\n  test.end();\n});\n</code></pre>\n<p>Or, si par mégarde ma méthode <code>isString</code> se révèle être :</p>\n<pre><code class=\"hljs language-javascript\">type.isString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> value == <span class=\"hljs-string\">&quot;string&quot;</span>;\n};\n</code></pre>\n<p>on ne vérifie pas le cas <code>type.isString(new String(&quot;&quot;))</code>.</p>\n<p>Du coup, des tests complets :</p>\n<pre><code class=\"hljs language-javascript\">tape(<span class=\"hljs-string\">&quot;type.isString on strings&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">test</span>) </span>{\n  test.equal(type.isString(<span class=\"hljs-string\">&quot;&quot;</span>), <span class=\"hljs-literal\">true</span>);\n  test.equal(type.isString(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">&quot;&quot;</span>)), <span class=\"hljs-literal\">false</span>);\n  test.end();\n});\n</code></pre>\n<p>permettent ici d'identifier qu'en réalité on a besoin de :</p>\n<pre><code class=\"hljs language-javascript\">type.isString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(value) == <span class=\"hljs-string\">&quot;[object String]&quot;</span>;\n};\n</code></pre>\n<p>Et c'est à la force des résultats de tests que vous identifierez rapidement vous\nfamiliariserez à tous ces edge-cases.</p>\n<p>À chaque correctif de bug, ajoutez des tests (mais ça, vous le saviez déjà).</p>\n<h2>Cross-browser testing</h2>\n<p>À l'heure actuelle, où l'on se trouve notamment très souvent avec du feature\ntesting. Pour le tester complètement, on doit se servir de vrais navigateurs :\nun headless (certes, très pratique) comme <a href=\"http://phantomjs.org\">phantomjs</a> ne\npermettra pas d'obtenir 100% de coverage.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> supportsAnimationFrame = !!(\n  win.requestAnimationFrame ||\n  win.webkitRequestAnimationFrame ||\n  win.mozRequestAnimationFrame ||\n  win.ORequestAnimationFrame ||\n  <span class=\"hljs-comment\">// vous avez fait une faute de frappe,</span>\n  <span class=\"hljs-comment\">// et mis un `O` majuscule, seul un</span>\n  <span class=\"hljs-comment\">// test sur les version concernées d&#x27;Opera</span>\n  <span class=\"hljs-comment\">// vous permettront de l&#x27;identifier</span>\n  win.msRequestAnimationFrame\n);\n</code></pre>\n<p>De plus, vous pouvez par habitude être tenté d'utiliser un\n<code>Array.prototype.forEach</code> alors que votre scope navigateur inclut IE8; seuls des\ntests sur un vrai browser vous permettront d'identifier le souci.</p>\n<p>Je vous conseille fortement testling, très simple à intégrer dans vos modules,\net gratuit pour tout projet open-source.</p>\n<p>Dans le <code>package.json</code> :</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;testling&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;files&quot;</span>: <span class=\"hljs-string\">&quot;test/**/*.js&quot;</span>,\n    <span class=\"hljs-attr\">&quot;browsers&quot;</span>: [\n      <span class=\"hljs-string\">&quot;ie/9..latest&quot;</span>,\n      <span class=\"hljs-string\">&quot;chrome/22..latest&quot;</span>,\n      <span class=\"hljs-string\">&quot;firefox/16..latest&quot;</span>,\n      <span class=\"hljs-string\">&quot;safari/6..latest&quot;</span>,\n      <span class=\"hljs-string\">&quot;opera/11.0..latest&quot;</span>,\n      <span class=\"hljs-string\">&quot;iphone/6..latest&quot;</span>,\n      <span class=\"hljs-string\">&quot;ipad/6..latest&quot;</span>,\n      <span class=\"hljs-string\">&quot;android-browser/latest&quot;</span>\n    ]\n  }\n}\n</code></pre>\n<p>Et ajouter un webhook dans l'admin de votre repository GitHub pointant vers</p>\n<blockquote>\n<p><a href=\"http://git.testling.com\">http://git.testling.com</a></p>\n</blockquote>\n<p>Vous pouvez l'utiliser avec tape (son test harness par défaut) Mocha, QUnit et\nn'importe quelle bibliothèque de test supportant <code>TAP</code> comme indiqué sur\n<a href=\"https://ci.testling.com/guide/custom_libraries\">le site de testling</a>.</p>\n<p>Vous trouverez aussi des alternatives populaires\n<a href=\"http://www.browserstack.com\">similaires</a>, ou ayant\n<a href=\"http://karma-runner.github.io\">une approche différente</a>.</p>\n<p>Par ailleurs, si dans votre code il existe des variations entre les navigateurs,\nvous pouvez utiliser du test conditionnel :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> {}.__proto__ == <span class=\"hljs-string\">&quot;object&quot;</span>) {\n  test.equal(\n    list.__proto__ === <span class=\"hljs-built_in\">Array</span>.prototype,\n    <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">&quot;__proto__ isn&#x27;t Array.prototype&quot;</span>,\n  );\n} <span class=\"hljs-keyword\">else</span> {\n  test.equal(list <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&quot;Isn&#x27;t a window Array&quot;</span>);\n}\n</code></pre>\n<p>Happy testing!</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> testling</span>\n\nTAP version 13\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> tests</span>\nok 1 bisous\n\n1..1\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> tests 1</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> pass  1</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> ok</span>\n</code></pre>\n"}