{"slug":"introduction-au-deploiement-continu","filename":"2015-05-25-introduction-au-deploiement-continu","title":"Introduction au déploiement continu","date":"Mon, 25 May 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-05-25T00:00:00.000Z","title":"Introduction au déploiement continu","oldSlug":"ci/deploiement-continu","slug":"introduction-au-deploiement-continu","author":"MoOx"},"body":"<h1>Déployer en continu ?</h1>\n<p>Il s'agit d'avoir un site stable en production, ceci de manière automatisée et\ncontinue. Rien que ça.</p>\n<p>Il faut comprendre par là sans passer par FTP avec Filezilla. Pas de bouton\n&quot;Upload&quot; ou &quot;Sync&quot; après avoir fait une modification de code. Pas de risque de\npéter tout votre site si vos modifications rentrent en conflit avec les\nmodifications de votre collègue, qui lui aussi vient de pousser un bon gros\npatch bien sale.</p>\n<p>La première conséquence est que les mises en production ne sont plus\nstressantes, car très régulières.\n<a href=\"http://www.estcequonmetenprodaujourdhui.info/\">Certaines personnes ne recommandent pas les mises en production tous les jours </a>\nmais lorsque vous avez mis en place l'intégration continue, vous minimisez\ngrandement les risques.</p>\n<p>La preuve en est que certaines entreprises font des mises en productions\nplusieurs centaines de fois par jour ! (GitHub est un bon exemple).</p>\n<h2>Pré-requis au déploiement continu</h2>\n<p>Vous n'avez qu'une chose à faire avant de vous attaquer à la mise en place du\ndéploiement continu : vous devez déjà avoir\n<a href=\"/fr/articles/ci/\">l'intégration continue</a> en place.</p>\n<p>Une fois vous êtes bon à ce niveau, vous pouvez passer à l'étape suivante.</p>\n<h2>Faire un script qui fait les choses qui vont bien quand les tests vont bien</h2>\n<p>Une fois qu'on a une commande qui peut jouer tous les tests et dire &quot;y'a bon&quot; ou\n&quot;tatoukassé&quot;, il nous faut prévoir les actions à réaliser quand nos tests sont\nOK.</p>\n<p>Un déploiement FTP, un déploiement git, ou plus compliqué via CDN, peu importe.\n<strong>Il faut juste une commande qui marche simplement.</strong></p>\n<p>Pour notre site, la commande est <code>npm run deploy</code>. Cette commande pousse le site\ngénéré sur la branche <code>gh-pages</code> (puisqu'on se sert\n<a href=\"https://pages.github.com/\">des pages GitHub</a>).</p>\n<h2>Automatiser le script qui fait les choses qui vont bien quand les tests vont bien</h2>\n<p>On peut ensuite éventuellement englober les précédentes étapes dans une seule\ncommande qui va se débrouiller s'il n'y a pas d'erreur. Mais bon, si vous n'avez\nque deux commandes (comme on a dans l'exemple de notre site), un simple appel de\ncette façon devrait faire l'affaire :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm <span class=\"hljs-built_in\">test</span> &amp;&amp; npm run deploy</span>\n</code></pre>\n<p>Si <code>npm test</code> retourne une erreur, la deuxième commande ne sera pas exécutée.</p>\n<h2>La suite au prochaine épisode</h2>\n<p>La prochaine étape (dans un prochain article) sera de mettre ça en place sur un\nserveur d'intégration continue, nous y étudierons simplement ce que nous avons\nfait pour notre site.</p>\n<p>Si vous êtes trop curieux, vous pouvez déjà\n<a href=\"https://github.com/putaindecode/putaindecode.io/tree/43dc29344debf0ccf81050214a1cf3cb6c8f6231\">consulter le code source de notre site</a>\net fouiller dans le <code>package.json</code> (section <code>scripts</code>) pour deviner la suite...</p>\n"}