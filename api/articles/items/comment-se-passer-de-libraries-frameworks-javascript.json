{"slug":"comment-se-passer-de-libraries-frameworks-javascript","filename":"2013-12-06-comment-se-passer-de-libraries-frameworks-javascript","title":"Comment se passer de libraries/frameworks JavaScript","date":"Fri, 06 Dec 2013 00:00:00 GMT","draft":false,"meta":{"date":"2013-12-06T00:00:00.000Z","title":"Comment se passer de libraries/frameworks JavaScript","author":"bloodyowl","oldSlug":"js/comment-se-passer-de-libraries-frameworks-javascript","slug":"comment-se-passer-de-libraries-frameworks-javascript"},"body":"<p>** Petite note préalable ** : évidemment que ça ne marche pas sous les vieux\nnavigateurs, cet article s'adresse principalement à toi pour te faire comprendre\ncomment les choses marchent.</p>\n<p>De plus en plus, le besoin de légèreté se fait sentir sur les pages. En dépit\nd'un web plus rapide sur desktop, on a maintenant beaucoup de devices connectés\nvia 3G ou Edge (un petit coucou au métro parisien). Du coup, tu te rendras vite\ncompte qu'embarquer jQuery + jQuery Mobile + jQuery UI et un tas d'autres\nplug-ins grapillés sur le web, ça commence à peser.</p>\n<h2>Pour la sélection d'élements</h2>\n<p>Pour remplacer ton bon vieux <code>$</code> magique,\n<code>document.querySelectorAll</code> semble faire l'affaire. En revanche, il retourne une\ninstance de <code>NodeList</code>, pas d'<code>Array</code>, ce qui ne nous arrange pas des masses.</p>\n<p>Du coup, on peut écrire une petite function toute con, qui nous retourne un\n<code>Array</code> et ses méthodes bien utiles.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> nativeSlice = [].slice; <span class=\"hljs-comment\">// la méthode de conversion</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">$</span>(<span class=\"hljs-params\">selector</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-built_in\">document</span>.querySelectorAll(selector);\n  <span class=\"hljs-keyword\">return</span> nativeSlice.call(list);\n}\n</code></pre>\n<p>Alternativement, tu peux utiliser <code>Array.apply(null, list)</code> plutôt que\n<code>nativeSlice.call(list)</code>, si vraiment ça te fait plaisir.</p>\n<p>Une troisième solution, un peu plus chiante au quotidien (et terriblement\nlaide), c'est d'utiliser directement les méthodes qui t'intéressent (ex.\n<code>[].forEach</code>) de cette façon :</p>\n<pre><code class=\"hljs language-javascript\">[].forEach.call(<span class=\"hljs-built_in\">document</span>.querySelectorAll(selector), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element</span>) </span>{\n  <span class=\"hljs-comment\">// do something w/ element</span>\n});\n</code></pre>\n<p>Pour en revenir à notre petite méthode <code>$</code>, on peut du coup faire :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// prends bien l&#x27;habitude de garder</span>\n<span class=\"hljs-comment\">// tes nodeLists si tu les réutilises</span>\n\n<span class=\"hljs-keyword\">var</span> elements = $(<span class=\"hljs-string\">&quot;.my-elements-className&quot;</span>);\n\nelements.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element</span>) </span>{\n  <span class=\"hljs-comment\">// do something w/ element</span>\n});\n</code></pre>\n<h3>Pour l'event delegation</h3>\n<p>L'event delegation, c'est bien, mangez-en. Ça permet, entre autres, de ne pas\nattacher 150 listeners uniques à 150 éléments différents, mais à attacher un\nseul listener sur un parent commun, et analyser les sources des évènements à\nl'intérieur en se basant sur le <strong>bubbling</strong> (remontée d'évènements de la source\nau plus haut parent) ou <strong>capturing</strong> (descente d'évènements du plus haut parent\nà la source, avant même que la source ne le reçoive).</p>\n<p>Pour faire de la délégation, on va procéder en trois temps :</p>\n<ul>\n<li>Choper <code>event.target</code></li>\n<li>Vérifier que le sélecteur qui nous intéresse correspond bien à <code>event.target</code>\nou un de ses parents (dans le cas où l'on clique sur le <code>.icon-Arrow</code> dans\n<code>.js-Button-action</code>)</li>\n<li>Si ça match, on garde l'élement correspondant au sélecteur, sinon, exit</li>\n</ul>\n<p>Les browsers relativement récents possèdent une méthode : <code>matchesSelector</code> (et\ntous ses alias préfixés). Ce qu'on peut donc faire, c'est ceci :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> docEl = <span class=\"hljs-built_in\">document</span>.documentElement;\n<span class=\"hljs-comment\">// si c&#x27;est dans docEl, c&#x27;est que c&#x27;est dispo</span>\n<span class=\"hljs-keyword\">var</span> nativeMatchesSelector =\n  docEl.matchesSelector ||\n  docEl.webkitMatchesSelector ||\n  docEl.mozMatchesSelector ||\n  docEl.oMatchesSelector ||\n  docEl.msMatchesSelector;\n<span class=\"hljs-keyword\">var</span> matchesSelector = nativeMatchesSelector || matchesPolyfill;\n\n<span class=\"hljs-comment\">// le polyfill utilise querySelectorAll</span>\n<span class=\"hljs-comment\">// et cherche dans le parent de l&#x27;élement</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">matchesPolyfill</span>(<span class=\"hljs-params\">selector</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> node = <span class=\"hljs-built_in\">this</span>;\n  <span class=\"hljs-keyword\">var</span> parent = node.parentNode;\n  <span class=\"hljs-keyword\">var</span> query, index, length;\n  <span class=\"hljs-keyword\">if</span> (!parent || parent.nodeType != <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n  query = parent.querySelectorAll(selector);\n  index = -<span class=\"hljs-number\">1</span>;\n  length = query.length;\n  <span class=\"hljs-keyword\">while</span> (++index &lt; length) {\n    <span class=\"hljs-keyword\">if</span> (query[index] == node) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCurrentTarget</span>(<span class=\"hljs-params\">node, selector</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (matchesSelector.call(node, selector)) <span class=\"hljs-keyword\">return</span> node;\n  <span class=\"hljs-keyword\">while</span> ((node = node.parentNode)) {\n    <span class=\"hljs-keyword\">if</span> (node.nodeType != <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">if</span> (matchesSelector.call(node, selector)) <span class=\"hljs-keyword\">return</span> node;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<p>Dès lors, dans nos listeners, on pourra directement procéder ainsi :</p>\n<pre><code class=\"hljs language-javascript\">element.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> currentTarget = getCurrentTarget(evt.target, <span class=\"hljs-string\">&quot;.Button-action&quot;</span>);\n  <span class=\"hljs-keyword\">if</span> (!currentTarget) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-comment\">// all good with currentTarget</span>\n});\n</code></pre>\n<h3>Pour l'Ajax</h3>\n<p>Pourquoi est-ce que l'on appelle ça encore Ajax, d'ailleurs ? Bref.</p>\n<p>Simple comme bonjour :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isSuccessStatus</span>(<span class=\"hljs-params\">status</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (status &gt;= <span class=\"hljs-number\">200</span> &amp;&amp; status &lt; <span class=\"hljs-number\">300</span>) || status == <span class=\"hljs-number\">304</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ajax</span>(<span class=\"hljs-params\">options</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();\n  <span class=\"hljs-keyword\">var</span> done = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">async</span> = options.hasOwnProperty(<span class=\"hljs-string\">&quot;async&quot;</span>) ? options.async : <span class=\"hljs-literal\">true</span>;\n\n  xhr.open(options.method || <span class=\"hljs-string\">&quot;GET&quot;</span>, options.url, <span class=\"hljs-keyword\">async</span>);\n\n  xhr.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (done) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.readyState != <span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">return</span>;\n    done = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">if</span> (isSuccessStatus(<span class=\"hljs-built_in\">this</span>.status)) {\n      <span class=\"hljs-keyword\">if</span> (options.success) {\n        options.success.call(<span class=\"hljs-built_in\">this</span>);\n      }\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (options.error) {\n      options.error.call(<span class=\"hljs-built_in\">this</span>);\n    }\n  };\n  <span class=\"hljs-built_in\">Object</span>.keys(options.headers || {}).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n    xhr.setRequestHeader(key, options.headers[key]);\n  });\n  xhr.send(options.data || <span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">return</span> xhr;\n}\n</code></pre>\n<p>Cette fonction offre un support basique de XHR :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> myXHR = ajax({\n  <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;api/users&quot;</span>,\n  <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    doStuff(<span class=\"hljs-built_in\">this</span>.responseText);\n  },\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    showError(<span class=\"hljs-built_in\">this</span>.status);\n  },\n});\n</code></pre>\n<h3>ES5 magic</h3>\n<p>ECMAScript 5 délivre des petites méthodes très intéressantes pour se simplifier\nla vie, fortement inspirées par ce qu'on a l'habitude de trouver dans les\nbibliothèques ayant connu l'âge d'or, comme\n<a href=\"http://prototypejs.org\">PrototypeJS</a> ou <a href=\"http://mootools.net\">MooTools</a>.</p>\n<p>Dès lors, plutôt qu'un ennuyeux :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> key, item;\n<span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> myObject) {\n  <span class=\"hljs-keyword\">if</span> (myObject.hasOwnProperty(key)) {\n    item = myObject[key];\n    <span class=\"hljs-comment\">// do something</span>\n  }\n}\n</code></pre>\n<p>on peut se contenter d'un :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">Object</span>.keys(myObject).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> item = myObject[i];\n  <span class=\"hljs-comment\">// do something</span>\n});\n</code></pre>\n<p>De même, on bénéficie de méthodes s'avérant très utiles, comme\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\"><code>Array.prototype.map</code>, <code>Array.prototype.reduce</code>, <code>Array.prototype.filter</code></a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object.create</code>, <code>Object.getPrototypeOf</code>, <code>Object.getOwnPropertyNames</code>, <code>Object.defineProperty</code></a>.\nSi cela t'intéresse, je t'invite vivement à te renseigner sur ces dernières. Et\nsi tu veux avoir plus de détails, read the fucking manual :\n<a href=\"http://es5.github.io\">http://es5.github.io</a>.</p>\n<h3>Des petits détails cools du côté des events</h3>\n<p>Avec <code>addEventListener</code>, on peut aussi passer un objet comme listener, avec\n<code>handleEvent</code> pour interface :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> myElementClickEvents = {\n  <span class=\"hljs-attr\">element</span>: myElement,\n  <span class=\"hljs-attr\">callbacks</span>: [],\n  <span class=\"hljs-attr\">handleEvent</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-built_in\">this</span>.callbacks.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n      item.call(self.element, evt);\n    });\n  },\n};\nmyElement.addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>, myElementClickEvents);\n\nmyElementClickEvents.callbacks.push(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(evt);\n});\n</code></pre>\n<p>Avec ça, on peut facilement garder une trace de ce qu'on passé comme listeners.</p>\n<h3>Du type checking ?</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> getClass = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">o</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(o);\n};\n<span class=\"hljs-keyword\">var</span> someString = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>);\n\n<span class=\"hljs-keyword\">typeof</span> someString; <span class=\"hljs-comment\">// &quot;object&quot;</span>\ngetClass(someString); <span class=\"hljs-comment\">// &quot;[object String]&quot;, sounds more reasonable</span>\n</code></pre>\n<h3>Petit bonus</h3>\n<p>Un petit bonus rien que pour toi : pour avoir une syntaxe plus sympathique et\nplus claire que les prototypes.</p>\n<p>En principe, on fait comme ça :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\">name</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.name = name;\n}\n\nAnimal.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">name</span>) </span>{\n  Animal.call(<span class=\"hljs-built_in\">this</span>, name);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">K</span>(<span class=\"hljs-params\"></span>) </span>{}\nK.prototype = Animal.prototype;\n\nCat.prototype = <span class=\"hljs-keyword\">new</span> K();\nCat.prototype.constructor = Cat;\nCat.prototype.type = <span class=\"hljs-string\">&quot;cat&quot;</span>;\n\n<span class=\"hljs-keyword\">var</span> myAnimal = <span class=\"hljs-keyword\">new</span> Animal(<span class=\"hljs-string\">&quot;Foo&quot;</span>);\n<span class=\"hljs-keyword\">var</span> myCat = <span class=\"hljs-keyword\">new</span> Cat(<span class=\"hljs-string\">&quot;Bar&quot;</span>);\n\nmyCat <span class=\"hljs-keyword\">instanceof</span> Cat; <span class=\"hljs-comment\">// true</span>\nmyCat <span class=\"hljs-keyword\">instanceof</span> Animal; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>Maintenant, à l'aide de deux petites méthodes :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// wow</span>\n<span class=\"hljs-comment\">//         many magic</span>\n<span class=\"hljs-comment\">//   very es5</span>\n<span class=\"hljs-comment\">//            wow</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">extend</span>(<span class=\"hljs-params\">object</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-built_in\">this</span>);\n  <span class=\"hljs-keyword\">if</span> (!object) <span class=\"hljs-keyword\">return</span> self;\n  <span class=\"hljs-built_in\">Object</span>.keys(object).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n    self[key] = object[key];\n  });\n  <span class=\"hljs-keyword\">return</span> self;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-built_in\">this</span>);\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> self.constructor == <span class=\"hljs-string\">&quot;function&quot;</span>) {\n    self.constructor.apply(self, <span class=\"hljs-built_in\">arguments</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> self;\n}\n\n<span class=\"hljs-keyword\">var</span> klass = {\n  <span class=\"hljs-attr\">create</span>: create,\n  <span class=\"hljs-attr\">extend</span>: extend,\n};\n</code></pre>\n<p>Tu peux faire ça :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> animal = klass.extend({\n  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name</span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.name = name;\n  },\n  <span class=\"hljs-attr\">getName</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;\n  },\n});\n\n<span class=\"hljs-keyword\">var</span> cat = animal.extend({\n  <span class=\"hljs-attr\">constructor</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name</span>) </span>{\n    animal.constructor.call(<span class=\"hljs-built_in\">this</span>, name);\n  },\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;cat&quot;</span>,\n});\n\n<span class=\"hljs-keyword\">var</span> myAnimal = animal.create(<span class=\"hljs-string\">&quot;Foo&quot;</span>);\n<span class=\"hljs-keyword\">var</span> myCat = cat.create(<span class=\"hljs-string\">&quot;Bar&quot;</span>);\n\ncat.isPrototypeOf(myCat); <span class=\"hljs-comment\">// true</span>\nanimal.isPrototypeOf(myCat); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>Voilà, j'espère que cela a pu attiser ta curiosité d'en apprendre plus sur le\nlangage lui-même et le DOM.</p>\n"}