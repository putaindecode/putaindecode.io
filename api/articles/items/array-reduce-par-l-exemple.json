{"slug":"array-reduce-par-l-exemple","filename":"2014-05-13-array-reduce-par-l-exemple","title":"Array.reduce par l'exemple","date":"Tue, 13 May 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-05-13T00:00:00.000Z","title":"Array.reduce par l'exemple","author":"lionelB","oldSlug":"js/array-reduce","slug":"array-reduce-par-l-exemple"},"body":"<p>Souvent méconnue, la fonction <code>Array#reduce</code> se révèle super pratique dès lors\nqu'on prenne un peu le temps de faire un peu plus connaissance. Ce n'est que\ndernièrement que je me suis rendu compte que reduce pouvait servir à bien plus\nde chose que ce qui était présenté dans les documentations.</p>\n<p>Voici donc un petit tour d'horizon des cas d'utilisation de cette fonction. Mais\navant cela, et histoire de faire les présentations, voici l'intro tirée de la\ndocumentation de\n<a href=\"https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Array/reduce\">MDN</a>.</p>\n<blockquote>\n<p><strong><em>Résumé</em></strong> La méthode reduce() applique une fonction sur un accumulateur et\nchaque valeur d'une liste (de la gauche vers la droite) de sorte à le réduire\nà une seule valeur.</p>\n</blockquote>\n<h2>Le classique: Opérer une somme sur un tableau</h2>\n<p>C'est souvent l'exemple qui illustre le plus les documentations. <code>Array#reduce</code>\nva permettre de parcourir le tableau, et pour chaque élément, appeler une\nfonction avec les paramètres suivants :</p>\n<ul>\n<li>le résultat de la précédente exécution de cette fonction (aussi appelé\nl'accumulateur).</li>\n<li>l'élément courant.</li>\n<li>l'index de l’élément courant.</li>\n<li>le tableau sur lequel on est entrain d'itérer</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> sum = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">memo, val</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> memo + val;\n});\n</code></pre>\n<p>En fait, <code>Array#reduce</code> accepte un deuxième argument après la fonction de\ncallback. Cet argument sera utilisé comme accumulateur lors de la première\nexécution. Et c'est justement cela qui est intéressant et qui rend le reduce\nplutôt pratique.</p>\n<h2>Chercher/remplacer avec plusieurs motifs</h2>\n<p>Imaginons que vous souhaitiez appliquer plusieurs opérations de\nrechercher/remplacer sur une chaine de caractère. Si vous avez une liste de\nmotifs et leur valeur correspondante, reduce permet de faire cela assez\nsimplement, genre en 3 lignes.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-string\">&quot;I&#x27;m %USER% and I live in %COUNTRY%&quot;</span>;\n<span class=\"hljs-keyword\">var</span> data = [\n  { <span class=\"hljs-attr\">token</span>: <span class=\"hljs-string\">&quot;%USER%&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;lionel&quot;</span> },\n  { <span class=\"hljs-attr\">token</span>: <span class=\"hljs-string\">&quot;%COUNTRY%&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;France&quot;</span> },\n];\n\n<span class=\"hljs-keyword\">var</span> output = data.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">memo, item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> memo.replace(item.token, item.value);\n}, input);\n</code></pre>\n<h2>Réaliser un groupBy</h2>\n<p>Reduce peut aussi nous permettre d'effectuer des manipulations comme des groupBy\nsur un tableau (bon avec l'aide de petits helpers).</p>\n<p>Prenons comme point de départ cette liste de stat représentant un découpage par\nsite et par famille de navigateurs. Nous aimerions pouvoir grouper les résultats\npar site :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> stats = [\n  { <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;google.fr&quot;</span>, <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">&quot;Chrome&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;50%&quot;</span> },\n  { <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;google.fr&quot;</span>, <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">&quot;FireFox&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;30%&quot;</span> },\n  { <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;google.fr&quot;</span>, <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">&quot;Internet Explorer&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;20%&quot;</span> },\n  { <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;mozilla.fr&quot;</span>, <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">&quot;FireFox&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;60%&quot;</span> },\n  { <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;mozilla.fr&quot;</span>, <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">&quot;Internet Explorer&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;20%&quot;</span> },\n  { <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;microsoft.fr&quot;</span>, <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">&quot;Chrome&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;10%&quot;</span> },\n  { <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;microsoft.fr&quot;</span>, <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-string\">&quot;FireFox&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;20%&quot;</span> },\n];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compareSite</span>(<span class=\"hljs-params\">site, item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> site === item.site;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">containSite</span>(<span class=\"hljs-params\">site, items</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> items.some(compareSite.bind(<span class=\"hljs-literal\">null</span>, site));\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">groupBySite</span>(<span class=\"hljs-params\">memo, item</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> site = memo.filter(containSite.bind(<span class=\"hljs-literal\">null</span>, item.site));\n  <span class=\"hljs-keyword\">if</span> (site.length &gt; <span class=\"hljs-number\">0</span>) {\n    site[<span class=\"hljs-number\">0</span>].push(item);\n  } <span class=\"hljs-keyword\">else</span> {\n    memo.push([item]);\n  }\n  <span class=\"hljs-keyword\">return</span> memo;\n}\n<span class=\"hljs-comment\">// Nous utilisons un tableau vide comme accumulateur</span>\n<span class=\"hljs-keyword\">var</span> results = stats.reduce(groupBySite, []);\n</code></pre>\n<p>Concernant cet exemple, on pouvait arriver au même résultat en déclarant une\nvariable qui aurait le rôle d'accumulateur et un Array.forEach :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> results = {};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">groupBySite</span>(<span class=\"hljs-params\">item</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> site = results.filter(containSite.bind(<span class=\"hljs-literal\">null</span>, item.site));\n  <span class=\"hljs-keyword\">if</span> (site.length &gt; <span class=\"hljs-number\">0</span>) {\n    site[<span class=\"hljs-number\">0</span>].push(item);\n  } <span class=\"hljs-keyword\">else</span> {\n    results.push([item]);\n  }\n}\n\nstats.forEach(groupBySite);\n</code></pre>\n<p>Mais ici, la fonction <code>groupBySite</code> devient bien moins ré-utilisable car elle\ndépend directement de la variable results, déclarée au dessus.</p>\n<h3>À noter</h3>\n<p>L'utilisation de <code>Function.bind</code> nous permet de réutiliser les fonctions\n<code>compareSite</code> et <code>containSite</code> en fixant leur premier paramètre. Ainsi\n<code>compareSite.bind(null, 'mozilla.fr')</code> équivaut à :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compareMozilla</span>(<span class=\"hljs-params\">item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;mozilla.fr&quot;</span> === item.site;\n}\n</code></pre>\n<p>D'ailleurs, on pourrait assez simplement rendre <code>groupBySite</code> générique pour la\nréutiliser avec un <code>groupByBrowser</code>.</p>\n<h2>Manipuler la structure des données</h2>\n<p><code>Array#reduce</code> peut aussi permettre de manipuler la structure de vos données et\npouvoir la modifier. Par exemple, voici une liste de sites avec, pour chaque\nsite, le pourcentage de visite par navigateur. Imaginons que nous souhaitons\nchanger la structure de l'objet pour grouper ces résultats par type de\nnavigateur plutôt que par site. Là encore <code>Array#reduce</code> s'avère plutôt\npratique.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> data = {\n  <span class=\"hljs-string\">&quot;google.fr&quot;</span>: [\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Chrome&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;50%&quot;</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;FireFox&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;30%&quot;</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Internet Explorer&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;20%&quot;</span> },\n  ],\n  <span class=\"hljs-string\">&quot;mozilla.fr&quot;</span>: [\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Chrome&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;20%&quot;</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;FireFox&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;60%&quot;</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Internet Explorer&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;20%&quot;</span> },\n  ],\n  <span class=\"hljs-string\">&quot;microsoft.fr&quot;</span>: [\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Chrome&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;10%&quot;</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;FireFox&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;20%&quot;</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Internet Explorer&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;70%&quot;</span> },\n  ],\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">groupByBrowser</span>(<span class=\"hljs-params\">site, memo, browser</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!memo[browser.name]) {\n    memo[browser.name] = [];\n  }\n  memo[browser.name].push({ <span class=\"hljs-attr\">site</span>: site, <span class=\"hljs-attr\">value</span>: browser.value });\n  <span class=\"hljs-keyword\">return</span> memo;\n}\n\n<span class=\"hljs-keyword\">var</span> results = <span class=\"hljs-built_in\">Object</span>.keys(data).reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">memo, site</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> data[site].reduce(groupByBrowser.bind(<span class=\"hljs-literal\">null</span>, site), memo);\n}, {});\n</code></pre>\n<p>J'espère que vous avez apprécié ces quelques exemples d'utilisation de\n<code>Array#reduce</code>. Et n'hésitez pas à partager vos cas d'utilisations en éditant\nl'article ou via les commentaires !</p>\n"}