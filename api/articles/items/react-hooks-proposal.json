{"slug":"react-hooks-proposal","filename":"2018-11-06-react-hooks-proposal","title":"React Hooks (proposal)","date":"Tue, 06 Nov 2018 00:00:00 GMT","draft":false,"meta":{"date":"2018-11-06T00:00:00.000Z","title":"React Hooks (proposal)","author":"magsout","oldSlug":"js/react/react-hooks","slug":"react-hooks-proposal"},"body":"<p>Cette nouvelle fonctionnalité vient d'être présentée lors de la\n<a href=\"https://conf.reactjs.org/\">React Conf 2018</a>.</p>\n<p>Disponible dans React 16.7.0 en alpha, une\n<a href=\"https://github.com/reactjs/rfcs/blob/hooks-rfc/text/0000-react-hooks.md\">RFC</a>\nest d'ailleurs ouverte afin de recueillir l'avis de la communauté.</p>\n<h3>Qu'est-ce que c'est ?</h3>\n<p>La question que se pose tout développeur avant de définir un composant est : une\nclasse ou une fonction ?</p>\n<p>La façon la plus simple d'écrire un composant est la fonction :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Form</span>(<span class=\"hljs-params\">props</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;putaindecode&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>Mais on peut également utiliser les classes ES6 pour écrire la même chose :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Form</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;putaindecode&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<p>L'avantage des classes est la possibilité d'utiliser les fonctionnalités de\nReact comme par exemple le\n<a href=\"https://reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class\">lifecycle</a>\nou encore le\n<a href=\"https://reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class\">state</a>.</p>\n<p>C'est très précisement à ce niveau qu'interviennent les hooks. Il est dorénavant\npossible (enfin, ça le sera bientôt) d'avoir accès à ces deux concepts (mais pas\nque, en gros toutes les fonctionnalités de React comme les <code>ref</code> par exemple) dans\nles fonctions.</p>\n<p>Petit bémol : comme le précise l'équipe de React, ne vous jetez pas tout de suite\ndans le refactorisation de vos classes. L'utilisation des hooks dans les\nfonctions ne signe pas pour autant la fin des classes.</p>\n<p>Il faut cependant avouer qu'on est pas loin non plus d'une utilisation moins\nintensives des classes surtout si on ajoute en plus\n<a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\">React.memo</a>\nqui est l'intégration des <code>PureComponent/shouldComponentUpdate</code> dans les\nfonctions.</p>\n<h3>Et dans la pratique ?</h3>\n<h4><code>state</code> et <code>useState</code></h4>\n<p>Partons de notre exemple précédent en y rajoutant l'utilisation d'un state :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Form</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n    <span class=\"hljs-built_in\">super</span>(props);\n    <span class=\"hljs-built_in\">this</span>.state = {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;putaindecode&quot;</span>,\n    };\n    <span class=\"hljs-built_in\">this</span>.handleNameChange = <span class=\"hljs-built_in\">this</span>.handleNameChange.bind(<span class=\"hljs-built_in\">this</span>);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">handleNameChange</span>(<span class=\"hljs-params\">e</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.setState({\n      <span class=\"hljs-attr\">name</span>: e.target.value,\n    });\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.name}</span>\n          <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;firstname&quot;</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleNameChange}</span>\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<p>Nous venons d'écrire un composant très simple qui met à jour un élément\n<code>&lt;input /&gt;</code>. On a dû, pour cela, définir dans le constructor une valeur par défaut\ndans notre objet <code>state</code>, définir une fonction pour gérer l'événement <code>onChange</code>\nsur notre <code>&lt;input /&gt;</code> sans oublier de bind notre fonction pour le scope de\n<code>this</code>.</p>\n<p>Pfiou, les classes c'est bien, mais ça fait un peu de boilerplate quand même.</p>\n<p>Transformons cette classe en fonction et voyons le changement opéré grâce à nos\nfameux hooks.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Form</span>(<span class=\"hljs-params\">props</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [name, setName] = useState(<span class=\"hljs-string\">&quot;putaindecode&quot;</span>);\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleNameChange</span>(<span class=\"hljs-params\">e</span>) </span>{\n    setName(e.target.value);\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;firstname&quot;</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleNameChange}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>Attardons-nous un peu plus sur ce <code>useState</code>.</p>\n<p>C'est le premier hook introduit par React qui nous permet d'utiliser le state\ndans les fonctions React.</p>\n<p>Il prend un argument qui est la valeur par défaut de notre state.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// fonction</span>\nuseState(<span class=\"hljs-string\">&quot;putaindecode&quot;</span>)\n\n<span class=\"hljs-comment\">// classe</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n  <span class=\"hljs-built_in\">this</span>.state = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;putaindecode&quot;</span>\n  }\n}\n</code></pre>\n<p>Il retourne un array comportant 2 éléments : le state courant (<code>name</code>) ainsi que\nla fonction qui va permettre le changement de notre state (<code>setName</code>).</p>\n<p>Et voilà, rien de plus, rien de moins. Notre fonction <code>stateless</code> devient grâce\nau hook <code>useState</code> un composant avec un state.</p>\n<p>Cette fonction React fait au final exactement la même chose que notre classe\nprécédente.</p>\n<h3>Lifecyle et <code>useEffect</code></h3>\n<p>Ajoutons un soupçon de lifecycle dans notre exemple.</p>\n<p>Mettons à jour notre classe en utilisant les méthodes <code>componentDidMount()</code> et\n<code>componentWillUnmount()</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Form</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n    <span class=\"hljs-built_in\">super</span>(props);\n    <span class=\"hljs-built_in\">this</span>.state = {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;putaindecode&quot;</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-built_in\">window</span>.innerWidth,\n    };\n    <span class=\"hljs-built_in\">this</span>.handleNameChange = <span class=\"hljs-built_in\">this</span>.handleNameChange.bind(<span class=\"hljs-built_in\">this</span>);\n    <span class=\"hljs-built_in\">this</span>.handleResize = <span class=\"hljs-built_in\">this</span>.handleResize.bind(<span class=\"hljs-built_in\">this</span>);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">handleNameChange</span>(<span class=\"hljs-params\">e</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.setState({\n      <span class=\"hljs-attr\">name</span>: e.target.value,\n    });\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&quot;resize&quot;</span>, <span class=\"hljs-built_in\">this</span>.handleResize);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">&quot;resize&quot;</span>, <span class=\"hljs-built_in\">this</span>.handleResize);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">handleResize</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.setState({\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-built_in\">window</span>.innerWidth,\n    });\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n          <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.name}</span>\n          <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;firstname&quot;</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleNameChange}</span>\n        /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{this.state.width}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<p>On veut donc surveiller le redimensionnement de notre navigateur et afficher sa\nrésolution.</p>\n<p>Les bonnes pratiques nous conseillent de souscrire à notre événements dans la\nmethode <code>componentDidMount()</code> et pour éviter les fuites mémoires inutiles de\ns'en désabonner dans la méthode <code>componentWillUnmount()</code>.</p>\n<p>Comme précédemment on n'oublie pas d'initialiser la valeur dans notre state et\nde bind notre fonction <code>handleResize()</code>.</p>\n<p>Même exercice, transformons tout cela pour l'appliquer à notre function.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Form</span>(<span class=\"hljs-params\">props</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [name, setName] = useState(<span class=\"hljs-string\">&quot;putaindecode&quot;</span>);\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleNameChange</span>(<span class=\"hljs-params\">e</span>) </span>{\n    setName(e.target.value);\n  }\n\n  <span class=\"hljs-keyword\">const</span> [width, setWidth] = useState(<span class=\"hljs-built_in\">window</span>.innerWidth);\n  useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> handleResize = <span class=\"hljs-function\">() =&gt;</span> setWidth(<span class=\"hljs-built_in\">window</span>.innerWidth);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&quot;resize&quot;</span>, handleResize);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">&quot;resize&quot;</span>, handleResize);\n    };\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;firstname&quot;</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleNameChange}</span>\n      /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{this.state.width}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>Pour être conforme à notre classe nous avons de nouveau utilisé le hook\n<code>useState</code> pour garder un state de notre valeur <code>width</code> et déterminer son setter\n(<code>setWidth</code>).</p>\n<p>Pour pouvoir jouer avec le lifecyle nous ajoutons cette fois-ci\n<a href=\"https://reactjs.org/docs/hooks-effect.html\">useEffect</a>. Ce hook suit la même\nlogique que <code>componentDidMount</code>, <code>componentDidUpdate</code> et <code>componentWillUnmount</code>.</p>\n<p>Il va donc s'exécuter :</p>\n<ul>\n<li>après le chargement de notre composant ;</li>\n<li>après chaque mise à jour de notre composant ;</li>\n<li>à la destruction de notre composant.</li>\n</ul>\n<p>Petit précision sur le <code>return</code> de notre hook : il faut considérer cela comme un\nmécanisme (optionnelle) de cleanup.</p>\n<p>Concrètement, dans notre cas, c'est ici qu'on va pouvoir de se désabonner de notre\névénement.</p>\n<p>Grace à ces deux hooks, nous nous avons donc accès aux concepts de <code>state</code> et du\n<code>lifecycle</code> dans une fonction.</p>\n<p>React a également mis à disposition un autre hook\n<a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\">useContext</a> qui\npermet de souscrire à\n<a href=\"https://putaindecode.io/fr/articles/js/react/react-new-context-api/\">React context</a>\nen évitant l'imbrication des <code>Consumer</code> et <code>Provider</code>.</p>\n<p>Tous ces hooks sont, bien entendu, disponibles dans la version <code>16.7.0</code> alpha de\nReact.</p>\n<p>Ils en existent d'autre qui sont listés ici :\n<a href=\"https://reactjs.org/docs/hooks-reference.html#additional-hooks\">https://reactjs.org/docs/hooks-reference.html#additional-hooks</a></p>\n<h3>Les deux petites règles</h3>\n<p>Vous l'avez sans doute remarqué mais tous ces hooks commencent par <code>use</code>. Ce\npréfixe est primordial pour considérer votre hook comme un hook.</p>\n<p>De plus un hook ne doit ni se trouver dans une condition ni dans une boucle et\nne doit s'appeler que dans une fonction React.</p>\n<p>Il existe un plugin <code>ESLint</code>\n<a href=\"https://reactjs.org/docs/hooks-rules.html#eslint-plugin\">eslint-plugin-react-hooks</a>\nqui permet d'être sûr que ces régles soient bien respectées.</p>\n<h3>Custom Hooks</h3>\n<p>Naturellement il est tout à fait possible de créer soi-même son propre hook, une\n<a href=\"https://github.com/rehooks\">orga</a> sur GitHub existe ayant pour objectif de\nrecenser tous ces custom hooks.</p>\n<p>Revenons à notre exemple pour voir si on ne pourrait pas le modifier un peu pour\ntenter de créer un hook.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Form</span>(<span class=\"hljs-params\">props</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [name, setName] = useState(<span class=\"hljs-string\">&quot;putaindecode&quot;</span>)\n  <span class=\"hljs-keyword\">const</span> width = useWidth()\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleNameChange</span>(<span class=\"hljs-params\">e</span>) </span>{\n    setName(e.target.value)\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>&gt;</span>Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inputName&quot;</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;firstname&quot;</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleNameChange}</span>\n      /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        {this.state.width}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useWidth</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [width, setWidth] = useState(<span class=\"hljs-built_in\">window</span>.innerWidth)\n  useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> handleResize = <span class=\"hljs-function\">() =&gt;</span> setWidth(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&quot;resize&quot;</span>, handleResize)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">&quot;resize&quot;</span>, handleResize)\n    }\n  })\n\n  <span class=\"hljs-keyword\">return</span> width\n}\n</code></pre>\n<p>En externalisant notre partie de code sur le calcul de <code>width</code>, on vient tout\nsimplement de créer un hook.</p>\n<h4>Et la conclusion ?</h4>\n<p>Les hooks présentés dans cet article permettent donc de s'abstraire des classes.</p>\n<p>Elles ouvrent la voix à un peu plus de généricité et à des tests\n<a href=\"https://twitter.com/controlplusb/status/1057922325474148353\">orientés sur le comportement plus que sur l'implémentation</a>.</p>\n<p>L'équipe de React a très bien\n<a href=\"https://reactjs.org/docs/hooks-intro.html\">documenté</a> tout cela. Tous ces\nexemples proviennent de l'excellente conférence de\n<a href=\"https://mobile.twitter.com/dan_abramov\">Dan Abramov</a>\n<a href=\"https://www.youtube.com/watch?v=dpw9EHDh2bM\">React Today and Tomorrow and 90% Cleaner React</a>\nque je vous invite vivement à regarder.</p>\n<p>Comme precisé en début d'article, les hooks sont une proposition faite par\nl'équipe de React. Tout est disponible dans une version alpha, ce qui implique\nune possibilité dans le changement de l'API voir même du noms des hooks.</p>\n"}