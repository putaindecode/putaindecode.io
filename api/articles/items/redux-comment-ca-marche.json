{"slug":"redux-comment-ca-marche","filename":"2016-06-09-redux-comment-ca-marche","title":"Redux, comment ça marche ?","date":"Thu, 09 Jun 2016 00:00:00 GMT","draft":false,"meta":{"date":"2016-06-09T00:00:00.000Z","title":"Redux, comment ça marche ?","author":"bloodyowl","oldSlug":"js/redux","slug":"redux-comment-ca-marche"},"body":"<p>Alors si vous faites du développement web et que vous ne vivez pas dans une\ncave, vous avez certainement déjà entendu parler de\n<a href=\"http://redux.js.org\">Redux</a>.</p>\n<h2>Kesako ?</h2>\n<p>Redux est une implémentation dérivée de Flux. Ça permet de créer un <strong>Store</strong>\nqui contient un <strong>état</strong>, réagit à des <strong>actions dispatchées</strong>, et auquel on\npeut <strong>souscrire</strong> pour être notifié des changements. Il permet également\nl'ajout de <strong>middlewares</strong>, qui peuvent en quelque sorte <em>pre-process</em> les\nactions.</p>\n<p>Du coup, on va écrire une implémentation de Redux pour mieux décomposer son\nfonctionnement.</p>\n<h2>1. Gérer l'état</h2>\n<p>Redux se distingue par son mécanisme d'update de l'état, puisqu'il est décrit\ndans des <strong>reducers</strong>. Vous connaissez\n<a href=\"/fr/articles/js/array-reduce/\"><code>Array.prototype.reduce</code></a> ? Eh ben votre\n<strong>reducer</strong> a exactement la même signature que la fonction de <code>reduce</code>.</p>\n<p>Pour faire simple, votre état vaudra toujours :</p>\n<pre><code class=\"hljs language-javascript\">dispatchedActions.reduce(reducer, <span class=\"hljs-literal\">undefined</span>);\n</code></pre>\n<p>Si ça vous paraît un peu abstrait, prenons un exemple tout con de reducer :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// on part de 0</span>\n<span class=\"hljs-keyword\">const</span> initialState = { <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span> };\n\n<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-function\">(<span class=\"hljs-params\">state = initialState, action</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">switch</span> (action.type) {\n    <span class=\"hljs-comment\">// selon l&#x27;action …</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;INCREMENT&quot;</span>:\n      <span class=\"hljs-comment\">// … on retourne un nouvel état incrémenté</span>\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">counter</span>: state.counter + <span class=\"hljs-number\">1</span> };\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;DECREMENT&quot;</span>:\n      <span class=\"hljs-comment\">// … ou décrémenté</span>\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">counter</span>: state.counter - <span class=\"hljs-number\">1</span> };\n    <span class=\"hljs-keyword\">default</span>:\n      <span class=\"hljs-comment\">// ou l&#x27;état actuel, si l&#x27;on n&#x27;y touche pas</span>\n      <span class=\"hljs-keyword\">return</span> state;\n  }\n};\n</code></pre>\n<p>Le petit <code>state = initialState</code> c'est un\n<a href=\"/fr/articles/js/es2015/defaults/\">paramètre avec une valeur par défaut</a>, si\nvous avez bien vu le bout de code avec le <code>reduce</code> un peu plus haut, on passe la\nvaleur <code>undefined</code> comme accumulateur initial, ça permet d'avoir un state valant\n<code>initialState</code> au passage de la première action.</p>\n<p>Le <code>switch</code> permet de retourner un nouvel état selon les actions passées, avec\nun <code>default</code> qui retourne l'état actuel, dans le cas où on se fout de l'action\ndans ce reducer.</p>\n<p>C'est parti pour implémenter ça :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> createStore = <span class=\"hljs-function\"><span class=\"hljs-params\">reducer</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// on balance une première action &quot;opaque&quot;,</span>\n  <span class=\"hljs-comment\">// qui ne sera pas traitée par le reducer, histoire de commencer avec un état</span>\n  <span class=\"hljs-keyword\">let</span> state = reducer(<span class=\"hljs-literal\">undefined</span>, { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;@@INIT&quot;</span> });\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-comment\">// une méthode pour dispatcher les actions</span>\n    <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> {\n      state = reducer(state, action);\n    },\n    <span class=\"hljs-comment\">// une méthode pour récupérer le state</span>\n    <span class=\"hljs-attr\">getState</span>: <span class=\"hljs-function\">() =&gt;</span> state,\n  };\n};\n</code></pre>\n<p>Super, on peut écrire et lire notre état.</p>\n<h2>2. Le mécanisme de souscription</h2>\n<p>Pour pouvoir signaler aux intéressés que des updates ont eu lieu sur l'état, on\ndoit ajouter un mécanisme de souscription : un bête event emitter.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> createStore = <span class=\"hljs-function\"><span class=\"hljs-params\">reducer</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> state = reducer(<span class=\"hljs-literal\">undefined</span>, { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;@@INIT&quot;</span> });\n  <span class=\"hljs-comment\">// on crée un `Set` où l&#x27;on va stocker les listeners</span>\n  <span class=\"hljs-keyword\">const</span> subscribers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> {\n      state = reducer(state, action);\n      <span class=\"hljs-comment\">// à chaque dispatch, on appelle les subscribers</span>\n      subscribers.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">func</span> =&gt;</span> func());\n    },\n    <span class=\"hljs-attr\">subscribe</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">func</span> =&gt;</span> {\n      <span class=\"hljs-comment\">// on ajoute `func` à la liste de subscribers</span>\n      subscribers.add(func);\n      <span class=\"hljs-comment\">// et on retourne une fonction permettant d&#x27;unsubscribe</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n        subscribers.delete(func);\n      };\n    },\n    <span class=\"hljs-attr\">getState</span>: <span class=\"hljs-function\">() =&gt;</span> state,\n  };\n};\n</code></pre>\n<p>Ayé, le mécanisme est en place.</p>\n<h2>3. Combiner les reducers</h2>\n<p>Maintenant ce qui serait pas mal, ce serait de permettre d'avoir plusieurs\nreducers, afin de pouvoir les découper et d'éviter d'avoir du gros code bloated\nqui tâche. Pour ce faire, on va créer la fonction <code>combineReducers</code> qui va\nprendre un objet contenant des reducers, et transformer ça en un seul reducer\nqui va retourner un objet de la même forme, avec l'état retourné par le reducer\nde la même clé.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> combineReducers = <span class=\"hljs-function\"><span class=\"hljs-params\">reducers</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> reducersKeys = <span class=\"hljs-built_in\">Object</span>.keys(reducers);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">state = {}, action</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> reducersKeys.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, key</span>) =&gt;</span> {\n      acc[key] = reducers[key](state[key], action);\n      <span class=\"hljs-keyword\">return</span> acc;\n    }, {});\n  };\n};\n</code></pre>\n<p>Maintenant, on peut bien séparer ses reducers :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { users } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./reducers/user&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { tweets } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./reducers/tweets&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> reducer = combineReducers({\n  users,\n  tweets,\n});\n\n<span class=\"hljs-keyword\">const</span> store = createStore(reducer);\n</code></pre>\n<h2>4. Permettre l'ajout de middlewares</h2>\n<p>Les middlewares apportent toute la liberté de personalisation de Redux. L'un des\nplus populaires est le\n<a href=\"https://github.com/gaearon/redux-thunk\"><em>thunk middleware</em></a>, qui permet de\npasser une fonction à la place d'une action, et de dispatcher depuis cette\nfonction, ce qui peut s'avérer très utile pour gérer des réponses asynchrones.</p>\n<p>On va donc créer une fonction <code>applyMiddleware</code>, qui va enrichir un store en\najoutant une sorte de hook sur sa méthode dispatch.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// compose(a, b, c) équivaut à (...args) =&gt; a(b(c(...args)))</span>\n<span class=\"hljs-keyword\">const</span> compose = <span class=\"hljs-function\">(<span class=\"hljs-params\">...funcs</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> last = funcs[funcs.length - <span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">const</span> rest = funcs.slice(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span>\n    rest.reduceRight(<span class=\"hljs-function\">(<span class=\"hljs-params\">composed, f</span>) =&gt;</span> f(composed), last(...args));\n};\n\n<span class=\"hljs-keyword\">const</span> applyMiddleware = <span class=\"hljs-function\">(<span class=\"hljs-params\">...middlewares</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">store</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// cette API sera passée à chaque middleware, afin qu&#x27;il puisse récupérer</span>\n    <span class=\"hljs-comment\">// l&#x27;état en cours et dispatcher des actions</span>\n    <span class=\"hljs-keyword\">const</span> middlewareAPI = {\n      <span class=\"hljs-attr\">getState</span>: store.getState,\n      <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> dispatch(action),\n    };\n    <span class=\"hljs-keyword\">const</span> chain = middlewares.map(<span class=\"hljs-function\"><span class=\"hljs-params\">middleware</span> =&gt;</span> middleware(middlewareAPI));\n    <span class=\"hljs-keyword\">let</span> dispatch = compose(...chain)(store.dispatch);\n    <span class=\"hljs-keyword\">return</span> {\n      ...store,\n      dispatch,\n    };\n  };\n};\n</code></pre>\n<blockquote>\n<p>NOTE: l'API de Redux prend <code>createStore</code> plutôt que <code>store</code> en paramètre, la\ndifférence est volontaire dans cette démarche de simplification</p>\n</blockquote>\n<p>Voilà, maintenant on peut faire</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> thunk = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ dispatch, getState }</span>) =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">next</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> action === <span class=\"hljs-string\">&quot;function&quot;</span>) {\n    <span class=\"hljs-keyword\">return</span> action(dispatch, getState);\n  }\n  <span class=\"hljs-keyword\">return</span> next(action);\n};\n\n<span class=\"hljs-keyword\">const</span> store = applyMiddleware(thunk)(createStore(reducer));\n\n<span class=\"hljs-comment\">// et maintenant on peut faire</span>\nstore.dispatch(<span class=\"hljs-function\">(<span class=\"hljs-params\">dispatch, getState</span>) =&gt;</span> {\n  dispatch({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;FOO&quot;</span> });\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    dispatch({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;BAR&quot;</span> });\n  });\n});\n</code></pre>\n<p>Voilà voilà, j'espère que cet article a pu vous éclairer un petit peu sur le\nfonctionnement de Redux et vous permettra de l'aborder avec plus de serénité.</p>\n<p>Zoub'</p>\n"}