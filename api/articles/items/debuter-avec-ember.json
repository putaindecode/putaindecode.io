{"slug":"debuter-avec-ember","filename":"2014-10-20-debuter-avec-ember","title":"Débuter avec Ember","date":"Mon, 20 Oct 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-10-20T00:00:00.000Z","title":"Débuter avec Ember","author":"bmeurant","oldSlug":"js/ember","slug":"debuter-avec-ember"},"body":"<p>Démarrer une\n<a href=\"http://en.wikipedia.org/wiki/Single-page_application\">Single Page Application</a>\naujourd'hui ça commence souvent par : &quot;mais quel putain de framework il faut que\nje prenne ?&quot; Et, vu que c'est pas ça qui manque, ça se complique !</p>\n<p>Parmi les multiples <a href=\"/fr/articles/js/react/\">technos disponibles</a> il y a\n<a href=\"http://emberjs.com\">Ember</a>. Pour que le choix ne se résume pas à prendre celui\nqui a le plus joli logo ou qui génère le plus de spam sur votre Twitter, on vous\npropose de découvrir <a href=\"http://emberjs.com\">Ember</a>. Dans les posts à venir on\nverra comment construire concrètement une application avec ce framework.</p>\n<h2>Les fondamentaux</h2>\n<p>Parce que l'approche &quot;tête la première&quot; c'est bien mais que comprendre un\nminimum ce qu'on fait c'est encore mieux, il me paraît sage de commencer par\nexpliquer la philosophie et les principaux éléments du framework, sous peine de\nse prendre un bon vieux <a href=\"http://en.wikipedia.org/wiki/RTFM\">RTFM</a> sur le coin du\npif, comme ça, en passant.</p>\n<p><a href=\"http://emberjs.com\">Ember</a> se définit comme : &quot;A framework for creating\n<strong>ambitious</strong> web applications&quot; et ça, ça claque ! Mais je vois bien que ça ne\nsuffit pas à vous convaincre alors je vais détailler un peu. Bon alors, bien que\nce soit le mot &quot;ambitious&quot; qui soit mis en gras, deux autres trucs me paraissent\nencore plus importants :</p>\n<ul>\n<li><p><strong>web</strong> : l'une des caractéristiques majeures d'<a href=\"http://emberjs.com\">Ember</a>\nest son attachement au web et aux URL en particulier. <strong>Les URL et donc le\nrouteur sont au cœur d'Ember</strong> là ou bien d'autres frameworks les considèrent\nau mieux comme un addon important.</p></li>\n<li><p><strong>framework</strong> : <a href=\"http://emberjs.com\">Ember</a> est réellement un framework. Pas\nune lib, pas une colonne vertébrale, pas une boîte à outils : un framework !\n<a href=\"http://emberjs.com\">Ember</a> propose un véritable modèle de développement que\nvous allez tout de suite adopter ... ou rejeter (au moins ça aura le mérite\nd'être clair).</p></li>\n</ul>\n<h3>Conventions de nommage</h3>\n<p>Ce modèle de développement commence par les conventions de nommage.\n<a href=\"http://emberjs.com\">Ember</a> applique en effet le principe de &quot;<em>conventions over\nconfiguration</em>&quot; et repose sur un nommage cohérent des différents composants de\nvotre application. Et finalement, quand on y réflechit bien, la cohérence, ça\nn'a pas que des mauvais côtés.</p>\n<p>Typiquement pour une URL <code>test</code>, <a href=\"http://emberjs.com\">Ember</a> s'attend à trouver\nune <code>TestRoute</code>, un <code>TestController</code>, un gabarit <code>test</code>. Jusqu'ici, tout va\nbien.</p>\n<p>Curieux ? -&gt;\n<a href=\"http://emberjs.com/guides/concepts/naming-conventions/\">doc officielle</a>.</p>\n<h3>Modèles</h3>\n<p>Un modèle est un objet avec des propriétés contenant des données métier. Le\nmodèle est ensuite passé au gabarit pour être rendu par lui en HTML.\nTypiquement, les modèles peuvent être récupérés d'un back end via une API REST\nJSON via <a href=\"https://github.com/emberjs/data\">Ember Data</a> mais pas que.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> Book = DS.Model.extend({\n  <span class=\"hljs-attr\">title</span>: DS.attr(<span class=\"hljs-string\">&quot;string&quot;</span>),\n  <span class=\"hljs-attr\">publicationDate</span>: DS.attr(<span class=\"hljs-string\">&quot;date&quot;</span>),\n  <span class=\"hljs-attr\">author</span>: DS.attr(<span class=\"hljs-string\">&quot;string&quot;</span>),\n  <span class=\"hljs-attr\">publisher</span>: DS.attr(<span class=\"hljs-string\">&quot;string&quot;</span>),\n  <span class=\"hljs-attr\">summary</span>: DS.attr(<span class=\"hljs-string\">&quot;string&quot;</span>),\n});\n</code></pre>\n<p>Assoifé de connaissances ? -&gt;\n<a href=\"http://emberjs.com/guides/models/\">doc officielle</a>.</p>\n<h3>Routeur</h3>\n<p>Le routeur permet de faire correspondre à une URL un ensemble de gabarits\nimbriqués permettant le rendu des modèles associés à chacun de ces gabarits.</p>\n<p>L'exemple suivant permet le rendu des URLs :</p>\n<ul>\n<li><code>/books</code></li>\n<li><code>/books/:book_id</code></li>\n<li><code>/books/:book_id/edit</code></li>\n<li><code>/books/create</code></li>\n</ul>\n<pre><code class=\"hljs language-js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.resource(<span class=\"hljs-string\">&quot;books&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.resource(<span class=\"hljs-string\">&quot;book&quot;</span>, { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/:book_id&quot;</span> }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">this</span>.route(<span class=\"hljs-string\">&quot;edit&quot;</span>);\n    });\n    <span class=\"hljs-built_in\">this</span>.route(<span class=\"hljs-string\">&quot;create&quot;</span>);\n  });\n});\n</code></pre>\n<h3>Routes</h3>\n<p>Les routes associent un modèle à un gabarit et sont également impliquées dans\nles transitions entre les différentes URL (et donc les différents états) de\nl'application. Elles gèrent notamment un certain nombre d'opérations sur un\nmodèle lors de ces transitions.</p>\n<pre><code class=\"hljs language-js\">App.BooksRoute = Ember.Route.extend({\n  <span class=\"hljs-attr\">model</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.store.find(<span class=\"hljs-string\">&quot;book&quot;</span>);\n  },\n});\n</code></pre>\n<p>Intrigué ? -&gt; <a href=\"http://emberjs.com/guides/routing/\">doc officielle</a>.</p>\n<h3>Contrôleurs</h3>\n<p>Le contrôleur gère l'état de l'application. Il est situé entre la route dont il\nrécupère le modèle et le gabarit dont il répond aux appels. Les données du\ncontrôleur sont accessibles au gabarit au même titre que le modèle.</p>\n<p>Le contrôleur est par exemple responsable du traitement des actions effectuées\npar l'utilisateur sur l'interface rendue par le gabarit :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> {{<span class=\"hljs-attr\">action</span> &quot;<span class=\"hljs-attr\">sort</span>&quot;}}&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<pre><code class=\"hljs language-js\">App.BooksController = Ember.ArrayController.extend({\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-comment\">// appelé lors du clic sur le bouton</span>\n    <span class=\"hljs-attr\">sort</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        ...\n    }\n  }\n});\n</code></pre>\n<p>Perdu ? -&gt; <a href=\"http://emberjs.com/guides/controllers/\">doc officielle</a>.</p>\n<h3>Vues</h3>\n<p>Il est très rare d'avoir à définir des vues en <a href=\"http://emberjs.com\">Ember</a> parce\nque les gabarits <a href=\"http://handlebarsjs.com/\">Handlebars</a> sont surpuissants et que\nles contrôleurs se chargent de la gestion de l'état de l'application.</p>\n<p>Vous en voulez quand même ? -&gt;\n<a href=\"http://emberjs.com/guides/views/\">doc officielle</a>.</p>\n<h3>Gabarits</h3>\n<p>Un gabarit est un fragment de code HTML permettant, via des expressions,\nd'afficher les données du modèle associé. Les gabarits\nd'<a href=\"http://emberjs.com\">Ember</a> sont des gabarits\n<a href=\"http://handlebarsjs.com/\">Handlebars</a>. Les expressions Handlebars sont\ndélimitées par <code>{{</code> et <code>}}</code>.</p>\n<p>L'exemple suivant permet d'afficher le titre d'une app composé d'un prénom et\nd'un nom pour peu que l'on ait passé au gabarit un modèle contenant les deux\npropriétés <code>firstname</code> et <code>lastname</code>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{firstname}} {{lastname}} Library<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</code></pre>\n<p><a href=\"http://handlebarsjs.com/\">Handlebars</a> vient avec de nombreux outils (helpers)\npermettant de dynamiser nos gabarits : <code>{{#if isActive}} ... {{/if}}</code>,\n<code>{{#each users}} ... {{/each}}</code>, etc.</p>\n<p>Dans <a href=\"http://emberjs.com\">Ember</a>, les gabarits peuvent contenir un élément très\nimportant : <code>{{outlet}}</code>. Cet outlet définit un emplacement pour un autre\ngabarit permettant ainsi de multiples imbrications à mesure que les routes de\nl'application sont activées.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{firstname}} {{lastname}} Library<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  {{outlet}}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Tout élément de modèle injecté dans un gabarit sera <strong>automatiquement mis à\njour</strong> (binding) par <a href=\"http://emberjs.com\">Ember</a> lorsque le modèle associé au\ngabarit sera modifié. Évidemment, seul cet élément sera rafraîchit et non le\ngabarit entier sinon c'est tricher.</p>\n<p>Envie de tester ? -&gt;\n<a href=\"http://emberjs.com/guides/templates/the-application-template/\">doc officielle</a>.</p>\n<h3>Composants</h3>\n<p>Un composant <a href=\"http://emberjs.com\">Ember</a> permet de définir une balise HTML\npersonnalisée, permettant ainsi de partager de puissants éléments réutilisables\nau sein de votre application.</p>\n<p>Vous en avez toujours rêvé ? -&gt;\n<a href=\"http://emberjs.com/guides/components/\">doc officielle</a>.</p>\n<h3>Géneration d'objets</h3>\n<p>Pour qu'un gabarit soit rendu lorsqu'une URL est demandée, il faut donc que le\nrouteur définisse cette URL, qu'elle soit implémentée par une route qui\nrécupèrera un modèle qu'elle mettra à disposition du contrôleur et du gabarit.\nLe contrôleur écoutera les évènements en provenance du gabarit et y apportera la\nréponse adaptée. À noter que l'évènement peut également remonter jusqu'à la\nroute. Le gabarit est quant à lui encapsulé dans une vue gérée par Ember tout\nseul comme un grand.</p>\n<p>Il n'est cependant <strong>pas nécessaire de créer systématiquement tous ces objets</strong>\nsi aucune logique spécifique n'a besoin d'y être définie. En effet,\n<a href=\"http://emberjs.com\">Ember</a> s'appuie sur les\n<a href=\"#conventions-de-nommage\">conventions de nommage</a> pour retrouver successivement,\nà partir d'une URL, la route, le contrôleur, la vue et le gabarit associés. Si\nl'un de ces objet n'est pas trouvé, <a href=\"http://emberjs.com\">Ember</a> va en générer un\npar défaut.</p>\n<p>Donc si l'on crée dans le routeur la route suivante sans créer aucun autre objet\n:</p>\n<pre><code class=\"hljs language-js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.route(<span class=\"hljs-string\">&quot;about&quot;</span>, { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/about&quot;</span> });\n});\n</code></pre>\n<p><a href=\"http://emberjs.com\">Ember</a> va générer les objets suivants :</p>\n<ul>\n<li><strong>route</strong> : <code>AboutRoute</code></li>\n<li><strong>contrôleur</strong> : <code>AboutController</code></li>\n<li><strong>gabarit</strong> : <code>about</code></li>\n</ul>\n<p>Dans une application <a href=\"http://emberjs.com\">Ember</a>, <strong>il est donc nécessaire de ne\ndéfinir que ce dont on a besoin !</strong>. Et c'est bien connu, moins il y a de\nboilerplate, plus il y a de plaisir !</p>\n<p>Envie d'en savoir plus ? -&gt;\n<a href=\"http://emberjs.com/guides/routing/generated-objects/\">doc officielle</a>.</p>\n<p>Un bon moyen de se rendre compte de ça consiste à installer le debugger Ember\nsur votre navigateur préféré (donc pas IE). Vous aurez, entre autres, la liste\nde l'ensemble des objets impliqués dans le rendu d'une URL donnée. Cette liste\ndistingue de manière claire les objets créés par vous et ceux générés par Ember.</p>\n<p>Ce module s'appelle <strong>Ember Inspector</strong> et est disponible pour\n<a href=\"https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en\">Chrome</a>\net <a href=\"https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/\">Firefox</a>.\nC'est absolument indispensable lorsqu'on développe en Ember.</p>\n<h2>Conclusion et next steps</h2>\n<p><a href=\"http://emberjs.com\">Ember</a> est donc un framework très riche et extrêmement\nplaisant à pratiquer. <strong>Un vrai framework avec un vrai parti pris et des vrais\nchoix structurants.</strong> Il est résolument tourné vers le web et les URL. Ses\ncréateurs sont également ceux de son moteur de gabarit\n<a href=\"http://handlebarsjs.com/\">Handlebars</a> et sont très impliqués dans diverses\ninitiatives autour de la standardisation et de l'évolution du web. Pour n'en\nciter que deux : <a href=\"http://jsonapi.org/\">JSON API</a> et\n<a href=\"https://gist.github.com/wycats/9144666b0c606d1838be\">Web Components</a>, notamment\nau travers du moteur de gabarits\n<a href=\"https://github.com/tildeio/htmlbars\">HTMLBars</a>. Ils embrassent très rapidement\nles nouveaux standards tels que\n<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">ES6 Harmony</a> à l'image\ndes travaux effectués autour d'<a href=\"http://www.ember-cli.com/\">ember-cli</a> qui sera\nabordé dans un prochain article.</p>\n<p>Enfin, contrairement aux <em>a priori</em>, la courbe d'apprentissage\nd'<a href=\"http://emberjs.com\">Ember</a> est progressive et il est très simple à prendre en\nmain une fois les concepts de base appréhendés - c'est justement le but de cet\narticle. Au prochain épisode, nous verrons justement - par la pratique cette\nfois, <strong>comment démarrer et construire progressivement une application\n<a href=\"http://emberjs.com\">Ember</a></strong>.</p>\n"}