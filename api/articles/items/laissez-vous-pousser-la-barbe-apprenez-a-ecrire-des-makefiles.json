{"slug":"laissez-vous-pousser-la-barbe-apprenez-a-ecrire-des-makefiles","filename":"2014-11-03-laissez-vous-pousser-la-barbe-apprenez-a-ecrire-des-makefiles","title":"Laissez-vous pousser la barbe, apprenez à écrire des Makefiles","date":"Mon, 03 Nov 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-11-03T00:00:00.000Z","title":"Laissez-vous pousser la barbe, apprenez à écrire des Makefiles","author":"madx","oldSlug":"make","slug":"laissez-vous-pousser-la-barbe-apprenez-a-ecrire-des-makefiles"},"body":"<p>À l'heure où tout le monde se rue sur des outils comme <a href=\"/fr/articles/js/gulp/\">Gulp</a>,\n<a href=\"/fr/articles/js/grunt/\">Grunt</a> ou autres <a href=\"https://rubygems.org/gems/rake\">Rake</a>, certains irréductibles (dont je\nfais partie) ont fait le choix d'employer un des outils les plus standards et\nemblématiques dont tout développeur a entendu parler au moins une fois dans sa\nvie : <em>Make</em>.</p>\n<p>Si de prime abord on a l'impression d'un système assez archaïque (ce qui n'est\npas toujours forcément faux), on se rend rapidement compte que <em>Make</em>, couplé à\nune petite dose de scripting shell permet rapidement de mettre en place un moyen\nde compiler ses fichiers et de lancer des tâches.</p>\n<p>Les fichiers de configuration de <em>Make</em> sont appellés <em>Makefiles</em> (oui, ce sont\neux qui ont donné leurs noms aux <code>(Gulp|Grunt|Rake)files</code>). Les instructions\nqu'ils contiennent sont exécutées grâce à la commande <code>make</code> dans votre\nterminal.</p>\n<h1>Hello World</h1>\n<p>Je vous propose de commencer en douceur par un classique <em>Hello World</em>. On va\nsimplement définir une tâche <code>hello-world</code> dont l'action va être d'afficher\n<em>&quot;Hello, world&quot;</em> à l'écran (boooring).</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-section\">hello-world:</span>\n    echo <span class=\"hljs-string\">&quot;Hello, world&quot;</span>\n</code></pre>\n<p>Première remarque importante, les indentations dans un <em>Makefile</em> <strong>doivent</strong>\nêtre faites avec des tabulations. Oui, je sais, c'est moche, on dirait du\nPython, mais c'est comme ça.</p>\n<p>Voilà le genre d'erreurs qu'on se prend si on met des espaces à la place des\ntabulations :</p>\n<pre><code>Makefile:2: *** séparateur manquant . Arrêt.\n</code></pre>\n<p>Pour exécuter notre commande, il nous suffit de lancer <code>make hello-world</code> dans\nun terminal :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make hello-world</span>\necho &quot;Hello, world&quot;\nHello, world\n</code></pre>\n<p>Décortiquons un peu cette exécution. Pour chaque commande qu'il exécute, <em>Make</em>\naffiche la commande complète avant d'afficher la sortie standard de ladite\ncommande. C'est souvent très pratique car toutes les variables (on va revenir là\ndessus) qu'on met dans la commande sont résolues, et on voit clairement ce que\n<em>Make</em> exécute. Par contre, dans certains cas on s'en fout un peu, on peut alors\npréfixer la ligne à rendre silencieuse par un <code>@</code>, comme ça :</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-section\">hello-world:</span>\n    @ echo <span class=\"hljs-string\">&quot;Hello, world&quot;</span>\n</code></pre>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make hello-world</span>\nHello, world\n</code></pre>\n<h1>Règles, cibles, recettes et pré-requis</h1>\n<p>OK, jusque là c'est génial, on a un super outil pour lancer des commandes qu'on\npourrait déjà stocker dans un bête script shell. Pas super utile finalement.</p>\n<p>Bon, on va corser un peu les choses et commencer par définir un peu de\nterminologie avant que vous soyez totalement largués.</p>\n<p>Un <em>Makefile</em> est une collection de <strong>règles</strong>, chacune étant composée d'une\n<strong>cible</strong>, de <strong>pré-requis</strong> (ou pas) et d'une <strong>recette</strong>. Dans notre exemple\nprécédent, <code>hello-world</code> est la cible et <code>@ echo &quot;Hello, world&quot;</code> est la recette\nde la règle. Elle ne spécifie par contre pas de pré-requis.</p>\n<p>Relisez trois ou quatre fois le paragraphe précédent jusqu'à ce que ce soit bien\nimprimé.</p>\n<p>Vous l'aurez compris, on invoque une règle depuis la ligne de commande en\nspécifiant le nom de sa cible après la commande <code>make</code>. Si on ne précise rien,\nc'est la première règle trouvée qui est exécutée (donc dans notre cas,\n<code>hello-world</code>).</p>\n<p>Les pré-requis sont déclarés après la cible. On pourrait par exemple ajouter un\n<code>sauter-une-ligne</code> comme pré-requis à notre cible <code>hello-world</code> :</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-section\">hello-world: sauter-une-ligne</span>\n    @ echo <span class=\"hljs-string\">&quot;Hello, world&quot;</span>\n\n<span class=\"hljs-section\">sauter-une-ligne:</span>\n    @ echo\n</code></pre>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make hello-world</span>\n\nHello, world\n</code></pre>\n<p>Facile, non ? Ok alors on peut <em>vraiment</em> attaquer les choses sérieuses.</p>\n<h1>Construire des fichiers</h1>\n<p>Les pré-requis sont particulièrement pratiques quand on veut construire un\nfichier depuis un autre, ce qui est la principale action d'à peu près tout\nprocessus de compilation (paraît même que c'est grosso modo la définition de la\ncompilation).</p>\n<p>On peut par exemple écrire un <em>Makefile</em> nous permettant de compiler un fichier\n<em>Markdown</em> en <em>HTML</em> :</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-section\">article.html: article.md</span>\n    marked article.md &gt; article.html\n</code></pre>\n<p>Cette règle spécifie simplement que pour construire le fichier <code>article.html</code>\nj'ai besoin du fichier <code>article.md</code> et que j'utilise la commande\n<a href=\"https://www.npmjs.org/package/marked\"><code>marked</code></a> pour construire le fichier. Essayez, vous verrez, c'est\nmagique.</p>\n<p>Là où ça devient intéressant, c'est que si je lance de nouveau\n<code>make article.html</code>, rien ne se passe. Eh oui, <em>Make</em> vérifie les dates de\nmodification des pré-requis et les compare avec la date de modification de la\ncible pour savoir s'il doit où non reconstruire la cible.</p>\n<p>On peut bien sûr aller plus loin en ayant des fichiers qui dépendent de\nfichiers, qui à leur tour dépendent de fichiers, …</p>\n<p><a name=\"ref-phony-target\"></a></p>\n<p>On peut aussi avoir une cible factice qui ne représente pas un fichier et qui\nelle-même dépend de plusieurs fichiers\n(<code>website: index.html apropos.html contact.html</code>).</p>\n<h1>Variables et substitutions</h1>\n<p>La syntaxe des variables dans un <em>Makefile</em> ressemblent beaucoup aux variables\nde votre Shell, <em>mais pas tout à fait</em>.</p>\n<pre><code class=\"hljs language-makefile\">SOURCE = index.md\nDESTINATION = index.html\n\n<span class=\"hljs-section\">${DESTINATION}: ${SOURCE}</span>\n  marked ${SOURCE} &gt; ${DESTINATION}\n</code></pre>\n<p>On peut aussi utiliser une substitution pour s'éviter de tout retaper. La\nsyntaxe pour ça est assez simple et se passe d'explications :</p>\n<pre><code class=\"hljs language-makefile\">SOURCE = index.md\nDESTINATION = ${SOURCE:.md=.html}\n</code></pre>\n<p>Là où ça devient beaucoup plus intéressant c'est qu'on peut stocker des listes\ndans une variable. Pour ça, pas vraiment d'effort à faire, il suffit de rajouter\ndes noms à la suite :</p>\n<pre><code class=\"hljs language-makefile\">SOURCE = index.md article.md\nDESTINATION = ${SOURCE:.md=.html}\n</code></pre>\n<p>Attention par contre ! En faisant ça si vous utilisez <code>${SOURCE}</code> comme cible\nd'une règle, vous allez définir plusieurs règles d'un coup, ce qui n'est peut\nêtre pas ce que vous voulez.</p>\n<p>On peut contourner ça assez simplement en utilisant une substitution au niveau\nde la règle. La syntaxe est un poil différente :</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-section\">%.html: %.md</span>\n  [...]\n</code></pre>\n<p>Vous l'aurez compris, <code>%</code> est identique dans la cible et dans la dépendance,\ndonc avec cette règle si vous faites un <code>make index.html</code>, <em>Make</em> va tenter de\nconstruire la dépendance <code>index.md</code> avant tout.</p>\n<p>Un problème se pose à nous avec cette syntaxe : « Bah merde, comment je récupère\nles noms de fichiers là ? »</p>\n<h1>Variables spéciales</h1>\n<p>Superbe transition étant donné qu'on va parler ici de quelques variables\nspéciales bien pratiques !</p>\n<ul>\n<li><code>$@</code> contient le nom de la cible de la règle en cours d'exécution ;</li>\n<li><code>$^</code> contient la liste des dépendances de la règle (la flèche pointe vers la\nliste de dépendances) ;</li>\n<li><code>$&lt;</code> contient la première dépendance de la règle (la flèche pointe à gauche,\nlà où est la dépendance).</li>\n</ul>\n<p>À l'aide de celles-ci on peut du coup compléter notre exemple précédent :</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-section\">%.html: %.md</span>\n  marked <span class=\"hljs-variable\">$&lt;</span> &gt; <span class=\"hljs-variable\">$@</span>\n  [...]\n</code></pre>\n<h1>Fonctions</h1>\n<p>Pour faciliter quelques opérations, <em>Make</em> fournit un ensemble de fonctions de\nbase. Appeler ces fonctions rappelle un peu la façon dont on lance une commande\ndans un sous-shell en Bash : <code>$(fonction argument1 argument2)</code>.</p>\n<p>Voici une petite démonstration de <code>wildcard</code>, <code>addsuffix</code> et <code>basename</code> dont\nvous vous doutez sans doute les effets :</p>\n<pre><code class=\"hljs language-makefile\">SOURCES = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> *.md)</span>\nDESTINATIONS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">addsuffix</span> .html,$(<span class=\"hljs-built_in\">basename</span> ${SOURCES})</span>)\n\n<span class=\"hljs-section\">all: ${DESTINATIONS}</span>\n\n<span class=\"hljs-section\">%.html: %.md</span>\n  marked <span class=\"hljs-variable\">$&lt;</span> &gt; <span class=\"hljs-variable\">$@</span>\n</code></pre>\n<p>L'exemple construit dynamiquement la liste des fichiers HTML à produire à partir\nde la liste des fichiers <em>Markdown</em> disponibles puis définit une règle <code>all</code>\npermettant de tout construire d'un coup, et une règle définissant compiler\nunitairement un fichier <em>Markdown</em> vers HTML.</p>\n<p>Vous noterez qu'<code>addsuffix</code>/<code>basename</code> peut être remplacé par une substitution\nsimple comme on a vu précédemment.</p>\n<p>Je vous invite à fouiller <a href=\"https://www.gnu.org/software/make/manual/make.html#Functions\">le chapitre sur les fonctions du\nmanuel</a>.</p>\n<h1>La cible <code>.PHONY</code></h1>\n<p>Dans certains cas la cible d'une règle ne représente pas un fichier (c'était le\ncas de notre cible <code>website</code> <a href=\"#ref-phony-target\">un peu plus haut</a>).</p>\n<p>Dans ces cas-là, on va vouloir exécuter la règle quoi qu'il arrive, comme si la\ncible était tout le temps périmée.</p>\n<p>Une cible particulière existe pour ça : <code>.PHONY</code>. Toutes les dépendances de\ncette cible seront marquées comme (traduction pourrie) imposteurs (<em>phony</em>\ndonc).</p>\n<p>Pour reprendre l'exemple précédent, on déclarera donc :</p>\n<pre><code class=\"hljs language-makefile\"><span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">.PHONY</span>: website</span>\n\n<span class=\"hljs-section\">website: index.html apropos.html contact.html</span>\n  [...]\n</code></pre>\n<p>Désormais, chaque appel à <code>make website</code> tentera de construire les dépendances\net exécutera les commandes de la recette de la règle.</p>\n<h1>Un exemple complet</h1>\n<p>L'exemple suivant permet de compiler un site Web depuis un ensemble de fichiers\n<em>Markdown</em>.</p>\n<pre><code class=\"hljs language-makefile\">SOURCES = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> src/*.md)</span>\nDESTINATIONS = ${SOURCES:src/%.md=build/%.html}\n\n<span class=\"hljs-section\">all: ${DESTINATIONS}</span>\n\n<span class=\"hljs-section\">info:</span>\n    @ echo Will build ${DESTINATIONS} from ${SOURCES}\n\n<span class=\"hljs-section\">clean:</span>\n    rm -f ${DESTINATIONS}\n\n<span class=\"hljs-section\">build/%.html: src/%.md</span>\n    mkdir -p build\n    marked <span class=\"hljs-variable\">$&lt;</span> &gt; <span class=\"hljs-variable\">$@</span>\n\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">.PHONY</span>: all info clean</span>\n</code></pre>\n<p>Vous noterez que comme on stocke nos résultats dans le dossier <code>build</code>, il faut\npotentiellement le créer quand on compile un fichier dedans.</p>\n<h1>Pour aller plus loin</h1>\n<p>Il existe bien d'autres fonctionnalités dans <em>Make</em> (du moins dans <em>GNU Make</em>),\navec notamment :</p>\n<ul>\n<li>Les <a href=\"https://www.gnu.org/software/make/manual/make.html#Canned-Recipes\"><em>canned recipes</em></a> (recettes en boîte), permettant de\ndéfinir un bout de règle réutilisable à plusieurs endroits.</li>\n<li>Des <a href=\"https://www.gnu.org/software/make/manual/make.html#Functions\">expressions conditionnelles</a> pour avoir des tests\ndans votre <em>Makefile</em> et effectuer des traitements différents selon\nl'environnement.</li>\n<li>Les <a href=\"https://www.gnu.org/software/make/manual/make.html##Prerequisite-Types\">règles en <em>order only</em></a> qui permettent d'indiquer une\ndépendance dont la date de modification ne doit pas être prise en compte (on\npeut s'en servir pour éviter le <code>mkdir</code> dans l'exemple complet).</li>\n<li>Et <a href=\"https://www.gnu.org/software/make/manual/make.html#Functions\">plein d'autres fonctions</a> bien pratiques !</li>\n</ul>\n<p>Je vous invite aussi à jeter un coup d'œil au <a href=\"https://github.com/madx/veil/\"><em>Makefile</em> de Veil</a>, un\noutil que j'utilise pour générer des sites statiques à partir de fichiers\n<em>Markdown</em> (ah bah tiens, comme dans mes exemples, c'est rigolo). Il y a plein\nde fonctionnalités de <em>Make</em> utilisées dans ce projet et je pense que ça peut\nêtre source d'idées.</p>\n<p>Voilà pour cette premier introduction à <em>Make</em>, j'espère que ça vous a plu et\nque vous êtes fin prêts à affronter tous ces bouseux avec leur système de build\nà base de streams, de brocolis et autres râteaux.</p>\n"}