{"slug":"flux-qu-est-ce-que-c-est","filename":"2014-10-27-flux-qu-est-ce-que-c-est","title":"Flux, qu'est-ce que c'est ?","date":"Mon, 27 Oct 2014 00:00:00 GMT","draft":false,"meta":{"date":"2014-10-27T00:00:00.000Z","title":"Flux, qu'est-ce que c'est ?","author":"bloodyowl","oldSlug":"js/flux","slug":"flux-qu-est-ce-que-c-est"},"body":"<p>Allez, tant pis, on saute l'intro et on entre directement dans le vif du sujet\n(on n'a pas que ça à foutre, après tout).</p>\n<h2>La petite histoire</h2>\n<p>Il était une fois un gros site web <em>que s'apelorio</em> Facebook. Qui dit Facebook,\ndit webapp plus grosse que la plus grosse de tes copines (<em>no offense</em>\n<sup><a href=\"#foonote-1\">1</a></sup>) ; et du coup, propension à se retrouver submergé de\nbugs plus élevée.</p>\n<p>Les ingénieurs front-end de Facebook, confrontés à une codebase de plus en plus\nbordélique (personne ne voulant toucher certaines parties de celle-ci) ont dû\nrepenser la structure des composants les plus cruciaux.</p>\n<p>Face à ce besoin, ces développeurs sont donc parvenus à deux solutions :</p>\n<ul>\n<li><a href=\"/fr/articles/js/react/\">React</a></li>\n<li>Flux</li>\n</ul>\n<p>Flux n'est pas un framework, mais simplement une architecture, une sorte de\n<em>guideline</em> qui résout pas mal de problèmes ayant pu apparaître avec les divers\nbibliothèques et frameworks MV* apparus lors des dernières années.</p>\n<h2>Flux, l'explication claire</h2>\n<p>Flux comporte 4 concepts :</p>\n<ul>\n<li>les <strong>actions</strong>, qu'elles proviennent du serveur ou d'une interaction\nutilisateur ;</li>\n<li>le <strong>dispatcher</strong> dans lequel sont envoyées les actions que ce dernier\ntransmet <em>à qui veut</em>, un peu comme un <code>EventEmitter</code> global ;</li>\n<li>les <strong>stores</strong>, qui sont l'équivalent du <code>model</code> de l'architecture MVC, ils\ncontiennent les données, et réagissent aux actions que le dispatcher leur\ntransmet ;</li>\n<li>les <strong>views</strong>, qui s'occupent du rendu des données dans le DOM, et de lancer\ndes actions lorsque l'utilisateur effectue certaines actions.</li>\n</ul>\n<p>Jusque-là, rien de bien fou. C'est dans leur manière d'interagir que la\nparticularité se dessine :</p>\n<figure>\n  <img src=\"/public/images/articles/2014-10-27-flux-qu-est-ce-que-c-est/flux.jpg\" alt=\"\" />\n  <figcaption>Oh bah dis donc, ça va toujours dans le même sens</figcaption>\n</figure>\n<p>En effet, le <em>flux</em> en question est unidirectionnel. Pour faire simple, on\nprocède ainsi :</p>\n<p>On définit une action via un <strong>action creator</strong> (on passera toujours par ces\naction-creators pour signaler une action) :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// actions/BasketActions.js</span>\n<span class=\"hljs-keyword\">var</span> AppDispatcher = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../AppDispacher&quot;</span>);\n<span class=\"hljs-comment\">/*\n  On garde un dictionnaire des types d&#x27;actions\n  afin d&#x27;avoir un fichier donnant une vision\n  globale de toutes les interactions de l&#x27;app.\n */</span>\n<span class=\"hljs-keyword\">var</span> ActionTypes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../constants&quot;</span>).ActionTypes;\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">addToBasket</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">productId</span>) </span>{\n    AppDispatcher.handleViewAction({\n      <span class=\"hljs-attr\">type</span>: ActionTypes.ADD_TO_BASKET,\n      <span class=\"hljs-attr\">productId</span>: productId,\n    });\n  },\n};\n</code></pre>\n<p>On lancera par la suite cette action lorsque l'utilisateur aura cliqué sur un\ncertain bouton, dans la vue concernée.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// components/Product.jsx</span>\n<span class=\"hljs-keyword\">var</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;react/addons&quot;</span>);\n<span class=\"hljs-keyword\">var</span> BasketActions = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../actions/BasketActions&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> Button = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./common/Button.jsx&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> Product = React.createClass({\n  <span class=\"hljs-attr\">addToBasket</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">productId</span>) </span>{\n    BasketActions.addToBasket(productId);\n  },\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Product&quot;</span>&gt;</span>\n        {/* rest of the component*/}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n          <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.addToBasket.bind(this.props.productId)}</span>\n          <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Add to basket&quot;</span>\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  },\n});\n\n<span class=\"hljs-built_in\">module</span>.exports = Product;\n</code></pre>\n<p>Dès lors, à chaque clic sur le bouton en question, l'action <code>ADD_TO_BASKET</code> sera\npassée au dispatcher, qui le signalera aux stores.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// stores/BasketStore.js</span>\n<span class=\"hljs-keyword\">var</span> AppDispatcher = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../AppDispatcher&quot;</span>);\n<span class=\"hljs-keyword\">var</span> ActionTypes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../constants&quot;</span>).ActionTypes;\n<span class=\"hljs-keyword\">var</span> API = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../api&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../utils/merge&quot;</span>);\n<span class=\"hljs-keyword\">var</span> Store = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../utils/store&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> _store = {\n  <span class=\"hljs-attr\">products</span>: [],\n};\n\n<span class=\"hljs-keyword\">var</span> BasketStore = merge(Store, {\n  <span class=\"hljs-comment\">/*\n    Ici, on `register` un callback sur l&#x27;AppDispatcher,\n    ce qui signifie qu&#x27;on verra passer toutes les actions\n    de l&#x27;app.\n   */</span>\n  <span class=\"hljs-attr\">dispatchToken</span>: AppDispatcher.register(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">payload</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> action = payload.action;\n    <span class=\"hljs-keyword\">switch</span> (action.type) {\n      <span class=\"hljs-keyword\">case</span> ActionTypes.ADD_TO_BASKET:\n        <span class=\"hljs-comment\">/*\n             L&#x27;API va ajouter le produit et lancer une\n             action `BASKET_UPDATED` dès que le serveur a répondu.\n          */</span>\n        API.addToBasket(action.productId);\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> ActionTypes.BASKET_UPDATED:\n        <span class=\"hljs-comment\">/*\n            L&#x27;API a répondu, on peut stocker la réponse\n            et signaler le changement\n            aux vues récupérant ces données.\n          */</span>\n        _store = action.reponse;\n        BasketStore.emitChange();\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">default</span>:\n        <span class=\"hljs-keyword\">break</span>;\n    }\n  }),\n});\n\n<span class=\"hljs-built_in\">module</span>.exports = BasketStore;\n</code></pre>\n<p>La vue, quant à elle, sera notifiée du changement, et effectuera un <code>render()</code> :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// components/Basket.jsx</span>\n<span class=\"hljs-keyword\">var</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;react/addons&quot;</span>);\n<span class=\"hljs-keyword\">var</span> BasketActions = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../actions/BasketActions&quot;</span>);\n<span class=\"hljs-keyword\">var</span> BasketStore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../stores/BasketStore&quot;</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getState</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> BasketStore.getStore();\n}\n\n<span class=\"hljs-keyword\">var</span> Product = React.createClass({\n  <span class=\"hljs-attr\">getInitialState</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> getState();\n  },\n  <span class=\"hljs-attr\">_onStoreChange</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/*\n      À chaque changement du store, on update naïvement\n      le component et on laisse le virtual DOM faire son job.\n    */</span>\n    <span class=\"hljs-built_in\">this</span>.setState(getState());\n  },\n  <span class=\"hljs-attr\">componentDidMount</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/*\n      On écoute le store uniquement lorsque le\n      component est monté.\n     */</span>\n    BasketStore.addChangeListener(<span class=\"hljs-built_in\">this</span>._onStoreChange);\n  },\n  <span class=\"hljs-attr\">componentWillUnmount</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/*\n      Et on arrête d&#x27;écouter quand il ne l&#x27;est plus.\n     */</span>\n    BasketStore.removeChangeListener(<span class=\"hljs-built_in\">this</span>._onStoreChange);\n  },\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Basket&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Basket-count&quot;</span>&gt;</span>\n          {this.state.products.length + &quot; products&quot;}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        {/* rest of the component */}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  },\n});\n\n<span class=\"hljs-built_in\">module</span>.exports = Product;\n</code></pre>\n<p>Tout cela peut sembler relativement verbeux, mais il faut préciser deux choses :</p>\n<ul>\n<li>les exemples ici le sont volontairement pour la démonstration, et il est\naisément faisable d'utiliser un <code>StoreMixin</code> simplifier la déclaration des\n<code>class</code> React ;</li>\n<li>pour ce qui est du reste, notamment stocker les noms d'actions dans un objet\npartagé dans l'app, c'est pour rendre plus idiomatique et cohérente la façon\ndont on code l'app, et pour simplifier ses <em>refactoring</em>.</li>\n</ul>\n<h2>Ce qu'il faut savoir sur l'alliance Flux + React</h2>\n<p>Si React et Flux vont si bien ensemble, c'est que l'approche de rendu &quot;naïf&quot; de\nReact (comprendre &quot;React s'en fout de ce qui change, il appelle <code>render</code> à\nchaque changement&quot;) permet de réduire la logique à écrire dans les Stores, et\ndonc de simplifier très fortement la codebase de l'app.</p>\n<p>Lorsque qu'un ou plusieurs stores composent l'état d'un state React, alors à\nchaque changement de l'un de ces stores, tous les composants React concernés et\nleurs enfants vont appeler leur méthode <code>render()</code>. Afin d'éviter des appels\nsuperflus à ces méthodes, React donne la possibilité de tester soi-même s'il est\nnécessaire de mettre à jour le component en déclarant une méthode\n<code>shouldComponentUpdate</code> retournant un <code>boolean</code> qui stipulera si oui ou non il\nest nécessaire d'appeler <code>render()</code>.</p>\n<h2>tl;dr</h2>\n<ul>\n<li>Flux, c'est comme du MVC en plus simple, et avec moins de bugs</li>\n<li>L'architecture est unidirectionnelle</li>\n<li>On raisonne en actions, qui sont déclenchées par la vue ou le serveur</li>\n<li>Toutes les actions passent par le dispatcher</li>\n<li>Seuls les stores signalent aux vues qu'il faut se mettre à jour</li>\n</ul>\n<p>Bisous bisous.</p>\n<p><img src=\"https://media.giphy.com/media/lxd2cZ2BkM4IE/giphy.gif\" alt=\"angulol\" /></p>\n<p>Pour aller un peu plus loin :</p>\n<ul>\n<li><a href=\"https://gist.github.com/bloodyowl/b41532cf3627c560b57e\">Les sources des exemples</a>\ncontenant le dispatcher et les constants ;</li>\n<li><a href=\"http://facebook.github.io/flux/docs/overview.html#content\">La doc de Flux</a> ;</li>\n<li><a href=\"https://github.com/facebook/flux\">Le repository Flux</a> et ses différents\nexemples.</li>\n</ul>\n<p><small>\n<a id=\"foonote-1\"></a>1: <a href=\"https://www.youtube.com/watch?v=jRzv9gep5Ng&amp;t=4m\">Référence utile (<code>ntm install reference</code>)</a>\n</small></p>\n"}