{"slug":"le-type-option-c-est-quoi-et-ca-regle-quel-probleme","filename":"2019-03-25-le-type-option-c-est-quoi-et-ca-regle-quel-probleme","title":"Le type option, c'est quoi et ça règle quel problème ?","date":"Mon, 25 Mar 2019 00:00:00 GMT","draft":false,"meta":{"date":"2019-03-25T00:00:00.000Z","title":"Le type option, c'est quoi et ça règle quel problème ?","author":"bloodyowl","slug":"le-type-option-c-est-quoi-et-ca-regle-quel-probleme"},"body":"<p>La plupart des langages populaires aujourd'hui ont une valeur particulière appelée <code>null</code>. Elle représente l'absence délibérée de valeur. JavaScript possède aussi <code>undefined</code>, qui fonctionne à peu près de la même façon mais pour d'autres significations.</p>\n<p>Un des problèmes souvent rencontré dans ces langages est que <code>null</code> est implicitement accepté comme valeur possible de n'importe quelle variable. Il est donc assez facile de se trouver avec un <code>null is not an object</code> ou une célèbre <code>NullPointerException</code> avec une stacktrace qui ne vous dira pas d'où est sorti ce <code>null</code>.</p>\n<p><code>null</code> est une valeur importante pour la conception de programme : on n'a pas toujours de valeur, et il faut être en mesure de l'exprimer dans notre code. Pourtant, la plupart des langage fonctionnels statiquement typés n'ont pas de concept de <code>null</code>.</p>\n<p>Comment gèrent-ils ça ? Avec un <strong>type option</strong> (aussi appelé <strong>type maybe</strong> dans certains langages), qui est un <strong>petit conteneur</strong> qui englobe la valeur (ou la non-valeur). Puisqu'il nous faut un langage statiquement typé pour nos exemples, nous allons utiliser <a href=\"https://reasonml.github.io\">ReasonML</a> dont je vous ai <a href=\"/articles/introduction-a-reasonml\">déjà parlé</a> et avec lequel on a <a href=\"/articles/comment-on-a-fait-ce-site\">construit ce site</a>.</p>\n<h2>Le type</h2>\n<p>Le type option est un <strong>variant</strong>, qui peut de loin s'apparenter à un type d'union. Par exemple:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">type</span> status =\n  | <span class=\"hljs-constructor\">Inactive</span>\n  | <span class=\"hljs-constructor\">Active</span>;\n</code></pre>\n<p>Une valeur de type <code>status</code> pourra être soit <code>Inactive</code>, soit <code>Active</code> et elle ne pourra être qu'une seule de ces valeurs à la fois.</p>\n<p>Maintenant, voyons la définition du type <code>option</code> :</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">type</span> option(&#x27;value) =\n  <span class=\"hljs-comment\">/* on définit les différentes valeurs possibles,\n    une valeur du type option sera forcément d&#x27;une des deux listées ci-dessous */</span>\n  | <span class=\"hljs-constructor\">None</span> <span class=\"hljs-comment\">/* pas de valeur */</span>\n  | <span class=\"hljs-constructor\">Some</span>(&#x27;value); <span class=\"hljs-comment\">/* une valeur du type `&#x27;value`*/</span>\n</code></pre>\n<p><code>'value</code> est ici ce qu'on appelle un <strong>paramètre de type</strong>, ça permet au type d'être «génerique»: il se fout du type de la valeur contenue, et vous laisse le spécifier à l'usage ou laisse l'inférence de type le deviner.</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> isMyself = <span class=\"hljs-keyword\">fun</span>\n  | <span class=\"hljs-constructor\">Some</span>(<span class=\"hljs-string\">&quot;Matthias&quot;</span>) =&gt; <span class=\"hljs-literal\">true</span>\n  | <span class=\"hljs-constructor\">Some</span>(_) | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-literal\">false</span>;\n</code></pre>\n<p>Ici, la fonction aura la signature suivante :</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> isMyself: option(string) =&gt; bool;\n                  <span class=\"hljs-comment\">/* ^ le compiler a compris qu&#x27;il s&#x27;agissait d&#x27;une chaîne de caractères! */</span>\n</code></pre>\n<p>Cette généricité fait de l'option une abstraction générale pour représenter la présence ou l'absence de n'importe quel type de valeur. Cela nous permet par exemple de créer une fonction <code>map</code> :</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> map = (opt, f) =&gt;\n  <span class=\"hljs-keyword\">switch</span> (opt) {\n  | <span class=\"hljs-constructor\">Some</span>(x) =&gt; <span class=\"hljs-constructor\">Some</span>(f(x))\n  | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-constructor\">None</span>\n  };\n</code></pre>\n<p>Et cette fonction pourra être utilisée pour <strong>n'importe quelle option</strong>. Jetons un œil à sa signature :</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> map: (option(&#x27;a), &#x27;a =&gt; &#x27;b) =&gt; option(&#x27;b);\n</code></pre>\n<p>On peut lire cette signature de cette façon :</p>\n<ul>\n<li>on a une fonction map</li>\n<li>elle prend une option contenant une valeur de type <code>a</code></li>\n<li>elle prend une fonction prenant une valeur de type <code>a</code> et retourne une valeur de type <code>b</code></li>\n<li>elle retourne une option contenant une valeur de type <code>b</code></li>\n</ul>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-constructor\">Some</span>(<span class=\"hljs-number\">2</span>)<span class=\"hljs-operator\">-&gt;</span>map(x =&gt; x <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">3</span>) <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> <span class=\"hljs-constructor\">Some</span>(<span class=\"hljs-number\">6</span>)\n<span class=\"hljs-constructor\">None</span><span class=\"hljs-operator\">-&gt;</span>map(x =&gt; x <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">3</span>) <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> <span class=\"hljs-constructor\">None</span>\n</code></pre>\n<p>Un autre exemple de fonction utile est <code>flatMap</code>:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> flatMap = (opt, f) =&gt;\n  <span class=\"hljs-keyword\">switch</span> (opt) {\n  | <span class=\"hljs-constructor\">Some</span>(x) =&gt; f(x)\n  | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-constructor\">None</span>\n  };\n<span class=\"hljs-comment\">/* let flatMap: (option(&#x27;a), &#x27;a =&gt; option(&#x27;b)) =&gt; option(&#x27;b); */</span>\n<span class=\"hljs-comment\">/* `get` retourne une option */</span>\n<span class=\"hljs-keyword\">let</span> zipCode =\n  get(<span class=\"hljs-string\">&quot;profile&quot;</span>)\n  <span class=\"hljs-operator\">-&gt;</span>flatMap(profile =&gt; profile<span class=\"hljs-operator\">-&gt;</span>get(<span class=\"hljs-string\">&quot;address&quot;</span>))\n  <span class=\"hljs-operator\">-&gt;</span>flatMap(address =&gt; address<span class=\"hljs-operator\">-&gt;</span>get(<span class=\"hljs-string\">&quot;zipCode&quot;</span>));\n<span class=\"hljs-comment\">/* zipCode est un `option(string)` */</span>\n</code></pre>\n<h2>Le problème résolu par le type option</h2>\n<p>Prenons pour exemple la fonction <code>Array.prototype.find</code> de JavaScript :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> result = array.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item === <span class=\"hljs-literal\">undefined</span> || item.active);\n</code></pre>\n<p><code>result</code> sera:</p>\n<ul>\n<li>un objet s'il a un champ <code>active</code> ayant une valeur évaluée comme vraie</li>\n<li><code>undefined</code> si un item de <code>array</code> est <code>undefined</code></li>\n<li><code>undefined</code> si rien n'est trouvé</li>\n</ul>\n<p>Avec cette implémentation naïve, on est incapable de savoir dans quel cas on se trouve : soit on a trouvé un item <code>undefined</code>, soit on a rien trouvé.</p>\n<p><em>Notez que le problème se pose ici avec <code>undefined</code> mais qu'il en serait de même un tableau contenant des <code>null</code> et une fonction <code>find</code> d'une bibliothèque retournant <code>null</code> dans le cas où elle ne trouve rien</em></p>\n<p>Si l'on veut être capable de faire la différence entre les deux derniers cas, on doit utiliser une autre fonction: <code>findIndex</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> index = array.findIndex(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item === <span class=\"hljs-literal\">undefined</span> || item.active);\n<span class=\"hljs-keyword\">if</span> (index == -<span class=\"hljs-number\">1</span>) {\n  <span class=\"hljs-comment\">// not found</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// found</span>\n  <span class=\"hljs-keyword\">let</span> result = array[index];\n}\n</code></pre>\n<p>Le code est plus lourd, moins lisible, et manque d'expressivité. <code>find</code> ne nous donne pas assez d'information au travers de la valeur retournée: <code>undefined</code> est &quot;aplati&quot;, et requiert une logique supplémentaire (ici <code>index</code>, si un item est trouvé, il sera supérieur à <code>-1</code>, sinon il sera égal à <code>-1</code>)</p>\n<p>Le problème ne vient pas de la fonction <code>find</code> elle même mais de la façon dont <code>null</code> et <code>undefined</code> sont traités. <code>null</code> <strong>est</strong> la valeur, il la <strong>remplace</strong>. <code>option</code> <strong>l'englobe</strong>: c'est un conteneur.</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">open</span> <span class=\"hljs-module-identifier\">Belt</span>; <span class=\"hljs-comment\">/* la stdlib */</span>\n<span class=\"hljs-comment\">/* `getBy` est l&#x27;equivalent de `find` */</span>\n<span class=\"hljs-keyword\">let</span> result = array<span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Array</span>.getBy(\n  <span class=\"hljs-keyword\">fun</span>\n    | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-literal\">true</span>\n    | <span class=\"hljs-constructor\">Some</span>({active}) =&gt; active\n);\n</code></pre>\n<p>D'abord, <code>array</code> a le type suivant:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> array: array(option(value));\n</code></pre>\n<p>Et <code>getBy</code> celui-ci:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> getBy: (array(&#x27;a), &#x27;a =&gt; bool) =&gt; option(&#x27;a);\n</code></pre>\n<p>Si on remplace les paramètres de type par le type vraiment utilisé dans notre cas précis, on se retrouve avec ça :</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> getBy:\n  (\n    array(option(value)),\n    option(value) =&gt; bool\n  ) =&gt; option(option(value));\n</code></pre>\n<p><code>result</code> aura donc le type suivant :</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> result: option(option(value));\n</code></pre>\n<p>C'est une <code>option</code> d'<code>option</code> de <code>value</code>. Et ça signifie qu' <strong>on peut extraire l'information qui nous intéresse</strong> de la valeur de retour:</p>\n<ul>\n<li>si le résultat est <code>Some(Some(value))</code> : on a trouvé une valeur <code>true</code> pour le champ <code>active</code></li>\n<li>si le résultat est <code>Some(None)</code> : on a trouvé une valeur <code>None</code></li>\n<li>si le résultat est <code>None</code> : on n'a rien trouvé dans le tableau</li>\n</ul>\n<p>Le type <code>option</code> a éliminé par <em>design</em> certains problèmes inhérents à <code>null</code> et <code>undefined</code> en se comportant comme un conteneur plutôt qu'un substitut.</p>\n<p>La nature des <code>option</code> dans les langages statiquement typés permet d'éviter de nombreuses erreurs de conception. Les fonctions ne sont plus juste autorisées à retourner <code>null</code> et à vous laisser la responsabilité implicite de le gérer à grand coup de <code>if(value == null) { a } else { b }</code>, elles retournent un type <code>option</code> qui vous <strong>force à prendre en compte l'optionalité de la valeur</strong>.</p>\n<p>Avant de pratiquer un langage fonctionnel typé, je n'arrivais pas à piger comment ces langages pouvaient de débrouiller sans valeur <code>null</code>. J'espère que si vous êtes dans le même cas, ce petit post vous aidera à mettre ces deux approches en perspective.</p>\n<p>Sir Tony Hoare, l'inventeur de la référence <code>null</code> l'appelle aujourd'hui sa <em>billion dollar mistake</em>. Le gars l'a inventé en 1965, on va pas lui en vouloir, mais plus de 50 ans après il serait peut-être temps de reconsidérer le bien fondé du truc et se pencher sur les alternatives qui <strong>éliminent le problème</strong> plutôt que de continuer à mettre des <code>if</code> partout et de continuer à détricoter des stacktraces ne contenant même pas la source du bug.</p>\n<p>Bisous.</p>\n"}