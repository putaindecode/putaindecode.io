{"slug":"reason-react-pour-une-ui-qu-elle-est-bien-typee","filename":"2017-11-09-reason-react-pour-une-ui-qu-elle-est-bien-typee","title":"ReasonReact, pour une UI qu'elle est bien typ√©e","date":"Thu, 09 Nov 2017 00:00:00 GMT","draft":false,"meta":{"date":"2017-11-09T00:00:00.000Z","title":"ReasonReact, pour une UI qu'elle est bien typ√©e","author":"bloodyowl","oldSlug":"reason/reasonreact","slug":"reason-react-pour-une-ui-qu-elle-est-bien-typee"},"body":"<p>Si comme moi, depuis l‚Äôapparition de React, vous vous √™tes de plus en int√©ress√©s\nau typage pour vos applications front (c'est √ßa de commencer avec JS‚Ä¶), vous\navez certainement utilis√© les <code>propTypes</code> au d√©but en vous disant &quot;putain c'est\ncool de v√©rifier les types, √ßa m'√©vite bien des probl√®mes&quot;. Puis c‚Äô√©tait sympa\nmais bon, faut quand m√™me ex√©cuter le bout de code qui p√®te et il est peut-√™tre\nsuper chiant d'y acc√©der dans l'app. Du coup, vous vous √™tes s√ªrement tourn√©s\nvers Flow ou TypeScript.</p>\n<p>Dans cet article, on va d√©couvrir la <em>next-step</em> dans ce cheminement : √©crire\nnos composants React dans un langage statiquement et fortement typ√©: Reason üöÄ.\nReason, c'est OCaml, avec son type-system puissant et une syntaxe plus simple\nquand on vient du JS. Si vous n‚Äôavez pas lu\n<a href=\"/fr/articles/reason/introduction-reason/\">l‚Äôintroduction √† ce langage</a>, c‚Äôest\nle moment.</p>\n<p>L√†, je vais vous pr√©senter <strong>ReasonReact</strong>, des bindings API par dessus React\nsupport√©s officiellement par l'√©quipe de Reason. Facebook <em>dogfood</em> la solution\npuisqu'elle est utilis√©e sur messenger.com pour la majeure partie de ses\ncomposants.</p>\n<h2>Stateless</h2>\n<p>Commen√ßons par le traditionnel HelloWorld‚Ñ¢ :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* Un composant ReasonReact se cr√©e en deux temps: d&#x27;abord on cr√©e le `component`\n   √† partir d‚Äôun appel √† `statelessComponent` ou `reducerComponent` (il existe d&#x27;autres\n   cas plus avanc√©s, mais on s&#x27;y attardera pas dans cet article d&#x27;introduction). */</span>\n<span class=\"hljs-keyword\">let</span> component = ReasonReact.statelessComponent(<span class=\"hljs-string\">&quot;HelloWorld&quot;</span>);\n\n<span class=\"hljs-comment\">/* Ensuite, on d√©clare une fonction `make` qui prend des arguments nomm√©s\n   (qui √©quivalent aux `props` de React) et un dernier argument non-nomm√©,\n   contenant les `children`. Cette fonction doit retourner un record, dans\n   lequel on spread notre `component` et dans lequel on d√©finit une propri√©t√©\n   `render` qui prend comme param√®tre `self` (√©quivalent du `this`) et qui retourne\n   un √©l√©ment React. L√†-dessus √ßa devrait pas trop vous chambouler de ce que\n   vous connaissez de React.\n   On peut remarquer que les props sont les arguments de la fonction `make`,\n   comme avec les composants fonctionnels de React.*/</span>\n<span class=\"hljs-keyword\">let</span> make = <span class=\"hljs-function\">(<span class=\"hljs-params\">~message, _children</span>) =&gt;</span> {\n  ...component,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">_self</span>) =&gt;</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      (ReasonReact.stringToElement message)\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n};\n</code></pre>\n<p>Et pour monter le composant :</p>\n<pre><code class=\"hljs language-js\">ReactDOMRe.renderToElementWithId(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloWorld</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Helloworld&quot;</span> /&gt;</span></span>, <span class=\"hljs-string\">&quot;root&quot;</span>);\n</code></pre>\n<p>Un des gros avantages √† utiliser Reason, c‚Äôest que le langage est capable\nd‚Äôinf√©rer la grande majorit√© des types et sera en mesure de d√©tecter dans toute\nl‚Äôapp si quelque chose n‚Äôest pas pass√© correctement : pour le langage, il s‚Äòagit\nsimplement de fonctions qui appellent d‚Äôautres fonctions, et les langages\nfonctionnels statiquement et fortement typ√©s sont plut√¥t pas d√©gueulasses pour\n√ßa.</p>\n<h2>Stateful</h2>\n<p>La petite particularit√© de ReasonReact vis √† vis des composants stateful, c‚Äôest\nque les mises √† jour d'√©tats doivent passer par un reducer, comme si chaque\ncomposant embarquait sa petite impl√©mentation de redux.</p>\n<p>Maintenant, comment qu'on fait pour cr√©er un composant stateful ?</p>\n<p>On commence par d√©finir le type du state : contrairement √† JS, il ne s'agit pas\nforc√©ment d'un objet, √ßa peut √™tre une cha√Æne de caract√®re, un entier, un\nvariant, un boolean, un arbuste, une map, un jus de fruits frais, un tableau,\nwhatever.</p>\n<pre><code class=\"hljs language-js\">type state = {\n  <span class=\"hljs-attr\">counter</span>: int,\n};\n</code></pre>\n<p>On va d√©finir notre type action, sous la forme de variants: chaque variant\nrepr√©sente un des type d‚Äôaction possible. Pour bien se repr√©senter ce qu'est une\naction, c‚Äôest un token, contenant possiblement des param√®tres, qu‚Äôon va envoyer\n√† notre fameux reducer qui, lui, retournera une r√©action √† cette action.</p>\n<pre><code class=\"hljs language-js\">type action = Increment | Decrement;\n</code></pre>\n<p>Dans le composant retourn√© par <code>make</code>, on ajoute une fonction <code>initialState</code> qui\nretourne‚Ä¶ l'√©tat initial (c'est bien, vous suivez), et une fonction <code>reducer</code>,\nqui effectue un pattern-matching sur l‚Äôaction et retourne une update. Cette\nfonction prend deux param√®tres: l'<code>action</code> √† traiter et le <code>state</code> √† jour (comme\nlorsque l'on passe un callback √† <code>setState</code> dans l'√©quivalent JavaScript\n<code>setState(state =&gt; newState)</code>).</p>\n<p>L‚Äôupdate retourn√©e indique au component comment il doit se mettre √† jour (ici\nsont list√©s les cas courants) :</p>\n<ul>\n<li><code>NoUpdate</code>, pour ne rien faire</li>\n<li><code>Update</code>, pour mettre √† jour l‚Äô√©tat et re-rendre le composant</li>\n<li><code>SideEffect</code> pour lancer un effet de bord (e.g. une requ√™te r√©seau)</li>\n<li><code>UpdateWithSideEffect</code>, pour changer le state et lancer un effet de bord (e.g.\nafficher un loader et lancer une requ√™te)</li>\n</ul>\n<p><em>Wrapping up</em> :</p>\n<pre><code class=\"hljs language-js\">type state = {<span class=\"hljs-attr\">counter</span>: int};\n\ntype action =\n  | Increment\n  | Decrement;\n\n<span class=\"hljs-comment\">/* Il faut bien d√©finir le `component` **apr√®s** les types `state` et `action`, pour qu&#x27;il puisse les lire */</span>\n<span class=\"hljs-keyword\">let</span> component = ReasonReact.reducerComponent(<span class=\"hljs-string\">&quot;Count&quot;</span>);\n\n<span class=\"hljs-keyword\">let</span> make = <span class=\"hljs-function\">(<span class=\"hljs-params\">~initialCounter=<span class=\"hljs-number\">0</span>, _</span>) =&gt;</span> {\n  ...component,\n  <span class=\"hljs-attr\">initialState</span>: <span class=\"hljs-function\">() =&gt;</span> {<span class=\"hljs-attr\">counter</span>: initialCounter},\n  <span class=\"hljs-attr\">reducer</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">action, state</span>) =&gt;</span>\n    <span class=\"hljs-comment\">/* Toutes mes updates passent par l√†, bien pratique pour qu&#x27;une\n      personne puisse aborder rapidement le composant */</span>\n    <span class=\"hljs-keyword\">switch</span> action {\n    | <span class=\"hljs-function\"><span class=\"hljs-params\">Increment</span> =&gt;</span> ReasonReact.Update({<span class=\"hljs-attr\">counter</span>: state.counter + <span class=\"hljs-number\">1</span>})\n    | <span class=\"hljs-function\"><span class=\"hljs-params\">Decrement</span> =&gt;</span> ReasonReact.Update({<span class=\"hljs-attr\">counter</span>: max(<span class=\"hljs-number\">0</span>, state.counter - <span class=\"hljs-number\">1</span>)})\n    },\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{state, reduce}</span>) =&gt;</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      (ReasonReact.stringToElement(state.counter |&gt; string_of_int))\n      /* La fonction reduce prend une fonction qui retourne l&#x27;action.\n           Il s&#x27;agit d&#x27;une fonction pour lire les propri√©t√©s des\n           events (qui sont pooled dans React) de mani√®re synchrone, alors\n           que le reducer est appel√© de mani√®re asynchrone.\n         */\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">(reduce((_event)</span> =&gt;</span> Decrement))&gt; (ReasonReact.stringToElement(&quot;-&quot;)) <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">(reduce((_event)</span> =&gt;</span> Increment))&gt; (ReasonReact.stringToElement(&quot;+&quot;)) <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n};\n</code></pre>\n<p>et hop:</p>\n<pre><code class=\"hljs language-js\">ReactDOM.renderToElementWithId(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Count</span> <span class=\"hljs-attr\">initialCount</span>=<span class=\"hljs-string\">0</span> /&gt;</span></span>, <span class=\"hljs-string\">&quot;App&quot;</span>);\n</code></pre>\n<h2>With side-effects</h2>\n<p>Bien que √ßa puisse para√Ætre un peu lourd de devoir faire un <code>reducer</code> pour g√©rer\nses updates, √ßa apporte quand m√™me:</p>\n<ul>\n<li>Un seul endroit par composant o√π toutes les updates passent</li>\n<li>La possibilit√© pour le compiler de d√©tecter si l'on oublie de g√©rer des\nactions</li>\n<li>De g√©rer lisiblement et uniform√©ment les effets de bord</li>\n</ul>\n<p><img src=\"/public/images/articles/2017-11-09-reason-react-pour-une-ui-qu-elle-est-bien-typee/terminal.png\" alt=\"\" /></p>\n<p>Exemple ici avec un composant o√π on va faire comme si on r√©cup√©rait\nl'utilisateur connect√© sur une API.</p>\n<pre><code class=\"hljs language-js\">let resolveAfter = (ms) =&gt;\n  Js.Promise.make(\n    (~resolve, ~reject as _) =&gt; ignore(Js.Global.setTimeout(() =&gt; [@bs] resolve(ms), ms))\n  );\n\nmodule User = {\n  type t = {username: string};\n  /* faisons comme si on avait un appel serveur\n     (je le fais comme √ßa pour que vous puissiez copier/coller le code\n     pour essayer chez vous) */\n  let getUser = (_) =&gt;\n    resolveAfter(1000)\n    |&gt; Js.Promise.then_(\n         (_) =&gt;\n           Js.Promise.resolve({\n             username: &quot;MyUsername&quot; ++ string_of_int(Js.Math.random_int(0, 9999))\n           })\n       );\n};\n\n/* Le &quot;user&quot; distant peut avoir 4 √©tats possibles ici */\ntype resource(&#x27;a) =\n  | Inactive\n  | Loading\n  | Idle(&#x27;a)\n  | Errored;\n\ntype action =\n  | Load\n  | Receive(resource(User.t));\n\ntype state = {user: resource(User.t)};\n\nlet component = ReasonReact.reducerComponent(&quot;User&quot;);\n\nlet getUser = (credentials, {ReasonReact.reduce}) =&gt;\n  ignore(\n    User.getUser(credentials)\n    /* Si tout s&#x27;est bien pass√© */\n    |&gt; Js.Promise.then_(\n         /* On peut utiliser les actions en dehors du `make`: c&#x27;est juste des variants */\n         (payload) =&gt; Js.Promise.resolve(reduce((payload) =&gt; Receive(Idle(payload)), payload))\n       )\n    /* Si √ßa a merd√© */\n    |&gt; Js.Promise.catch((_) =&gt; Js.Promise.resolve(reduce(() =&gt; Receive(Errored), ())))\n  );\n\nlet make = (~credentials, _) =&gt; {\n  ...component,\n  initialState: () =&gt; {user: Inactive},\n  reducer: (action, _state) =&gt;\n    switch action {\n    /* UpdateWithSideEffects met √† jour l&#x27;√©tat, puis lance l&#x27;effet de bord,\n       tr√®s pratique pour ce genre de cas */\n    | Load =&gt; ReasonReact.UpdateWithSideEffects({user: Loading}, getUser(credentials))\n    | Receive(user) =&gt; ReasonReact.Update({user: user})\n    },\n  didMount: ({reduce}) =&gt; {\n    reduce(() =&gt; Load, ());\n    ReasonReact.NoUpdate\n  },\n  render: ({state, reduce}) =&gt;\n    &lt;div&gt;\n      (\n        ReasonReact.stringToElement(\n          switch state.user {\n          | Inactive\n          | Loading =&gt; &quot;Loading ...&quot;\n          | Idle(user) =&gt; &quot;Hello &quot; ++ user.username\n          | Errored =&gt; &quot;An error occured&quot;\n          }\n        )\n      )\n      &lt;div&gt;\n        &lt;button\n          disabled=(\n            switch state.user {\n            | Idle(_) =&gt; Js.false_\n            | _ =&gt; Js.true_\n            }\n          )\n          onClick=(reduce((_) =&gt; Load))&gt;\n          (ReasonReact.stringToElement(&quot;Reload&quot;))\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n};\n</code></pre>\n<h2>Oui mais est-ce que je peux l'utiliser aujourd'hui alors que j'ai d√©j√† une grosse codebase React ?</h2>\n<p><img src=\"/public/images/articles/2017-11-09-reason-react-pour-une-ui-qu-elle-est-bien-typee/tenor.gif\" alt=\"\" /></p>\n<p>Pour utiliser des composants ReasonReact avec React</p>\n<pre><code class=\"hljs language-js\">let jsComponent =\n  ReasonReact.wrapReasonForJs(\n    ~component,\n    (jsProps) =&gt;\n      make(\n        ~credentials=jsProps##credentials,\n        [||]\n      )\n  );\n</code></pre>\n<p>et</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> MyComponent = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path/to/reason/output&quot;</span>).jsComponent;\n</code></pre>\n<p>√Ä l'inverse, pour utiliser des composants React avec ReasonReact</p>\n<pre><code class=\"hljs language-js\">[@bs.module <span class=\"hljs-string\">&quot;path/to/good/old/reactjs/component&quot;</span>] external myJsComponent : ReasonReact.reactClass = <span class=\"hljs-string\">&quot;default&quot;</span>;\n\n<span class=\"hljs-keyword\">let</span> make = <span class=\"hljs-function\">(<span class=\"hljs-params\">~message: string, _children</span>) =&gt;</span>\n  ReasonReact.wrapJsForReason(\n    ~reactClass=myJsComponent,\n    ~props={<span class=\"hljs-string\">&quot;message&quot;</span>: message},\n    [||]\n  );\n</code></pre>\n<p>Voil√† pour les <em>basics</em> de ReasonReact. Pour en savoir plus, y a\n<a href=\"https://reasonml.github.io/reason-react/\">la petite doc qui va bien</a>, et on\nvous pr√©parera un petit article sur les aspects un peu plus avanc√©s de l'usage.</p>\n<p>Bisous bisous.</p>\n"}