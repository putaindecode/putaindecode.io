{"slug":"ecrire-des-high-order-components-reutilisables-avec-recompose","filename":"2018-03-26-ecrire-des-high-order-components-reutilisables-avec-recompose","title":"√âcrire des high-order components r√©utilisables avec Recompose","date":"Mon, 26 Mar 2018 00:00:00 GMT","draft":false,"meta":{"date":"2018-03-26T00:00:00.000Z","title":"√âcrire des high-order components r√©utilisables avec Recompose","author":"scastiel","oldSlug":"js/react/hoc-reutilisables-recompose","slug":"ecrire-des-high-order-components-reutilisables-avec-recompose"},"body":"<p>√âcrire des composants r√©utilisables est (ou devrait √™tre) l‚Äôun des objectifs de\ntout d√©veloppeur React. Que ce soit pour cr√©er une bo√Æte √† outils de composants\nstyl√©s, pour mutualiser des comportements communs, etc.</p>\n<p>M√™me en ayant fr√©quemment utilis√© des <em>high-order components</em> (avec\n<em>React-Redux</em> par exemple), ce n‚Äôest que r√©cemment que j‚Äôai entendu parler de\nl‚Äôopportunit√© qu‚Äôils offraient pour √©crire des composants r√©utilisables, en\nparticulier gr√¢ce √† une fantastique biblioth√®que :\n<a href=\"https://github.com/acdlite/recompose\">Recompose</a>. Voyons comment avec un\nexemple concret et complet.</p>\n<p>Si vous n‚Äôavez jamais entendu parler de <em>high-order components</em> (HOC) avant,\nsachez simplement qu‚Äôun HOC n‚Äôest finalement rien d‚Äôautre qu‚Äôune fonction qui\nprend en param√®tre une d√©finition de composant (classe ou fonction), et renvoie\nune nouvelle d√©finition de composant, qui ajoute du comportement √† la premi√®re.\nIl s‚Äôagit en fait du pattern\n<a href=\"https://en.wikipedia.org/wiki/Decorator_pattern\"><em>D√©corateur</em></a> appliqu√© aux\ncomposants React.</p>\n<p>Sur le site de React vous trouverez une\n<a href=\"https://reactjs.org/docs/higher-order-components.html\">page tr√®s fournie</a> si\nvous souhaitez en savoir plus sur les HOC. Il y a √©galement un\n<a href=\"/fr/articles/js/react/higher-order-component/#le-pattern-higher-order-component\">tr√®s bon article sur Putain de code</a>\npr√©sentant les HOC √† travers un autre cas d‚Äôutilisation (le pattern <em>provider</em>).</p>\n<p>Un exemple tr√®s simple :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> addBorder = <span class=\"hljs-function\"><span class=\"hljs-params\">borderWidth</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">Component</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">borderColor:</span> &quot;<span class=\"hljs-attr\">black</span>&quot;, <span class=\"hljs-attr\">borderStyle:</span> &quot;<span class=\"hljs-attr\">solid</span>&quot;, <span class=\"hljs-attr\">borderWidth</span> }}&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n);\n\n<span class=\"hljs-keyword\">const</span> MyText = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n\n<span class=\"hljs-keyword\">const</span> MyTextWithBorder = addBorder(<span class=\"hljs-number\">5</span>)(MyText);\n</code></pre>\n<p>Vous obtenez un composant <code>MyTextWithBorder</code> qui affiche le texte ¬´ Hello ¬ª avec\nune bordure de 5 pixels. Ici, <code>addBorder</code> est ce que l‚Äôon appelle un <em>high-order\ncomponent</em>.</p>\n<p>Quel est l‚Äôint√©r√™t d‚Äôun HOC ? Et bien un pattern tr√®s utile est d‚Äôextraire un\ncomportement partag√© par plusieurs composants dans des fonctions r√©utilisables.\nSi vous avez utilis√© React avec Redux et React-Redux, vous avez sans doute\nutilis√© le HOC <code>connect</code> pour faire le mapping de l‚Äô√©tat et des actions avec les\npropri√©t√©s.</p>\n<h2>Exemple : champ de saisie d‚Äôun num√©ro de t√©l√©phone</h2>\n<p>Comme exemple complet pour cette article, nous allons utiliser le concept d‚ÄôHOC\npour cr√©er un champ de saisie de num√©ro de t√©l√©phone, qui :</p>\n<ul>\n<li>n‚Äôacceptera que les chiffres, parenth√®ses, tirets et espaces en entr√©e (√† la\nfrappe) ;</li>\n<li>mettra en forme le num√©ro de t√©l√©phone lorsque le focus sera perdu par le\nchamp (√©v√®nement <em>blur</em>). (Seuls les num√©ros de t√©l√©phone Nord-Americains\nseront pris en compte : ¬´ (514) 555-0199 ¬ª.)</li>\n</ul>\n<figure>\n  <img src=\"/public/images/articles/2018-03-26-ecrire-des-high-order-components-reutilisables-avec-recompose/phoneNumberInput.gif\" alt=\"Champ de saisie de num√©ro de t√©l√©phone\" />\n  <figcaption>Notre champ de saisie de num√©ro de t√©l√©phone</figcaption>\n</figure>\n<p>Notez que l‚Äôon supposera que notre champs sera contr√¥l√©, c‚Äôest-√†-dire que nous\nutiliserons les propri√©t√©s <code>value</code> et <code>onChange</code> pour savoir quel texte afficher\net comment le mettre √† jour. Nous souhaitons √©galement que la valeur ne\ncontienne que les chiffres du num√©ro de t√©l√©phone (¬´ 5145550199 ¬ª), sans se\nsoucier de la mise en forme, et donc que le <code>onChange</code> soit appel√© avec les\nchiffres uniquement (dans <code>event.target.value</code>).</p>\n<p>Pour rendre notre HOC plus facile √† √©crire et maintenir, nous utiserons la\nbiblioth√®que <em>Recompose</em>, qui propose un grand nombre de fonctions utilitaires\npour √©crire des HOC. Nous en verrons quelques-unes dans cet article.</p>\n<p>Pour d√©velopper notre composant nous cr√©erons deux HOC r√©utilisables, un pour\nchacun des points ci-dessus. Cela signifie que nous souhaitons que notre\ncomposant final soit d√©fini ainsi :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> PhoneNumberInput = formatPhoneNumber(\n  forbidNonPhoneNumberCharacters(<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span></span>),\n);\n</code></pre>\n<p>C‚Äôest le bon moment pour introduire la premi√®re fonction de <em>Recompose</em> que nous\nutiliserons : <code>compose</code>. Elle effectue la composition de plusieurs HOC pour les\nfusionner en un seul, de sorte que nous pouvons √©crire plus simplement :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> PhoneNumberInput = compose(\n  formatPhoneNumber,\n  forbidNonPhoneNumberCharacters,\n)(<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span></span>);\n</code></pre>\n<p>Et parce que nous souhaitons rendre nos HOC aussi r√©utilisable que possible\n(pour mettre en forme autre chose que des num√©ros de t√©l√©phone par exemple),\nrendons-les plus g√©n√©riques :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Ne garde que les chiffres, espaces, tirets et parenth√®ses</span>\n<span class=\"hljs-keyword\">const</span> forbiddenCharactersInPhoneNumber = <span class=\"hljs-regexp\">/[^\\d\\s\\-()]/g</span>;\n\n<span class=\"hljs-comment\">// &#x27;5145551234&#x27; =&gt; &#x27;(514) 555-1234&#x27;</span>\n<span class=\"hljs-keyword\">const</span> formatPhoneNumber = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span>\n  value.replace(<span class=\"hljs-regexp\">/^(\\d{3})(\\d{3})(\\d{4})$/</span>, <span class=\"hljs-string\">&quot;($1) $2-$3&quot;</span>);\n\n<span class=\"hljs-comment\">// &#x27;(514) 555-1234&#x27; =&gt; &#x27;5145551234&#x27;</span>\n<span class=\"hljs-keyword\">const</span> parsePhoneNumber = <span class=\"hljs-function\"><span class=\"hljs-params\">formattedPhoneNumber</span> =&gt;</span>\n  formattedPhoneNumber.replace(<span class=\"hljs-regexp\">/[^\\d]/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>).slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n\n<span class=\"hljs-keyword\">const</span> PhoneNumberInput = compose(\n  formatInputValue({\n    <span class=\"hljs-attr\">formatValue</span>: formatPhoneNumber,\n    <span class=\"hljs-attr\">parseValue</span>: parsePhoneNumber,\n  }),\n  forbidCharacters(forbiddenCharactersInPhoneNumber),\n)(<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span></span>);\n</code></pre>\n<p>Ne trouvez-vous pas cela d√©j√† g√©nial si l‚Äôon peut r√©utiliser uniquement nos deux\nHOC pour mettre en forme des montants, des num√©ros de s√©curit√© sociale, tout et\nn‚Äôimporte quoi, juste en utilisant les bons param√®tres ? üòâ</p>\n<p>Le point r√©ellement int√©ressant est qu‚Äôici j‚Äôutilise le composant <code>&lt;input&gt;</code> de\nbase, mais nous pourrions utiliser n‚Äôimporte quel composant, tant qu‚Äôil utilise\nles propri√©t√©s <code>value</code>, <code>onChange</code> et <code>onBlur</code>. Donc on peut imaginer utiliser\nnotre champs de saisie de num√©ros de t√©l√©phone avec React Native, Material-UI,\netc.</p>\n<p>Ok, maintenant passons au plus important, √©crire nos deux HOC en utilisant les\nfonctions que Recompose nous met √† disposition.</p>\n<h2>Premier HOC : n‚Äôaccepter que certains caract√®res</h2>\n<p>L‚Äôid√©e ici est que lorsque la valeur de l‚Äôinput est chang√©e (√©v√®nement\n<code>onChange</code>), on intercepte cet √©v√®nement pour supprimer tout caract√®re interdit\nde la valeur, puis on appelle la propri√©t√© <code>onChange</code> parente avec la valeur\npropre.</p>\n<p>Nous utiliserons ici la fonction <code>withHandlers</code> pour ajouter des nouveaux\n<em>handlers</em> d‚Äô√©v√®nement comme propri√©t√©s du composant encapsul√©. Le bon point est\nque nous avons acc√®s aux propri√©t√©s de notre composant (ici nous utiliserons\n<code>onChange</code>) pour cr√©er notre nouveau handler :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> forbidCharacters = <span class=\"hljs-function\"><span class=\"hljs-params\">forbiddenCharsRegexp</span> =&gt;</span>\n  withHandlers({\n    <span class=\"hljs-attr\">onChange</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n      <span class=\"hljs-comment\">// N‚Äôoublions pas que `onChange` n‚Äôest pas une propri√©t√© requise</span>\n      <span class=\"hljs-comment\">// (m√™me si rien ne se produira si elle est absente).</span>\n      <span class=\"hljs-keyword\">if</span> (props.onChange) {\n        <span class=\"hljs-keyword\">const</span> value = event.target.value;\n        <span class=\"hljs-keyword\">const</span> cleanValue = value.replace(forbiddenCharsRegexp, <span class=\"hljs-string\">&quot;&quot;</span>);\n        <span class=\"hljs-comment\">// On ne modifie pas l‚Äô√©v√®nement original, mais on le clone</span>\n        <span class=\"hljs-comment\">// en y red√©finissant event.target.value avec la valeur propre.</span>\n        <span class=\"hljs-keyword\">const</span> newEvent = {\n          ...event,\n          <span class=\"hljs-attr\">target</span>: { ...event.target, <span class=\"hljs-attr\">value</span>: cleanValue },\n        };\n        <span class=\"hljs-comment\">// On r√©√©met notre √©v√®nement au `onChange` parent.</span>\n        props.onChange(newEvent);\n      }\n    },\n  });\n</code></pre>\n<p>Souvenez-vous qu‚Äôautant que possible le composant que nous cr√©ons √† partir d‚Äôun\nautre doit respecter l‚Äôinterface de ce dernier. Il doit donc accepter les m√™mes\npropri√©t√©s avec le m√™me type.</p>\n<p>√Ä pr√©sent si nous souhaitons par exemple cr√©er un champ n‚Äôacceptant que les\nchiffres, nous pouvons √©crire :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> NumericField = forbidCharacters(<span class=\"hljs-regexp\">/[^\\d]/g</span>)(<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span></span>);\n</code></pre>\n<p>Nous avons maintenant notre premier HOC pour interdire certains caract√®res;\n√©crivons √† pr√©sent le deuxi√®me, l√©g√®rement plus complexe, pour mettre en forme\nla valeur entr√©e par l‚Äôutilisateur.</p>\n<h2>Deuxi√®me HOC : mettre en forme la valeur entr√©e</h2>\n<p>Pour notre deuxi√®me HOC, nous devrons avoir dans notre composant un √©tat local\npour stocker la valeur entr√©e dans le champs sans la passer au composant parent.\nN‚Äôoubliez pas que nous souhaitons mettre en forme la valeur uniquement lorsque\nle focus sort du champs (√©v√®nement <em>blur</em>).</p>\n<p>Recompose d√©finit une fonction tr√®s simple pour ajouter un √©tat local √† un\ncomposant : <code>withState</code>. Elle prend en param√®tre le nom de l‚Äôattribut dans\nl‚Äô√©tat (qui sera donn√© comme propri√©t√© au composant enfant), le nom de la\npropri√©t√© contenant la fonction pour mettre √† jour cet √©tat (√©galement donn√©e\ncomme propri√©t√©), et la valeur initiale (valeur statique, ou bien fonction\nprenant en param√®tre les propri√©t√©s et retournant la valeur initiale).</p>\n<p>Pour ajouter notre √©tat local nous √©crirons :</p>\n<pre><code class=\"hljs language-js\">withState(\n  <span class=\"hljs-string\">&quot;inputValue&quot;</span>,\n  <span class=\"hljs-string\">&quot;setInputValue&quot;</span>,\n  <span class=\"hljs-comment\">// `formatValue` est l‚Äôun des param√®tres de notre HOC</span>\n  <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> formatValue(props.value),\n);\n</code></pre>\n<p>Facile, non ? üòâ</p>\n<p>Maintenant que l‚Äôon a notre √©tat, nous devons le mettre √† jour lorsque la valeur\nde l‚Äôinput est modifi√©e, donc nous d√©finirons un handler <code>onChange</code> personnalis√©\n:</p>\n<pre><code class=\"hljs language-js\">withHandlers({\n  <span class=\"hljs-attr\">onChange</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n    props.setInputValue(event.target.value)\n  }\n  <span class=\"hljs-comment\">// ...</span>\n</code></pre>\n<p>Et √† l‚Äô√©v√®nement <em>blur</em>, nous mettrons en forme la valeur, appelerons les\n<code>onChange</code> et <code>onBlur</code> parents, puis mettrons en forme √©galement la valeur\naffich√©e :</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-attr\">onBlur</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// parseValue est l‚Äôautre param√®tre de notre HOC</span>\n    <span class=\"hljs-keyword\">const</span> parsedValue = parseValue(props.inputValue)\n    <span class=\"hljs-keyword\">const</span> formattedValue = formatValue(parsedValue)\n    props.setInputValue(formattedValue)\n    <span class=\"hljs-comment\">// On ne modifie pas l‚Äô√©v√®nement original, mais on le clone</span>\n    <span class=\"hljs-comment\">// en y red√©finissant event.target.value avec la valeur propre.</span>\n    <span class=\"hljs-keyword\">const</span> newEvent = {\n      ...event,\n      <span class=\"hljs-attr\">target</span>: { ...event.target, <span class=\"hljs-attr\">value</span>: parsedValue }\n    }\n    <span class=\"hljs-keyword\">if</span> (props.onChange) {\n      props.onChange(newEvent)\n    }\n    <span class=\"hljs-keyword\">if</span> (props.onBlur) {\n      props.onBlur(newEvent)\n    }\n  }\n)\n</code></pre>\n<p>La derni√®re √©tape pour notre HOC consiste √† nous assurer que seules les\npropri√©t√©s accept√©es par <code>&lt;input&gt;</code> lui seront pass√©es. Pour cela on utilisera la\nfonction <code>mapProps</code> de Recompose pour cr√©er un nouvel objet de propri√©t√©s √†\npartir des propri√©t√©s existantes, ainsi que la fonction <code>omit</code> de <em>lodash</em> pour\nexclure certaines propri√©t√©s d‚Äôun objet pour en cr√©er un nouveau :</p>\n<pre><code class=\"hljs language-js\">mapProps(<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> ({\n  ...omit(props, [<span class=\"hljs-string\">&quot;inputValue&quot;</span>, <span class=\"hljs-string\">&quot;setInputValue&quot;</span>]),\n  <span class=\"hljs-attr\">value</span>: props.inputValue,\n}));\n</code></pre>\n<p>En assemblant le tout avec <code>compose</code>, on obtient :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> formatInputValue = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ formatValue, parseValue }</span>) =&gt;</span>\n  compose(\n    withState(<span class=\"hljs-string\">&quot;inputValue&quot;</span>, <span class=\"hljs-string\">&quot;setInputValue&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> formatValue(props.value)),\n    withHandlers({\n      <span class=\"hljs-attr\">onChange</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n        props.setInputValue(event.target.value);\n      },\n      <span class=\"hljs-attr\">onBlur</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> parsedValue = parseValue(props.inputValue);\n        <span class=\"hljs-keyword\">const</span> formattedValue = formatValue(parsedValue);\n        props.setInputValue(formattedValue);\n        <span class=\"hljs-keyword\">const</span> newEvent = {\n          ...event,\n          <span class=\"hljs-attr\">target</span>: { ...event.target, <span class=\"hljs-attr\">value</span>: parsedValue },\n        };\n        <span class=\"hljs-keyword\">if</span> (props.onChange) {\n          props.onChange(newEvent);\n        }\n        <span class=\"hljs-keyword\">if</span> (props.onBlur) {\n          props.onBlur(newEvent);\n        }\n      },\n    }),\n    mapProps(<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> ({\n      ...omit(props, [<span class=\"hljs-string\">&quot;inputValue&quot;</span>, <span class=\"hljs-string\">&quot;setInputValue&quot;</span>]),\n      <span class=\"hljs-attr\">value</span>: props.inputValue,\n    })),\n  );\n</code></pre>\n<p>Et voil√† ! Nous avons deux <em>high-order components</em>, on peut les utiliser pour\ncr√©er notre champs de saisie de num√©ro de t√©l√©phone ! Ci-dessous vous trouverez\nle JSFiddle content le code source complet de cet exemple, et vous permet de\ntester le r√©sultat. N‚Äôh√©sitez pas √† forker le\n<a href=\"https://jsfiddle.net/scastiel/prme4k6L/\">JSFiddle</a> pour jouer avec Recompose ou\ncr√©er vos propres HOC.</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/scastiel/prme4k6L/8/embedded/js,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<h2>Les <em>render props</em> : une alternative aux <em>high-order components</em> ?</h2>\n<p>√âcrire des composants r√©utilisables est tout √† fait possible sans utiliser de\nHOC. Pour reprendre notre exemple de champ de saisie de num√©ro de t√©l√©phone nous\npourrions cr√©er un composant <code>FormattedInput</code>, qui prendrait en param√®tres\n(propri√©t√©) les caract√®res autoris√©s d‚Äôune part, et les fonctions de formattage\nd‚Äôautre part. Il resterait un inconv√©nient √† cette m√©thode : cela vous contraint\n√† n‚Äôutiliser qu‚Äôun type de champ fix√© √† l‚Äôavance, par exemple <code>&lt;input&gt;</code>.</p>\n<p>C‚Äôest l√† qu‚Äôintervient un concept particuli√®rement int√©ressant : celui des\n<em>render props</em>. Tout simplement, cela consiste √† passer en propri√©t√© de votre\ncomposant une fonction permettant de g√©n√©rer un autre composant, qui sera une\ncomposante du premier.</p>\n<p>Par exemple notre <code>PhoneNumberInput</code> pourrait nous laisser la possibilit√© de lui\nindiquer comment g√©n√©rer un champ de saisie (sur lequel il ajoutera le\ncomportement sp√©cifique, ici la mise en forme) :</p>\n<pre><code class=\"hljs language-js\">&lt;PhoneNumberInput renderInput={<span class=\"hljs-function\"><span class=\"hljs-params\">inputProps</span> =&gt;</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> {<span class=\"hljs-attr\">...inputProps</span>} /&gt;</span></span>} /&gt;\n</code></pre>\n<p>Il y aurait de quoi √©crire un article entier sur les <em>render props</em>, et selon\nmoi il serait dommage de les voir comme une sorte de ¬´ concurrent ¬ª des HOC ;\nles deux peuvent r√©pondre √† des probl√©matiques parfois similaires, parfois\ndiff√©rentes.</p>\n<p>Pour en savoir plus sur les <em>render props</em> la\n<a href=\"https://reactjs.org/docs/render-props.html\">page consacr√©e de la documentation de React</a>\nest tr√®s d√©taill√©e et donne √©galement de bons exemples d‚Äôutilisation.</p>\n<h2>En conclusion‚Ä¶</h2>\n<p>J‚Äôesp√®re que cet article vous a donn√© envie d‚Äôen savoir plus √† propos de\nRecompose et des <em>high-order components</em> en g√©n√©ral. Je suis convaincu que les\nHOC cr√©ent une nouvelle mani√®re d‚Äô√©crire des composants r√©utilisables ; on en\nentendra sans aucun doute parler de plus en plus dans le futur üòÄ.</p>\n<p>Quelques ressources pour aller plus loin :</p>\n<ul>\n<li>La\n<a href=\"https://github.com/acdlite/recompose/blob/master/docs/API.md\">documentation de l‚ÄôAPI de Recompose</a>\nest assez compl√®te, bien que selon moi elle manque parfois d‚Äôexemples pour\ncomprendre certaines fonctions complexes ;</li>\n<li>La\n<a href=\"https://reactjs.org/docs/higher-order-components.html\">page de React √† propos des HOC</a>\ncontient un grand nombre d‚Äôinformations, par exemple ce que vous ne devriez\npas faire avec les HOC üòâ ;</li>\n<li><dl>\n<dt><a href=\"https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e\">React Higher Order Components in depth</a></dt>\n<dd>une tr√®s bonne introduction aux HOC ;\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><a href=\"https://medium.com/javascript-inside/why-the-hipsters-recompose-everything-23ac08748198\">Why The Hipsters Recompose Everything</a></dt>\n<dd>une introduction sympa √† Recompose (semble un peu dat√©e‚Ä¶).\n</dd>\n</dl>\n</li>\n<li><a href=\"https://reactjs.org/docs/render-props.html\">La documentation de React sur les <em>render props</em></a></li>\n<li><a href=\"/fr/articles/js/react/higher-order-component/#le-pattern-higher-order-component\">Les patterns Provider &amp; Higher-Order Component avec React</a>\nsur Putain de code</li>\n</ul>\n<p><em>Cet article est (pour la plus grande partie) la traduction en fran√ßais de mon\narticle initialement en anglais disponible sur mon blog :\n<a href=\"https://blog.castiel.me/posts/006-reusable-hoc-with-recompose.html\">Create reusable high-order React components with Recompose</a>.</em></p>\n"}