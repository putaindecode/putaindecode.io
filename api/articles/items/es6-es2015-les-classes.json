{"slug":"es6-es2015-les-classes","filename":"2015-12-05-es6-es2015-les-classes","title":"ES6, ES2015 : les classes","date":"Sat, 05 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-05T00:00:00.000Z","title":"ES6, ES2015 : les classes","author":"magsout","oldSlug":"js/es2015/classes","slug":"es6-es2015-les-classes"},"body":"<p>Les classes introduites par <code>ES2015</code> ne sont clairement que du sucre syntaxique.\nElles n'apportent rien de plus en terme de fonctionnalité. Toutefois, l'objectif\nde cette évolution est de rendre le code plus lisible et plus facilement\naccessible.</p>\n<h2>Déclaration de classes</h2>\n<p>Oubliez les fonctions anonymes et les prototypes, la sémantique a pris le\nrelais, comme vous pouvez le constater dans l'exemple de déclaration de la\nclasse <code>User</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-comment\">// méthode constructor</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">firstname, lastname</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.firstname = firstname;\n    <span class=\"hljs-built_in\">this</span>.lastname = lastname;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">sayName</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.firstname}</span> <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.lastname}</span>`</span>;\n  }\n}\n\n<span class=\"hljs-comment\">// instanciation</span>\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">&quot;John&quot;</span>, <span class=\"hljs-string\">&quot;Doe&quot;</span>);\n\n<span class=\"hljs-comment\">// appel de la méthode sayName()</span>\n<span class=\"hljs-built_in\">console</span>.log(user.sayName()); <span class=\"hljs-comment\">// John Doe</span>\n</code></pre>\n<p>Pour rappel, voici une\n<a href=\"https://gist.github.com/magsout/a876b2fa8240a987e523\">façon possible d'écrire</a>\ncette classe en <code>es5</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\">firstname, lastname</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-built_in\">this</span> <span class=\"hljs-keyword\">instanceof</span> User)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">&quot;Class constructors cannot be invoked without &#x27;new&#x27;&quot;</span>);\n  }\n  <span class=\"hljs-built_in\">this</span>.firstname = firstname;\n  <span class=\"hljs-built_in\">this</span>.lastname = lastname;\n}\n\nUser.prototype.sayName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstname + <span class=\"hljs-string\">&quot; &quot;</span> + <span class=\"hljs-built_in\">this</span>.lastname;\n};\n\n<span class=\"hljs-comment\">// instanciation</span>\n<span class=\"hljs-keyword\">var</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">&quot;John&quot;</span>, <span class=\"hljs-string\">&quot;Doe&quot;</span>);\n\n<span class=\"hljs-comment\">// appel de la méthode sayName()</span>\n<span class=\"hljs-built_in\">console</span>.log(user.sayName()); <span class=\"hljs-comment\">// John Doe</span>\n</code></pre>\n<h2>Expressions de classes</h2>\n<p>Toutes les méthodes s'écrivent comme de simples fonctions à l'intérieur de la\nclasse. Bien entendu, les getter/setter sont toujours de la partie mais bien\nplus simples à utiliser :</p>\n<pre><code class=\"hljs language-JS\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-comment\">// constructor</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">firstname, lastname, type</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.firstname = firstname\n    <span class=\"hljs-built_in\">this</span>.lastname = lastname\n    <span class=\"hljs-built_in\">this</span>.type = type\n  }\n\n  <span class=\"hljs-comment\">// méthode</span>\n  <span class=\"hljs-function\"><span class=\"hljs-title\">sayName</span>(<span class=\"hljs-params\"></span>)</span> {\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.firstname}</span>  <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.lastname}</span>`</span>\n  }\n\n  <span class=\"hljs-comment\">// getter</span>\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">role</span>() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.type\n  }\n\n  <span class=\"hljs-comment\">// setter</span>\n  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">role</span>(<span class=\"hljs-params\">value</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.type = value\n  }\n}\n\n<span class=\"hljs-comment\">// le `new` est obligatoire pour appeler une classe</span>\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">&quot;John&quot;</span>, <span class=\"hljs-string\">&quot;Doe&quot;</span>, <span class=\"hljs-string\">&quot;Contributor&quot;</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(user.sayName()) <span class=\"hljs-comment\">// John Doe</span>\n<span class=\"hljs-built_in\">console</span>.log(user.role) <span class=\"hljs-comment\">// Contributor</span>\nuser.role = <span class=\"hljs-string\">&quot;Owner&quot;</span>\n<span class=\"hljs-built_in\">console</span>.log(user.role) <span class=\"hljs-comment\">// Owner</span>\n</code></pre>\n<h2>L'héritage</h2>\n<p>Pour qu'une sous-classe hérite d'une autre classe on utilisera le mot clé\n<code>extends</code>.</p>\n<p>En utilisant notre exemple précédent :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Contributor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">firstname, lastname, numberCommit</span>)</span> {\n    <span class=\"hljs-comment\">// le mot clé super est utilisé comme super contructeur. Il permet d&#x27;appeler</span>\n    <span class=\"hljs-comment\">// et d&#x27;avoir accès aux méthodes du parent</span>\n    <span class=\"hljs-built_in\">super</span>(firstname, lastname);\n    <span class=\"hljs-built_in\">this</span>.numberCommit = numberCommit;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">sayNameWithCommit</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-comment\">// on peut appeler une méthode de la classe parente avec `super.method`</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.sayName() + <span class=\"hljs-string\">&quot; &quot;</span> + <span class=\"hljs-built_in\">this</span>.sayNumberCommit();\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">sayNumberCommit</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.numberCommit;\n  }\n}\n\n<span class=\"hljs-comment\">// instanciation</span>\n<span class=\"hljs-keyword\">const</span> contributor = <span class=\"hljs-keyword\">new</span> Contributor(<span class=\"hljs-string\">&quot;Jane&quot;</span>, <span class=\"hljs-string\">&quot;Smith&quot;</span>, <span class=\"hljs-number\">10</span>);\n\n<span class=\"hljs-comment\">// appel de la méthode sayName()</span>\n<span class=\"hljs-built_in\">console</span>.log(contributor.sayName());\n<span class=\"hljs-built_in\">console</span>.log(contributor.sayNumberCommit());\n</code></pre>\n<p><strong>Rappel :\n<a href=\"https://www.youtube.com/watch?v=wfMtDGfHWpA\">préférez la composition à l'héritage</a>.</strong></p>\n<h2>That's it</h2>\n<p>Concrètement, tout ce qui est possible de faire avec cette nouvelle notation\nl'était bien entendu\n<a href=\"https://gist.github.com/bloodyowl/7edc9c973d2236ed17e1\">avant</a>.</p>\n<p>Au final, on gagne en clarté, en lisibilité et donc en maintenabilité.</p>\n<p>À l'heure actuelle, il est nécessaire de passer par un transpileur comme\n<a href=\"https://babeljs.io/\">babel</a> pour utiliser les classes.</p>\n<p>Une dernière petite chose, le\n<a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode\">mode strict</a>\nest automatiquement activé dans le corps des classes et leurs déclarations. Il\nn'est donc pas nécessaire de le rajouter manuellement.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* Mode strict initial */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">someMethod</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-comment\">/* Ici le mode strict est implicitement activé */</span>\n  }\n}\n<span class=\"hljs-comment\">/* Mode strict inchangé */</span>\n</code></pre>\n"}