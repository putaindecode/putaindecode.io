{"hasPreviousPage":true,"hasNextPage":true,"totalCount":135,"items":[{"slug":"un-favicon-vite-fait-bien-fait","filename":"2015-11-17-un-favicon-vite-fait-bien-fait","title":"Un favicon vite fait bien fait","date":"Tue, 17 Nov 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-11-17T00:00:00.000Z","title":"Un favicon vite fait bien fait","author":"phbernard","oldSlug":"favicon","slug":"un-favicon-vite-fait-bien-fait"},"summary":"<dl>\n<dt>Oublions un instant CSS et JavaScript pour parler d'un sujet vraiment important</dt>\n<dd>le favicon.\n</dd>\n</dl>\n<p>Alors d'accord, le favicon n'est que le petit détail qu'on expédie en fin de\nprojet. Mais oubliez-le et votre client comprendra tout de suite qu'il manque</p>\n"},{"slug":"tester-unitairement-des-composants-react","filename":"2015-11-24-tester-unitairement-des-composants-react","title":"Tester unitairement des composants React","date":"Tue, 24 Nov 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-11-24T00:00:00.000Z","title":"Tester unitairement des composants React","author":"MoOx","oldSlug":"js/react/test-unitaires","slug":"tester-unitairement-des-composants-react"},"summary":"<p>L'équipe de React a implémenté une fonctionnalité appelée\n<a href=\"http://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow rendering</a>\n(rendu peu profond), qui permet de rendre un composant avec un seul niveau de\nprofondeur de rendu.</p>\n"},{"slug":"avantages-a-diviser-ses-storyboards-sur-ios-osx","filename":"2015-12-01-avantages-a-diviser-ses-storyboards-sur-ios-osx","title":"Avantages à diviser ses storyboards sur iOS/OS X","date":"Tue, 01 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-01T00:00:00.000Z","title":"Avantages à diviser ses storyboards sur iOS/OS X","author":"leolelego","oldSlug":"xcode/storyboards/diviser","slug":"avantages-a-diviser-ses-storyboards-sur-ios-osx"},"summary":"<p>Aujourd'hui, on va aborder un sujet qui parle à tous les devs iOS : les\n<strong>storyboards</strong>.</p>\n<blockquote>\n<p>Pour faire court : les storyboards sont les fichiers d'interface sous iOS/OS\nX. C'est là où vous placez vos <code>vues</code> dans vos <code>scènes</code>, vous les positionnez</p>\n</blockquote>\n"},{"slug":"es6-es2015-la-declaration-de-variables-avec-const-let-et-var","filename":"2015-12-01-es6-es2015-la-declaration-de-variables-avec-const-let-et-var","title":"ES6, ES2015 : la déclaration de variables avec const, let et var","date":"Tue, 01 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-01T00:00:00.000Z","title":"ES6, ES2015 : la déclaration de variables avec const, let et var","author":"Nyalab","oldSlug":"js/es2015/const-let-var","slug":"es6-es2015-la-declaration-de-variables-avec-const-let-et-var"},"summary":"<p>ES6 (aussi appelé ES2015) vous apporte de nouvelles façons de déclarer vos\nvariables grâce à <code>let</code> et <code>const</code> mais garde aussi la déclaration par <code>var</code>\ndans la spécification du langage.</p>\n<p>Première étape, on oublie tout ce qu'on sait sur <code>var</code>.</p>\n<h1>Décl</h1>\n"},{"slug":"es6-es2015-le-destructuring","filename":"2015-12-02-es6-es2015-le-destructuring","title":"ES6, ES2015 : le destructuring","date":"Wed, 02 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-02T00:00:00.000Z","title":"ES6, ES2015 : le destructuring","author":"bloodyowl","oldSlug":"js/es2015/destructuring","slug":"es6-es2015-le-destructuring"},"summary":"<h2>Le principe</h2>\n<p>Le destructuring consiste à assigner des variables provenant d'un objet ou\ntableau en reposant sur leur structure.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Partons d&#x27;un objet `myObject`</span>\n<span class=\"hljs-keyword\">var</span> myObject = {\n  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-number\">2</span>,\n};\n\n<span class=\"hljs-comment\">// Avec ES5, vous deviez par exemple f</span></code></pre>\n"},{"slug":"es6-es2015-les-valeurs-par-defaut-des-arguments","filename":"2015-12-03-es6-es2015-les-valeurs-par-defaut-des-arguments","title":"ES6, ES2015 : les valeurs par défaut des arguments","date":"Thu, 03 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-03T00:00:00.000Z","title":"ES6, ES2015 : les valeurs par défaut des arguments","author":"naholyr","oldSlug":"js/es2015/defaults","slug":"es6-es2015-les-valeurs-par-defaut-des-arguments"},"summary":"<p>Fatigués de taper <code>if (typeof x === 'undefined') x = defaultValue</code> ? Là encore\nES6 va nous apporter une solution élégante.</p>\n<h1>Valeurs par défaut</h1>\n<p>L'opérateur <code>=</code> permet maintenant en plus d'affecter une valeur à une variable\nde définir une valeur par</p>\n"},{"slug":"es6-es2015-object-assign","filename":"2015-12-04-es6-es2015-object-assign","title":"ES6, ES2015 : Object.assign","date":"Fri, 04 Dec 2015 00:00:00 GMT","draft":false,"meta":{"date":"2015-12-04T00:00:00.000Z","title":"ES6, ES2015 : Object.assign","author":"naholyr","oldSlug":"js/es2015/object-assign","slug":"es6-es2015-object-assign"},"summary":"<p>Vous connaissez les méthodes <code>extend</code> d'underscore ou lodash (mais plutôt lodash\nquand même) ? Comme la plupart de ces fonctions utilitaires, elles sont rendues\nobsolètes par une fonctionnalité d'ES6 (aka ES2015).</p>\n<h1>Object.assign</h1>\n<p>La nouvelle méthod</p>\n"}]}